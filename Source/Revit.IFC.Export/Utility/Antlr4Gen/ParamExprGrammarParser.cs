//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Git_Repositories\Revit\Dev2\revit\Source\API\Revit.IFC.Export\Utility\ParamExprGrammar.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Revit.IFC.Export.Utility {

   #pragma warning disable 3021

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class ParamExprGrammarParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, THIS=8, TYPE=9, 
		ELEMENTID=10, RUNNINGNUMBER=11, RUNNINGNUMBERINSTANCE=12, AUTOCALCULATE=13, 
		UNITTYPE=14, MULTIPLY=15, DIVIDE=16, ADDITION=17, SUBTRACT=18, STRING=19, 
		NUMBER=20, INT=21, WS=22;
	public const int
		RULE_param_expr = 0, RULE_expr = 1, RULE_atomic_param = 2, RULE_objref = 3, 
		RULE_type = 4, RULE_special_param = 5, RULE_param_name = 6, RULE_name = 7, 
		RULE_unary_operator = 8, RULE_ops = 9, RULE_power_op = 10, RULE_value = 11, 
		RULE_value_with_unit = 12, RULE_stringliteral = 13, RULE_realliteral = 14, 
		RULE_signed_number = 15;
	public static readonly string[] ruleNames = {
		"param_expr", "expr", "atomic_param", "objref", "type", "special_param", 
		"param_name", "name", "unary_operator", "ops", "power_op", "value", "value_with_unit", 
		"stringliteral", "realliteral", "signed_number"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'[Uu]'", "'('", "')'", "'.'", "'^'", null, null, 
		null, "'#'", "'##'", null, null, "'*'", "'/'", "'+'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "THIS", "TYPE", "ELEMENTID", 
		"RUNNINGNUMBER", "RUNNINGNUMBERINSTANCE", "AUTOCALCULATE", "UNITTYPE", 
		"MULTIPLY", "DIVIDE", "ADDITION", "SUBTRACT", "STRING", "NUMBER", "INT", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ParamExprGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public ParamExprGrammarParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class Param_exprContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Param_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.EnterParam_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.ExitParam_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamExprGrammarVisitor<TResult> typedVisitor = visitor as IParamExprGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_exprContext param_expr() {
		Param_exprContext _localctx = new Param_exprContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_param_expr);
		try {
			State = 41;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 32; Match(T__0);
				State = 33; expr(0);
				State = 34; Match(T__1);
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 36; Match(T__2);
				State = 37; Match(T__0);
				State = 38; expr(0);
				State = 39; Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public Atomic_paramContext atomic_param() {
			return GetRuleContext<Atomic_paramContext>(0);
		}
		public Unary_operatorContext unary_operator() {
			return GetRuleContext<Unary_operatorContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OpsContext ops() {
			return GetRuleContext<OpsContext>(0);
		}
		public Power_opContext power_op() {
			return GetRuleContext<Power_opContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamExprGrammarVisitor<TResult> typedVisitor = visitor as IParamExprGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 44; value();
				}
				break;

			case 2:
				{
				State = 45; atomic_param();
				}
				break;

			case 3:
				{
				State = 46; unary_operator();
				State = 47; expr(3);
				}
				break;

			case 4:
				{
				State = 49; Match(T__3);
				State = 50; expr(0);
				State = 51; Match(T__4);
				State = 53;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
				case 1:
					{
					State = 52; power_op();
					}
					break;
				}
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 63;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expr);
					State = 57;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 58; ops();
					State = 59; expr(3);
					}
					} 
				}
				State = 65;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Atomic_paramContext : ParserRuleContext {
		public ObjrefContext objref() {
			return GetRuleContext<ObjrefContext>(0);
		}
		public Param_nameContext[] param_name() {
			return GetRuleContexts<Param_nameContext>();
		}
		public Param_nameContext param_name(int i) {
			return GetRuleContext<Param_nameContext>(i);
		}
		public Special_paramContext special_param() {
			return GetRuleContext<Special_paramContext>(0);
		}
		public Atomic_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomic_param; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.EnterAtomic_param(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.ExitAtomic_param(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamExprGrammarVisitor<TResult> typedVisitor = visitor as IParamExprGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomic_param(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Atomic_paramContext atomic_param() {
		Atomic_paramContext _localctx = new Atomic_paramContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_atomic_param);
		try {
			State = 72;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case THIS:
			case TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 66; objref();
				State = 67; param_name();
				{
				State = 68; Match(T__5);
				State = 69; param_name();
				}
				}
				break;
			case ELEMENTID:
			case RUNNINGNUMBER:
			case RUNNINGNUMBERINSTANCE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 71; special_param();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjrefContext : ParserRuleContext {
		public ITerminalNode THIS() { return GetToken(ParamExprGrammarParser.THIS, 0); }
		public ITerminalNode TYPE() { return GetToken(ParamExprGrammarParser.TYPE, 0); }
		public ObjrefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objref; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.EnterObjref(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.ExitObjref(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamExprGrammarVisitor<TResult> typedVisitor = visitor as IParamExprGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjrefContext objref() {
		ObjrefContext _localctx = new ObjrefContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_objref);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			_la = _input.La(1);
			if ( !(_la==THIS || _la==TYPE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(ParamExprGrammarParser.TYPE, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamExprGrammarVisitor<TResult> typedVisitor = visitor as IParamExprGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Special_paramContext : ParserRuleContext {
		public ITerminalNode ELEMENTID() { return GetToken(ParamExprGrammarParser.ELEMENTID, 0); }
		public ITerminalNode RUNNINGNUMBER() { return GetToken(ParamExprGrammarParser.RUNNINGNUMBER, 0); }
		public ITerminalNode RUNNINGNUMBERINSTANCE() { return GetToken(ParamExprGrammarParser.RUNNINGNUMBERINSTANCE, 0); }
		public Special_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_special_param; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.EnterSpecial_param(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.ExitSpecial_param(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamExprGrammarVisitor<TResult> typedVisitor = visitor as IParamExprGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecial_param(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Special_paramContext special_param() {
		Special_paramContext _localctx = new Special_paramContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_special_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ELEMENTID) | (1L << RUNNINGNUMBER) | (1L << RUNNINGNUMBERINSTANCE))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_nameContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Param_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.EnterParam_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.ExitParam_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamExprGrammarVisitor<TResult> typedVisitor = visitor as IParamExprGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_nameContext param_name() {
		Param_nameContext _localctx = new Param_nameContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_param_name);
		try {
			State = 84;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__3:
				EnterOuterAlt(_localctx, 1);
				{
				State = 80; name();
				}
				break;
			case TYPE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 81; type();
				State = 82; name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(ParamExprGrammarParser.STRING, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamExprGrammarVisitor<TResult> typedVisitor = visitor as IParamExprGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; Match(T__3);
			State = 87; Match(STRING);
			State = 88; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operatorContext : ParserRuleContext {
		public Unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.EnterUnary_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.ExitUnary_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamExprGrammarVisitor<TResult> typedVisitor = visitor as IParamExprGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operatorContext unary_operator() {
		Unary_operatorContext _localctx = new Unary_operatorContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_unary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			_la = _input.La(1);
			if ( !(_la==ADDITION || _la==SUBTRACT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpsContext : ParserRuleContext {
		public ITerminalNode MULTIPLY() { return GetToken(ParamExprGrammarParser.MULTIPLY, 0); }
		public ITerminalNode DIVIDE() { return GetToken(ParamExprGrammarParser.DIVIDE, 0); }
		public ITerminalNode ADDITION() { return GetToken(ParamExprGrammarParser.ADDITION, 0); }
		public ITerminalNode SUBTRACT() { return GetToken(ParamExprGrammarParser.SUBTRACT, 0); }
		public OpsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ops; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.EnterOps(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.ExitOps(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamExprGrammarVisitor<TResult> typedVisitor = visitor as IParamExprGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOps(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpsContext ops() {
		OpsContext _localctx = new OpsContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_ops);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULTIPLY) | (1L << DIVIDE) | (1L << ADDITION) | (1L << SUBTRACT))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Power_opContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(ParamExprGrammarParser.INT, 0); }
		public Power_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.EnterPower_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.ExitPower_op(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamExprGrammarVisitor<TResult> typedVisitor = visitor as IParamExprGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPower_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Power_opContext power_op() {
		Power_opContext _localctx = new Power_opContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_power_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; Match(T__6);
			State = 96;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ADDITION || _la==SUBTRACT) {
				{
				State = 95;
				_la = _input.La(1);
				if ( !(_la==ADDITION || _la==SUBTRACT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 98; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public RealliteralContext realliteral() {
			return GetRuleContext<RealliteralContext>(0);
		}
		public StringliteralContext stringliteral() {
			return GetRuleContext<StringliteralContext>(0);
		}
		public Value_with_unitContext value_with_unit() {
			return GetRuleContext<Value_with_unitContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamExprGrammarVisitor<TResult> typedVisitor = visitor as IParamExprGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_value);
		try {
			State = 103;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ADDITION:
			case SUBTRACT:
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 100; realliteral();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 101; stringliteral();
				}
				break;
			case UNITTYPE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 102; value_with_unit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_with_unitContext : ParserRuleContext {
		public ITerminalNode UNITTYPE() { return GetToken(ParamExprGrammarParser.UNITTYPE, 0); }
		public Atomic_paramContext atomic_param() {
			return GetRuleContext<Atomic_paramContext>(0);
		}
		public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		public Value_with_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_with_unit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.EnterValue_with_unit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.ExitValue_with_unit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamExprGrammarVisitor<TResult> typedVisitor = visitor as IParamExprGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_with_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_with_unitContext value_with_unit() {
		Value_with_unitContext _localctx = new Value_with_unitContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_value_with_unit);
		try {
			State = 115;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 105; Match(UNITTYPE);
				State = 106; Match(T__3);
				State = 107; atomic_param();
				State = 108; Match(T__4);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 110; Match(UNITTYPE);
				State = 111; Match(T__3);
				State = 112; signed_number();
				State = 113; Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringliteralContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(ParamExprGrammarParser.STRING, 0); }
		public StringliteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringliteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.EnterStringliteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.ExitStringliteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamExprGrammarVisitor<TResult> typedVisitor = visitor as IParamExprGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringliteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringliteralContext stringliteral() {
		StringliteralContext _localctx = new StringliteralContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_stringliteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealliteralContext : ParserRuleContext {
		public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		public RealliteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realliteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.EnterRealliteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.ExitRealliteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamExprGrammarVisitor<TResult> typedVisitor = visitor as IParamExprGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealliteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealliteralContext realliteral() {
		RealliteralContext _localctx = new RealliteralContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_realliteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; signed_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_numberContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(ParamExprGrammarParser.NUMBER, 0); }
		public Signed_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.EnterSigned_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParamExprGrammarListener typedListener = listener as IParamExprGrammarListener;
			if (typedListener != null) typedListener.ExitSigned_number(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamExprGrammarVisitor<TResult> typedVisitor = visitor as IParamExprGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSigned_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signed_numberContext signed_number() {
		Signed_numberContext _localctx = new Signed_numberContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_signed_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ADDITION || _la==SUBTRACT) {
				{
				State = 121;
				_la = _input.La(1);
				if ( !(_la==ADDITION || _la==SUBTRACT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 124; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x18\x81\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3"+
		"\x2\x5\x2,\n\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x5\x3\x38\n\x3\x5\x3:\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3@\n\x3\f"+
		"\x3\xE\x3\x43\v\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4K\n\x4\x3"+
		"\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x5\bW\n\b\x3\t\x3"+
		"\t\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x5\f\x63\n\f\x3\f\x3\f\x3\r"+
		"\x3\r\x3\r\x5\rj\n\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x5\xEv\n\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x5\x11}\n\x11\x3"+
		"\x11\x3\x11\x3\x11\x2\x2\x3\x4\x12\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE"+
		"\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\x2\x6"+
		"\x3\x2\n\v\x3\x2\f\xE\x3\x2\x13\x14\x3\x2\x11\x14}\x2+\x3\x2\x2\x2\x4"+
		"\x39\x3\x2\x2\x2\x6J\x3\x2\x2\x2\bL\x3\x2\x2\x2\nN\x3\x2\x2\x2\fP\x3\x2"+
		"\x2\x2\xEV\x3\x2\x2\x2\x10X\x3\x2\x2\x2\x12\\\x3\x2\x2\x2\x14^\x3\x2\x2"+
		"\x2\x16`\x3\x2\x2\x2\x18i\x3\x2\x2\x2\x1Au\x3\x2\x2\x2\x1Cw\x3\x2\x2\x2"+
		"\x1Ey\x3\x2\x2\x2 |\x3\x2\x2\x2\"#\a\x3\x2\x2#$\x5\x4\x3\x2$%\a\x4\x2"+
		"\x2%,\x3\x2\x2\x2&\'\a\x5\x2\x2\'(\a\x3\x2\x2()\x5\x4\x3\x2)*\a\x4\x2"+
		"\x2*,\x3\x2\x2\x2+\"\x3\x2\x2\x2+&\x3\x2\x2\x2,\x3\x3\x2\x2\x2-.\b\x3"+
		"\x1\x2.:\x5\x18\r\x2/:\x5\x6\x4\x2\x30\x31\x5\x12\n\x2\x31\x32\x5\x4\x3"+
		"\x5\x32:\x3\x2\x2\x2\x33\x34\a\x6\x2\x2\x34\x35\x5\x4\x3\x2\x35\x37\a"+
		"\a\x2\x2\x36\x38\x5\x16\f\x2\x37\x36\x3\x2\x2\x2\x37\x38\x3\x2\x2\x2\x38"+
		":\x3\x2\x2\x2\x39-\x3\x2\x2\x2\x39/\x3\x2\x2\x2\x39\x30\x3\x2\x2\x2\x39"+
		"\x33\x3\x2\x2\x2:\x41\x3\x2\x2\x2;<\f\x4\x2\x2<=\x5\x14\v\x2=>\x5\x4\x3"+
		"\x5>@\x3\x2\x2\x2?;\x3\x2\x2\x2@\x43\x3\x2\x2\x2\x41?\x3\x2\x2\x2\x41"+
		"\x42\x3\x2\x2\x2\x42\x5\x3\x2\x2\x2\x43\x41\x3\x2\x2\x2\x44\x45\x5\b\x5"+
		"\x2\x45\x46\x5\xE\b\x2\x46G\a\b\x2\x2GH\x5\xE\b\x2HK\x3\x2\x2\x2IK\x5"+
		"\f\a\x2J\x44\x3\x2\x2\x2JI\x3\x2\x2\x2K\a\x3\x2\x2\x2LM\t\x2\x2\x2M\t"+
		"\x3\x2\x2\x2NO\a\v\x2\x2O\v\x3\x2\x2\x2PQ\t\x3\x2\x2Q\r\x3\x2\x2\x2RW"+
		"\x5\x10\t\x2ST\x5\n\x6\x2TU\x5\x10\t\x2UW\x3\x2\x2\x2VR\x3\x2\x2\x2VS"+
		"\x3\x2\x2\x2W\xF\x3\x2\x2\x2XY\a\x6\x2\x2YZ\a\x15\x2\x2Z[\a\a\x2\x2[\x11"+
		"\x3\x2\x2\x2\\]\t\x4\x2\x2]\x13\x3\x2\x2\x2^_\t\x5\x2\x2_\x15\x3\x2\x2"+
		"\x2`\x62\a\t\x2\x2\x61\x63\t\x4\x2\x2\x62\x61\x3\x2\x2\x2\x62\x63\x3\x2"+
		"\x2\x2\x63\x64\x3\x2\x2\x2\x64\x65\a\x17\x2\x2\x65\x17\x3\x2\x2\x2\x66"+
		"j\x5\x1E\x10\x2gj\x5\x1C\xF\x2hj\x5\x1A\xE\x2i\x66\x3\x2\x2\x2ig\x3\x2"+
		"\x2\x2ih\x3\x2\x2\x2j\x19\x3\x2\x2\x2kl\a\x10\x2\x2lm\a\x6\x2\x2mn\x5"+
		"\x6\x4\x2no\a\a\x2\x2ov\x3\x2\x2\x2pq\a\x10\x2\x2qr\a\x6\x2\x2rs\x5 \x11"+
		"\x2st\a\a\x2\x2tv\x3\x2\x2\x2uk\x3\x2\x2\x2up\x3\x2\x2\x2v\x1B\x3\x2\x2"+
		"\x2wx\a\x15\x2\x2x\x1D\x3\x2\x2\x2yz\x5 \x11\x2z\x1F\x3\x2\x2\x2{}\t\x4"+
		"\x2\x2|{\x3\x2\x2\x2|}\x3\x2\x2\x2}~\x3\x2\x2\x2~\x7F\a\x16\x2\x2\x7F"+
		"!\x3\x2\x2\x2\f+\x37\x39\x41JV\x62iu|";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Revit.IFC.Export.Utility
