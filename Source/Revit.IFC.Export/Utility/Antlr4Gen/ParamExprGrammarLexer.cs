//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Git_Repositories\Revit\Dev2\revit\Source\API\Revit.IFC.Export\Utility\ParamExprGrammar.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Revit.IFC.Export.Utility {

   #pragma warning disable 3021

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class ParamExprGrammarLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, THIS=8, TYPE=9, 
		ELEMENTID=10, RUNNINGNUMBER=11, RUNNINGNUMBERINSTANCE=12, AUTOCALCULATE=13, 
		UNITTYPE=14, MULTIPLY=15, DIVIDE=16, ADDITION=17, SUBTRACT=18, STRING=19, 
		NUMBER=20, INT=21, WS=22;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "THIS", "TYPE", 
		"ELEMENTID", "RUNNINGNUMBER", "RUNNINGNUMBERINSTANCE", "AUTOCALCULATE", 
		"UNITTYPE", "MULTIPLY", "DIVIDE", "ADDITION", "SUBTRACT", "STRING", "NUMBER", 
		"INT", "ALPHANUMERIC", "CHARONLY", "ESC", "UNICODE", "HEX", "NAMEWITHSPECIALCHAR", 
		"INT_DIGITS", "EXP", "WS"
	};


	// NOTE: If WHITESPACE is changed from 1, please also change the following line below:
	// WS:				[ \t\n\r]+ -> channel(1) ;
	// This is hardwired to 1 (instead of WHITESPACE) to avoid a compiler warning.
	   public const int WHITESPACE = 1;


	public ParamExprGrammarLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'[Uu]'", "'('", "')'", "'.'", "'^'", null, null, 
		null, "'#'", "'##'", null, null, "'*'", "'/'", "'+'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "THIS", "TYPE", "ELEMENTID", 
		"RUNNINGNUMBER", "RUNNINGNUMBERINSTANCE", "AUTOCALCULATE", "UNITTYPE", 
		"MULTIPLY", "DIVIDE", "ADDITION", "SUBTRACT", "STRING", "NUMBER", "INT", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ParamExprGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x18\xDE\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15"+
		"\t\x15\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A"+
		"\x4\x1B\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x3\x2"+
		"\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3"+
		"\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3"+
		"\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3"+
		"\f\x3\f\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE|\n\xE\x3\xF\x6\xF\x7F"+
		"\n\xF\r\xF\xE\xF\x80\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13"+
		"\x3\x13\x3\x14\x3\x14\x3\x14\a\x14\x8E\n\x14\f\x14\xE\x14\x91\v\x14\x3"+
		"\x14\x3\x14\x3\x14\x3\x14\a\x14\x97\n\x14\f\x14\xE\x14\x9A\v\x14\x3\x14"+
		"\x5\x14\x9D\n\x14\x3\x15\x3\x15\x3\x15\x5\x15\xA2\n\x15\x3\x15\x5\x15"+
		"\xA5\n\x15\x3\x15\x3\x15\x3\x15\x5\x15\xAA\n\x15\x3\x15\x3\x15\x5\x15"+
		"\xAE\n\x15\x3\x15\x5\x15\xB1\n\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18"+
		"\x3\x18\x3\x19\x3\x19\x3\x19\x5\x19\xBC\n\x19\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\a"+
		"\x1D\xCB\n\x1D\f\x1D\xE\x1D\xCE\v\x1D\x5\x1D\xD0\n\x1D\x3\x1E\x3\x1E\x5"+
		"\x1E\xD4\n\x1E\x3\x1E\x3\x1E\x3\x1F\x6\x1F\xD9\n\x1F\r\x1F\xE\x1F\xDA"+
		"\x3\x1F\x3\x1F\x4\x8F\x98\x2\x2 \x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2"+
		"\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2"+
		"\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16+\x2"+
		"\x17-\x2\x2/\x2\x2\x31\x2\x2\x33\x2\x2\x35\x2\x2\x37\x2\x2\x39\x2\x2;"+
		"\x2\x2=\x2\x18\x3\x2\x1C\x4\x2VVvv\x4\x2JJjj\x4\x2KKkk\x4\x2UUuu\x4\x2"+
		"[[{{\x4\x2RRrr\x4\x2GGgg\x4\x2NNnn\x4\x2OOoo\x4\x2PPpp\x4\x2\x46\x46\x66"+
		"\x66\x4\x2\x43\x43\x63\x63\x4\x2WWww\x4\x2QQqq\x4\x2\x45\x45\x65\x65\x3"+
		"\x2))\x3\x2$$\x6\x2\x32;\x43\\\x61\x61\x63|\x5\x2\x43\\\x61\x61\x63|\n"+
		"\x2$$\x31\x31^^\x64\x64hhppttvv\x5\x2\x32;\x43H\x63h\t\x2##\'(,;??\x42"+
		"\\`\x61\x63|\x3\x2\x32\x32\x3\x2\x32;\x4\x2--//\x5\x2\v\f\xF\xF\"\"\xE8"+
		"\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2"+
		"\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2"+
		"\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2"+
		"\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3"+
		"\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2"+
		"\x2\x2+\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x3?\x3\x2\x2\x2\x5\x41\x3\x2\x2\x2"+
		"\a\x43\x3\x2\x2\x2\tH\x3\x2\x2\x2\vJ\x3\x2\x2\x2\rL\x3\x2\x2\x2\xFN\x3"+
		"\x2\x2\x2\x11P\x3\x2\x2\x2\x13V\x3\x2\x2\x2\x15\\\x3\x2\x2\x2\x17g\x3"+
		"\x2\x2\x2\x19i\x3\x2\x2\x2\x1B{\x3\x2\x2\x2\x1D~\x3\x2\x2\x2\x1F\x82\x3"+
		"\x2\x2\x2!\x84\x3\x2\x2\x2#\x86\x3\x2\x2\x2%\x88\x3\x2\x2\x2\'\x9C\x3"+
		"\x2\x2\x2)\xB0\x3\x2\x2\x2+\xB2\x3\x2\x2\x2-\xB4\x3\x2\x2\x2/\xB6\x3\x2"+
		"\x2\x2\x31\xB8\x3\x2\x2\x2\x33\xBD\x3\x2\x2\x2\x35\xC3\x3\x2\x2\x2\x37"+
		"\xC5\x3\x2\x2\x2\x39\xCF\x3\x2\x2\x2;\xD1\x3\x2\x2\x2=\xD8\x3\x2\x2\x2"+
		"?@\a}\x2\x2@\x4\x3\x2\x2\x2\x41\x42\a\x7F\x2\x2\x42\x6\x3\x2\x2\x2\x43"+
		"\x44\a]\x2\x2\x44\x45\aW\x2\x2\x45\x46\aw\x2\x2\x46G\a_\x2\x2G\b\x3\x2"+
		"\x2\x2HI\a*\x2\x2I\n\x3\x2\x2\x2JK\a+\x2\x2K\f\x3\x2\x2\x2LM\a\x30\x2"+
		"\x2M\xE\x3\x2\x2\x2NO\a`\x2\x2O\x10\x3\x2\x2\x2PQ\a&\x2\x2QR\t\x2\x2\x2"+
		"RS\t\x3\x2\x2ST\t\x4\x2\x2TU\t\x5\x2\x2U\x12\x3\x2\x2\x2VW\a&\x2\x2WX"+
		"\t\x2\x2\x2XY\t\x6\x2\x2YZ\t\a\x2\x2Z[\t\b\x2\x2[\x14\x3\x2\x2\x2\\]\a"+
		"&\x2\x2]^\t\b\x2\x2^_\t\t\x2\x2_`\t\b\x2\x2`\x61\t\n\x2\x2\x61\x62\t\b"+
		"\x2\x2\x62\x63\t\v\x2\x2\x63\x64\t\x2\x2\x2\x64\x65\t\x4\x2\x2\x65\x66"+
		"\t\f\x2\x2\x66\x16\x3\x2\x2\x2gh\a%\x2\x2h\x18\x3\x2\x2\x2ij\a%\x2\x2"+
		"jk\a%\x2\x2k\x1A\x3\x2\x2\x2lm\a&\x2\x2mn\t\r\x2\x2no\t\xE\x2\x2op\t\x2"+
		"\x2\x2p|\t\xF\x2\x2qr\a&\x2\x2rs\t\r\x2\x2st\t\xE\x2\x2tu\t\x2\x2\x2u"+
		"v\t\xF\x2\x2vw\t\n\x2\x2wx\t\r\x2\x2xy\t\x2\x2\x2yz\t\x4\x2\x2z|\t\x10"+
		"\x2\x2{l\x3\x2\x2\x2{q\x3\x2\x2\x2|\x1C\x3\x2\x2\x2}\x7F\x5/\x18\x2~}"+
		"\x3\x2\x2\x2\x7F\x80\x3\x2\x2\x2\x80~\x3\x2\x2\x2\x80\x81\x3\x2\x2\x2"+
		"\x81\x1E\x3\x2\x2\x2\x82\x83\a,\x2\x2\x83 \x3\x2\x2\x2\x84\x85\a\x31\x2"+
		"\x2\x85\"\x3\x2\x2\x2\x86\x87\a-\x2\x2\x87$\x3\x2\x2\x2\x88\x89\a/\x2"+
		"\x2\x89&\x3\x2\x2\x2\x8A\x8F\t\x11\x2\x2\x8B\x8E\x5\x31\x19\x2\x8C\x8E"+
		"\v\x2\x2\x2\x8D\x8B\x3\x2\x2\x2\x8D\x8C\x3\x2\x2\x2\x8E\x91\x3\x2\x2\x2"+
		"\x8F\x90\x3\x2\x2\x2\x8F\x8D\x3\x2\x2\x2\x90\x92\x3\x2\x2\x2\x91\x8F\x3"+
		"\x2\x2\x2\x92\x9D\t\x11\x2\x2\x93\x98\t\x12\x2\x2\x94\x97\x5\x31\x19\x2"+
		"\x95\x97\v\x2\x2\x2\x96\x94\x3\x2\x2\x2\x96\x95\x3\x2\x2\x2\x97\x9A\x3"+
		"\x2\x2\x2\x98\x99\x3\x2\x2\x2\x98\x96\x3\x2\x2\x2\x99\x9B\x3\x2\x2\x2"+
		"\x9A\x98\x3\x2\x2\x2\x9B\x9D\t\x12\x2\x2\x9C\x8A\x3\x2\x2\x2\x9C\x93\x3"+
		"\x2\x2\x2\x9D(\x3\x2\x2\x2\x9E\x9F\x5+\x16\x2\x9F\xA1\a\x30\x2\x2\xA0"+
		"\xA2\x5+\x16\x2\xA1\xA0\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\xA4\x3\x2"+
		"\x2\x2\xA3\xA5\x5;\x1E\x2\xA4\xA3\x3\x2\x2\x2\xA4\xA5\x3\x2\x2\x2\xA5"+
		"\xB1\x3\x2\x2\x2\xA6\xA7\a\x30\x2\x2\xA7\xA9\x5+\x16\x2\xA8\xAA\x5;\x1E"+
		"\x2\xA9\xA8\x3\x2\x2\x2\xA9\xAA\x3\x2\x2\x2\xAA\xB1\x3\x2\x2\x2\xAB\xAD"+
		"\x5+\x16\x2\xAC\xAE\x5;\x1E\x2\xAD\xAC\x3\x2\x2\x2\xAD\xAE\x3\x2\x2\x2"+
		"\xAE\xB1\x3\x2\x2\x2\xAF\xB1\x5+\x16\x2\xB0\x9E\x3\x2\x2\x2\xB0\xA6\x3"+
		"\x2\x2\x2\xB0\xAB\x3\x2\x2\x2\xB0\xAF\x3\x2\x2\x2\xB1*\x3\x2\x2\x2\xB2"+
		"\xB3\x5\x39\x1D\x2\xB3,\x3\x2\x2\x2\xB4\xB5\t\x13\x2\x2\xB5.\x3\x2\x2"+
		"\x2\xB6\xB7\t\x14\x2\x2\xB7\x30\x3\x2\x2\x2\xB8\xBB\a^\x2\x2\xB9\xBC\t"+
		"\x15\x2\x2\xBA\xBC\x5\x33\x1A\x2\xBB\xB9\x3\x2\x2\x2\xBB\xBA\x3\x2\x2"+
		"\x2\xBC\x32\x3\x2\x2\x2\xBD\xBE\aw\x2\x2\xBE\xBF\x5\x35\x1B\x2\xBF\xC0"+
		"\x5\x35\x1B\x2\xC0\xC1\x5\x35\x1B\x2\xC1\xC2\x5\x35\x1B\x2\xC2\x34\x3"+
		"\x2\x2\x2\xC3\xC4\t\x16\x2\x2\xC4\x36\x3\x2\x2\x2\xC5\xC6\t\x17\x2\x2"+
		"\xC6\x38\x3\x2\x2\x2\xC7\xD0\t\x18\x2\x2\xC8\xCC\t\x19\x2\x2\xC9\xCB\t"+
		"\x19\x2\x2\xCA\xC9\x3\x2\x2\x2\xCB\xCE\x3\x2\x2\x2\xCC\xCA\x3\x2\x2\x2"+
		"\xCC\xCD\x3\x2\x2\x2\xCD\xD0\x3\x2\x2\x2\xCE\xCC\x3\x2\x2\x2\xCF\xC7\x3"+
		"\x2\x2\x2\xCF\xC8\x3\x2\x2\x2\xD0:\x3\x2\x2\x2\xD1\xD3\t\b\x2\x2\xD2\xD4"+
		"\t\x1A\x2\x2\xD3\xD2\x3\x2\x2\x2\xD3\xD4\x3\x2\x2\x2\xD4\xD5\x3\x2\x2"+
		"\x2\xD5\xD6\x5+\x16\x2\xD6<\x3\x2\x2\x2\xD7\xD9\t\x1B\x2\x2\xD8\xD7\x3"+
		"\x2\x2\x2\xD9\xDA\x3\x2\x2\x2\xDA\xD8\x3\x2\x2\x2\xDA\xDB\x3\x2\x2\x2"+
		"\xDB\xDC\x3\x2\x2\x2\xDC\xDD\b\x1F\x2\x2\xDD>\x3\x2\x2\x2\x14\x2{\x80"+
		"\x8D\x8F\x96\x98\x9C\xA1\xA4\xA9\xAD\xB0\xBB\xCC\xCF\xD3\xDA\x3\x2\x3"+
		"\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Revit.IFC.Export.Utility
