(*
Copyright by:
International Alliance for Interoperability, 1996-2001

All rights reserved. No part of this documentation may be
reproduced, stored in a retrieval system, or transmitted
in any form or by any means, without the prior written
permission of the owner.

Contents:
full IFC object model EXPRESS definitions for the IFC2x Addendum 1
long form delivery

Issue dates:
issued: October 26, 2001
edited: January 28, 2002 

Development Team:
Modeling Support Group of the 
International Alliance for Interoperability
*)


SCHEMA IFC2X_FINAL;

(* Begin of platform - IFC2x addendum 1 *)
-- SCHEMA IFCACTORRESOURCE;

  TYPE IfcActorSelect = SELECT
    (IfcOrganization,
     IfcPerson,
     IfcPersonAndOrganization);
  END_TYPE;

  TYPE IfcRoleEnum = ENUMERATION OF
    (SUPPLIER,
     MANUFACTURER,
     CONTRACTOR,
     SUBCONTRACTOR,
     ARCHITECT,
     STRUCTURALENGINEER,
     COSTENGINEER,
     CLIENT,
     BUILDINGOWNER,
     BUILDINGOPERATOR,
     MECHANICALENGINEER,
     ELECTRICALENGINEER,
     PROJECTMANAGER,
     FACILITIESMANAGER,
     CIVILENGINEER,
     COMISSIONINGENGINEER,
     ENGINEER,
     OWNER,
     CONSULTANT,
     CONSTRUCTIONMANAGER,
     FIELDCONSTRUCTIONMANAGER,
     RESELLER,
     USERDEFINED);
  END_TYPE;

  TYPE IfcAddressTypeEnum = ENUMERATION OF
    (OFFICE,
     SITE,
     HOME,
     DISTRIBUTIONPOINT,
     USERDEFINED);
  END_TYPE;

  ENTITY IfcOrganization;
      Id          : OPTIONAL IfcIdentifier;
      Name        : IfcLabel;
      Description : OPTIONAL IfcText;
      Roles       : OPTIONAL LIST [1:?] OF IfcActorRole;
      Addresses   : OPTIONAL LIST [1:?] OF IfcAddress;
    INVERSE
      IsRelatedBy : SET OF IfcOrganizationRelationship FOR RelatedOrganizations;
      Relates     : SET OF IfcOrganizationRelationship FOR RelatingOrganization;
      Engages     : SET OF IfcPersonAndOrganization FOR TheOrganization;
  END_ENTITY;

  ENTITY IfcActorRole;
      Role            : IfcRoleEnum;
      UserDefinedRole : OPTIONAL IfcLabel;
      Description     : OPTIONAL IfcText;
    WHERE
      WR1 : (Role <> IfcRoleEnum.USERDEFINED) OR
            ((Role = IfcRoleEnum.USERDEFINED) AND
              EXISTS(SELF.UserDefinedRole));
  END_ENTITY;

  ENTITY IfcAddress
    ABSTRACT SUPERTYPE OF (ONEOF(IfcPostalAddress, IfcTelecomAddress));
      Purpose            : OPTIONAL IfcAddressTypeEnum;
      Description        : OPTIONAL IfcText;
      UserDefinedPurpose : OPTIONAL IfcLabel;
    INVERSE
      OfPerson           : SET OF IfcPerson FOR Addresses;
      OfOrganization     : SET OF IfcOrganization FOR Addresses;
    WHERE
      WR1 : (NOT(EXISTS(Purpose))) OR
            ((Purpose <> IfcAddressTypeEnum.USERDEFINED) OR
            ((Purpose = IfcAddressTypeEnum.USERDEFINED) AND
              EXISTS(SELF.UserDefinedPurpose)));
  END_ENTITY;

  ENTITY IfcPostalAddress
    SUBTYPE OF(IfcAddress);
      InternalLocation : OPTIONAL IfcLabel;
      AddressLines     : OPTIONAL LIST [1:?] OF IfcLabel;
      PostalBox        : OPTIONAL IfcLabel;
      Town             : OPTIONAL IfcLabel;
      Region           : OPTIONAL IfcLabel;
      PostalCode       : OPTIONAL IfcLabel;
      Country          : OPTIONAL IfcLabel;
    WHERE
      WR1 : EXISTS (InternalLocation) OR 
            EXISTS (AddressLines) OR
            EXISTS (PostalBox) OR
            EXISTS (PostalCode) OR
            EXISTS (Town) OR 
            EXISTS (Region) OR  
            EXISTS (Country);
  END_ENTITY;

  ENTITY IfcTelecomAddress
    SUBTYPE OF(IfcAddress);
      TelephoneNumbers        : OPTIONAL LIST [1:?] OF IfcLabel;
      FacsimileNumbers        : OPTIONAL LIST [1:?] OF IfcLabel;
      PagerNumber             : OPTIONAL IfcLabel;
      ElectronicMailAddresses : OPTIONAL LIST [1:?] OF IfcLabel;
      WWWHomePageURL          : OPTIONAL IfcLabel;
    WHERE
      WR1 : EXISTS (TelephoneNumbers) OR
            EXISTS (PagerNumber) OR
            EXISTS (FacsimileNumbers) OR 
            EXISTS (ElectronicMailAddresses) OR 
            EXISTS (WWWHomePageURL);
  END_ENTITY;

  ENTITY IfcPerson;
      Id           : OPTIONAL IfcIdentifier;
      FamilyName   : OPTIONAL IfcLabel;
      GivenName    : OPTIONAL IfcLabel;
      MiddleNames  : OPTIONAL LIST [1:?] OF IfcLabel;
      PrefixTitles : OPTIONAL LIST [1:?] OF IfcLabel;
      SuffixTitles : OPTIONAL LIST [1:?] OF IfcLabel;
      Roles        : OPTIONAL LIST [1:?] OF IfcActorRole;
      Addresses    : OPTIONAL LIST [1:?] OF IfcAddress;
    INVERSE
      EngagedIn    : SET OF IfcPersonAndOrganization FOR ThePerson;
    WHERE
      WR1 : EXISTS(FamilyName) OR 
            EXISTS(GivenName);
  END_ENTITY;

  ENTITY IfcPersonAndOrganization;
      ThePerson       : IfcPerson;
      TheOrganization : IfcOrganization;
      Roles           : OPTIONAL LIST [1:?] OF IfcActorRole;
  END_ENTITY;

  ENTITY IfcOrganizationRelationship;
      Name                 : IfcLabel;
      Description          : OPTIONAL IfcText;
      RelatingOrganization : IfcOrganization;
      RelatedOrganizations : SET [1:?] OF IfcOrganization;
  END_ENTITY;

-- END_SCHEMA;
-- SCHEMA IFCDATETIMERESOURCE;

  TYPE IfcDayInMonthNumber = INTEGER;
  END_TYPE;

  TYPE IfcDaylightSavingHour = INTEGER;
    WHERE
      WR1 : { 0 <= SELF <= 2 };
  END_TYPE;

  TYPE IfcHourInDay = INTEGER;
    WHERE
      WR1 : { 0 <= SELF < 24 };
  END_TYPE;

  TYPE IfcMinuteInHour = INTEGER;
    WHERE
      WR1 : {0 <= SELF <= 59 };
  END_TYPE;

  TYPE IfcMonthInYearNumber = INTEGER;
    WHERE
      WR1 : { 1<= SELF <= 12 };
  END_TYPE;

  TYPE IfcSecondInMinute = REAL;
    WHERE
      WR1 : { 0 <= SELF < 60 };
  END_TYPE;

  TYPE IfcYearNumber = INTEGER;
  END_TYPE;

  TYPE IfcDateTimeSelect = SELECT
    (IfcCalendarDate,
     IfcLocalTime,
     IfcDateAndTime);
  END_TYPE;

  TYPE IfcAheadOrBehind = ENUMERATION OF
    (AHEAD,
     BEHIND);
  END_TYPE;

  ENTITY IfcCalendarDate;
      DayComponent   : IfcDayInMonthNumber;
      MonthComponent : IfcMonthInYearNumber;
      YearComponent  : IfcYearNumber;
    WHERE
      WR21 : IfcValidCalendarDate (SELF);
  END_ENTITY;

  ENTITY IfcLocalTime;
      HourComponent        : IfcHourInDay;
      MinuteComponent      : OPTIONAL IfcMinuteInHour;
      SecondComponent      : OPTIONAL IfcSecondInMinute;
      Zone                 : OPTIONAL IfcCoordinatedUniversalTimeOffset;
      DaylightSavingOffset : OPTIONAL IfcDaylightSavingHour;
    WHERE
      WR21 : IfcValidTime (SELF);
  END_ENTITY;

  ENTITY IfcCoordinatedUniversalTimeOffset;
      HourOffset   : IfcHourInDay;
      MinuteOffset : OPTIONAL IfcMinuteInHour;
      Sense        : IfcAheadOrBehind;
  END_ENTITY;

  ENTITY IfcDateAndTime;
      DateComponent : IfcCalendarDate;
      TimeComponent : IfcLocalTime;
  END_ENTITY;

  FUNCTION IfcValidCalendarDate (Date : IfcCalendarDate) : LOGICAL;
  IF NOT ({1 <= Date.DayComponent <= 31}) THEN    
    RETURN(FALSE);  
  END_IF;
  CASE Date.MonthComponent OF
    4         : RETURN({ 1<= Date.DayComponent <= 30});
    6         : RETURN({ 1<= Date.DayComponent <= 30});
    9         : RETURN({ 1<= Date.DayComponent <= 30});
    11        : RETURN({ 1<= Date.DayComponent <= 30});    
    2         :    
    BEGIN
      IF (IfcLeapYear(Date.YearComponent)) THEN
        RETURN({ 1<= Date.DayComponent <= 29});      
      ELSE
        RETURN({ 1<= Date.DayComponent <= 28});      
      END_IF;    
    END;
    OTHERWISE : RETURN(TRUE);  
  END_CASE;
  END_FUNCTION;

  FUNCTION IfcValidTime
  (Time: IfcLocalTime) : BOOLEAN;
  IF EXISTS (Time.SecondComponent) THEN
    RETURN (EXISTS (Time.MinuteComponent));  
  ELSE    
    RETURN (TRUE);  
  END_IF;
  END_FUNCTION;

  FUNCTION IfcLeapYear
  (Year : IfcYearNumber)
        :BOOLEAN;
  
  IF ((((Year MOD 4) = 0) AND ((Year MOD 100) <> 0)) OR
              ((Year MOD 400) = 0)) THEN
    RETURN(TRUE);
  ELSE
    RETURN(FALSE);
  END_IF;
  END_FUNCTION;

-- END_SCHEMA;
-- SCHEMA IFCEXTERNALREFERENCERESOURCE;

  TYPE IfcClassificationNotationSelect = SELECT
    (IfcClassificationNotation,
     IfcClassificationReference);
  END_TYPE;

  TYPE IfcDocumentConfidentialityEnum = ENUMERATION OF
    (PUBLIC,
     RESTRICTED,
     CONFIDENTIAL,
     PERSONAL,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcDocumentStatusEnum = ENUMERATION OF
    (DRAFT,
     FINALDRAFT,
     FINAL,
     REVISION,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcDocumentSelect = SELECT
    (IfcDocumentReference,
     IfcDocumentInformation);
  END_TYPE;

  TYPE IfcLibrarySelect = SELECT
    (IfcLibraryReference,
     IfcLibraryInformation);
  END_TYPE;

  ENTITY IfcClassificationNotation;
      NotationFacets : SET [1:?] OF IfcClassificationNotationFacet;
  END_ENTITY;

  ENTITY IfcClassificationNotationFacet;
      NotationValue : IfcLabel;
  END_ENTITY;

  ENTITY IfcClassificationReference
    SUBTYPE OF(IfcExternalReference);
      ReferencedSource : OPTIONAL IfcClassification;
  END_ENTITY;

  ENTITY IfcExternalReference
    ABSTRACT SUPERTYPE OF (ONEOF(IfcLibraryReference, IfcClassificationReference, IfcDocumentReference));
      Location      : OPTIONAL IfcLabel;
      ItemReference : OPTIONAL IfcIdentifier;
      Name          : OPTIONAL IfcLabel;
    WHERE
      WR1 : EXISTS(ItemReference) OR EXISTS(Location) OR EXISTS(Name);
  END_ENTITY;

  ENTITY IfcLibraryReference
    SUBTYPE OF(IfcExternalReference);
    INVERSE
      ReferenceIntoLibrary : SET [0:1] OF IfcLibraryInformation FOR LibraryReference;
  END_ENTITY;

  ENTITY IfcLibraryInformation;
      Name             : IfcLabel;
      Version          : OPTIONAL IfcLabel;
      Publisher        : OPTIONAL IfcOrganization;
      VersionDate      : OPTIONAL IfcCalendarDate;
      LibraryReference : OPTIONAL SET [1:?] OF IfcLibraryReference;
  END_ENTITY;

  ENTITY IfcDocumentReference
    SUBTYPE OF(IfcExternalReference);
    INVERSE
      ReferenceToDocument : SET [0:1] OF IfcDocumentInformation FOR DocumentReferences;
    WHERE
      WR1 : EXISTS(Name) XOR EXISTS(ReferenceToDocument[1]);
  END_ENTITY;

  ENTITY IfcDocumentInformation;
      DocumentId         : IfcIdentifier;
      Name               : IfcLabel;
      Description        : OPTIONAL IfcText;
      DocumentReferences : OPTIONAL SET [1:?] OF IfcDocumentReference;
      Purpose            : OPTIONAL IfcText;
      IntendedUse        : OPTIONAL IfcText;
      Scope              : OPTIONAL IfcText;
      Revision           : OPTIONAL IfcLabel;
      DocumentOwner      : OPTIONAL IfcActorSelect;
      Editors            : OPTIONAL SET [1:?] OF IfcActorSelect;
      CreationTime       : OPTIONAL IfcDateAndTime;
      LastRevisionTime   : OPTIONAL IfcDateAndTime;
      ElectronicFormat   : OPTIONAL IfcDocumentElectronicFormat;
      ValidFrom          : OPTIONAL IfcCalendarDate;
      ValidUntil         : OPTIONAL IfcCalendarDate;
      Confidentiality    : OPTIONAL IfcDocumentConfidentialityEnum;
      Status             : OPTIONAL IfcDocumentStatusEnum;
    INVERSE
      IsPointedTo        : SET OF IfcDocumentInformationRelationship FOR RelatedDocuments;
      IsPointer          : SET [0:1] OF IfcDocumentInformationRelationship FOR RelatingDocument;
  END_ENTITY;

  ENTITY IfcDocumentElectronicFormat;
      FileExtension   : OPTIONAL IfcLabel;
      MimeContentType : OPTIONAL IfcLabel;
      MimeSubtype     : OPTIONAL IfcLabel;
    WHERE
      WR1 : EXISTS(FileExtension) OR EXISTS(MimeContentType);
  END_ENTITY;

  ENTITY IfcDocumentInformationRelationship;
      RelatingDocument : IfcDocumentInformation;
      RelatedDocuments : SET [1:?] OF IfcDocumentInformation;
      RelationshipType : OPTIONAL IfcLabel;
  END_ENTITY;

  ENTITY IfcClassification;
      Source      : IfcLabel;
      Edition     : IfcLabel;
      EditionDate : OPTIONAL IfcCalendarDate;
      Name        : IfcLabel;
    INVERSE
      Contains    : SET OF IfcClassificationItem FOR ItemOf;
  END_ENTITY;

  ENTITY IfcClassificationItem;
      Notation            : IfcClassificationNotationFacet;
      ItemOf              : OPTIONAL IfcClassification;
      Title               : IfcLabel;
    INVERSE
      IsClassifiedItemIn  : SET [0:1] OF IfcClassificationItemRelationship FOR RelatedItems;
      IsClassifyingItemIn : SET [0:1] OF IfcClassificationItemRelationship FOR RelatingItem;
  END_ENTITY;

  ENTITY IfcClassificationItemRelationship;
      RelatingItem : IfcClassificationItem;
      RelatedItems : SET [1:?] OF IfcClassificationItem;
  END_ENTITY;

-- END_SCHEMA;
-- SCHEMA IFCGEOMETRICCONSTRAINTRESOURCE;

  ENTITY IfcConnectionGeometry
    ABSTRACT SUPERTYPE OF (ONEOF(IfcConnectionPointGeometry, IfcConnectionCurveGeometry, 
     IfcConnectionSurfaceGeometry, IfcConnectionPortGeometry));
  END_ENTITY;

  ENTITY IfcConnectionPointGeometry
    SUBTYPE OF(IfcConnectionGeometry);
      PointOnRelatingElement : IfcPoint;
      PointOnRelatedElement  : OPTIONAL IfcPoint;
  END_ENTITY;

  ENTITY IfcConnectionCurveGeometry
    SUBTYPE OF(IfcConnectionGeometry);
      CurveOnRelatingElement : IfcBoundedCurve;
      CurveOnRelatedElement  : OPTIONAL IfcBoundedCurve;
  END_ENTITY;

  ENTITY IfcConnectionSurfaceGeometry
    SUBTYPE OF(IfcConnectionGeometry);
      SurfaceOnRelatingElement : IfcSurface;
      SurfaceOnRelatedElement  : OPTIONAL IfcSurface;
  END_ENTITY;

  ENTITY IfcConnectionPortGeometry
    SUBTYPE OF(IfcConnectionGeometry);
      LocationAtRelatingElement : IfcAxis2Placement;
      LocationAtRelatedElement  : OPTIONAL IfcAxis2Placement;
      ProfileOfPort             : IfcProfileDef;
  END_ENTITY;

  ENTITY IfcGridAxis;
      AxisTag   : OPTIONAL IfcLabel;
      AxisCurve : IfcCurve;
      SameSense : IfcBoolean;
    WHERE
      WR1 : AxisCurve.Dim = 2;
  END_ENTITY;

  ENTITY IfcVirtualGridIntersection;
      IntersectingAxes : LIST [2:2] OF UNIQUE IfcGridAxis;
      OffsetDistances  : LIST [2:3] OF IfcLengthMeasure;
  END_ENTITY;

  ENTITY IfcGridPlacement
    SUBTYPE OF(IfcObjectPlacement);
      PlacementLocation     : IfcVirtualGridIntersection;
      PlacementRefDirection : OPTIONAL IfcVirtualGridIntersection;
  END_ENTITY;

  ENTITY IfcObjectPlacement
    ABSTRACT SUPERTYPE OF (ONEOF(IfcGridPlacement, IfcLocalPlacement));
    INVERSE
      ReferencedByPlacements : SET OF IfcLocalPlacement FOR PlacementRelTo;
  END_ENTITY;

  ENTITY IfcLocalPlacement
    SUBTYPE OF(IfcObjectPlacement);
      PlacementRelTo    : OPTIONAL IfcObjectPlacement;
      RelativePlacement : IfcAxis2Placement;
  END_ENTITY;

-- END_SCHEMA;
-- SCHEMA IFCGEOMETRICMODELRESOURCE;

  TYPE IfcCsgSelect = SELECT
    (IfcBooleanResult);
  END_TYPE;

  TYPE IfcGeometricSetSelect = SELECT
    (IfcPoint,
     IfcCurve,
     IfcSurface);
  END_TYPE;

  TYPE IfcBooleanOperator = ENUMERATION OF
    (UNION,
     INTERSECTION,
     DIFFERENCE);
  END_TYPE;

  TYPE IfcBooleanOperand = SELECT
    (IfcSolidModel,
     IfcHalfSpaceSolid,
     IfcBooleanResult);
  END_TYPE;

  ENTITY IfcBooleanResult
    SUPERTYPE OF (IfcBooleanClippingResult)
    SUBTYPE OF(IfcGeometricRepresentationItem);
      Operator      : IfcBooleanOperator;
      FirstOperand  : IfcBooleanOperand;
      SecondOperand : IfcBooleanOperand;
    DERIVE
      Dim           : IfcDimensionCount := FirstOperand.Dim;
    WHERE
      WR1 : FirstOperand.Dim = SecondOperand.Dim;
  END_ENTITY;

  ENTITY IfcHalfSpaceSolid
    SUPERTYPE OF (ONEOF(IfcBoxedHalfSpace, IfcPolygonalBoundedHalfSpace))
    SUBTYPE OF(IfcGeometricRepresentationItem);
      BaseSurface   : IfcSurface;
      AgreementFlag : BOOLEAN;
    DERIVE
      Dim           : IfcDimensionCount := 3;
  END_ENTITY;

  ENTITY IfcBoxedHalfSpace
    SUBTYPE OF(IfcHalfSpaceSolid);
      Enclosure : IfcBoundingBox;
    WHERE
      WR1 : NOT ('IFC2X_FINAL.IFCCURVEBOUNDEDPLANE' IN TYPEOF(SELF\IfcHalfSpaceSolid.BaseSurface));
  END_ENTITY;

  ENTITY IfcBoundingBox
    SUBTYPE OF(IfcGeometricRepresentationItem);
      Corner : IfcCartesianPoint;
      XDim   : IfcPositiveLengthMeasure;
      YDim   : IfcPositiveLengthMeasure;
      ZDim   : IfcPositiveLengthMeasure;
    DERIVE
      Dim    : IfcDimensionCount := 3;
  END_ENTITY;

  ENTITY IfcPolygonalBoundedHalfSpace
    SUBTYPE OF(IfcHalfSpaceSolid);
      Position          : IfcAxis2Placement3D;
      PolygonalBoundary : IfcPolyline;
    WHERE
      WR31 : PolygonalBoundary.Dim = 2;
  END_ENTITY;

  ENTITY IfcSolidModel
    ABSTRACT SUPERTYPE OF (ONEOF(IfcManifoldSolidBrep, IfcSweptAreaSolid, IfcCsgSolid))
    SUBTYPE OF(IfcGeometricRepresentationItem);
    DERIVE
      Dim : IfcDimensionCount := 3;
  END_ENTITY;

  ENTITY IfcManifoldSolidBrep
    ABSTRACT SUPERTYPE OF (ONEOF(IfcFacetedBrep, IfcFacetedBrepWithVoids))
    SUBTYPE OF(IfcSolidModel);
      Outer : IfcClosedShell;
  END_ENTITY;

  ENTITY IfcFacetedBrep
    SUBTYPE OF(IfcManifoldSolidBrep);
  END_ENTITY;

  ENTITY IfcFacetedBrepWithVoids
    SUBTYPE OF(IfcManifoldSolidBrep);
      Voids : SET [1:?] OF IfcClosedShell;
  END_ENTITY;

  ENTITY IfcSweptAreaSolid
    ABSTRACT SUPERTYPE OF (ONEOF(IfcExtrudedAreaSolid, IfcRevolvedAreaSolid))
    SUBTYPE OF(IfcSolidModel);
      SweptArea : IfcProfileDef;
      Position  : IfcAxis2Placement3D;
    WHERE
      WR1 : NOT('IFC2X_FINAL.IFCDERIVEDPROFILEDEF' IN TYPEOF(SweptArea));
      WR2 : SweptArea.ProfileType = IfcProfileTypeEnum.Area;
  END_ENTITY;

  ENTITY IfcExtrudedAreaSolid
    SUBTYPE OF(IfcSweptAreaSolid);
      ExtrudedDirection : IfcDirection;
      Depth             : IfcPositiveLengthMeasure;
    WHERE
      WR1 : IfcDotProduct(IfcRepresentationItem() || IfcGeometricRepresentationItem() || IfcDirection([0.0,0.0,1.0]), 
            SELF.ExtrudedDirection) <> 0.0;
  END_ENTITY;

  ENTITY IfcRevolvedAreaSolid
    SUBTYPE OF(IfcSweptAreaSolid);
      Axis     : IfcAxis1Placement;
      Angle    : IfcPlaneAngleMeasure;
    DERIVE
      AxisLine : IfcLine := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcCurve() || IfcLine(Axis.Location, 
                   IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector(Axis.Z,1.0));
    WHERE
      WR1 : Axis.Location.Coordinates[3] = 0.0;
      WR2 : Axis.Z.DirectionRatios[3] = 0.0;
  END_ENTITY;

  ENTITY IfcCsgSolid
    SUBTYPE OF(IfcSolidModel);
      TreeRootExpression : IfcCsgSelect;
  END_ENTITY;

  ENTITY IfcSectionedSpine
    SUBTYPE OF(IfcGeometricRepresentationItem);
      SpineCurve            : IfcCompositeCurve;
      CrossSections         : LIST [2:?] OF IfcProfileDef;
      CrossSectionPositions : LIST [2:?] OF IfcAxis2Placement3D;
    DERIVE
      Dim                   : IfcDimensionCount := 3;
    WHERE
      WR1 : SIZEOF(CrossSections) = SIZEOF(CrossSectionPositions);
      WR2 : SIZEOF(QUERY(temp <* CrossSections | CrossSections[1].ProfileType <> temp.ProfileType)) = 0;
      WR3 : SpineCurve.Dim = 3;
  END_ENTITY;

  ENTITY IfcGeometricSet
    SUBTYPE OF(IfcGeometricRepresentationItem);
      Elements : SET [1:?] OF IfcGeometricSetSelect;
  END_ENTITY;

  ENTITY IfcFaceBasedSurfaceModel
    SUBTYPE OF(IfcGeometricRepresentationItem);
      FbsmFaces : SET [1:?] OF IfcConnectedFaceSet;
  END_ENTITY;

  ENTITY IfcShellBasedSurfaceModel
    SUBTYPE OF(IfcGeometricRepresentationItem);
      SbsmBoundary : SET [1:?] OF IfcShell;
  END_ENTITY;

  ENTITY IfcBooleanClippingResult
    SUBTYPE OF(IfcBooleanResult);
    WHERE
      WR1 : ('IFC2X_FINAL.IFCSWEPTAREASOLID' IN TYPEOF(FirstOperand)) OR 
            ('IFC2X_FINAL.IFCBOOLEANCLIPPINGRESULT' IN TYPEOF(FirstOperand));
      WR2 : ('IFC2X_FINAL.IFCHALFSPACESOLID' IN TYPEOF(SecondOperand));
      WR3 : Operator = DIFFERENCE;
  END_ENTITY;

-- END_SCHEMA;
-- SCHEMA IFCGEOMETRYRESOURCE;

  TYPE IfcDimensionCount = INTEGER;
    WHERE
      WR1 : { 0 < SELF <= 3 };
  END_TYPE;

  TYPE IfcAxis2Placement = SELECT
    (IfcAxis2Placement2D,
     IfcAxis2Placement3D);
  END_TYPE;

  TYPE IfcTransitionCode = ENUMERATION OF
    (DISCONTINUOUS,
     CONTINUOUS,
     CONTSAMEGRADIENT,
     CONTSAMEGRADIENTSAMECURVATURE);
  END_TYPE;

  TYPE IfcTrimmingSelect = SELECT
    (IfcCartesianPoint,
     IfcParameterValue);
  END_TYPE;

  TYPE IfcTrimmingPreference = ENUMERATION OF
    (CARTESIAN,
     PARAMETER,
     UNSPECIFIED);
  END_TYPE;

  TYPE IfcVectorOrDirection = SELECT
    (IfcDirection,
     IfcVector);
  END_TYPE;

  ENTITY IfcAxis2Placement2D
    SUBTYPE OF(IfcPlacement);
      RefDirection : OPTIONAL IfcDirection;
    DERIVE
      P            : LIST [2:2] OF IfcDirection := IfcBuild2Axes(RefDirection);
    WHERE
      WR1 : (NOT (EXISTS (RefDirection))) OR (RefDirection.Dim = 2);
      WR2 : SELF\IfcPlacement.Location.Dim = 2;
  END_ENTITY;

  ENTITY IfcPlacement
    ABSTRACT SUPERTYPE OF (ONEOF(IfcAxis1Placement, IfcAxis2Placement2D, IfcAxis2Placement3D))
    SUBTYPE OF(IfcGeometricRepresentationItem);
      Location : IfcCartesianPoint;
    DERIVE
      Dim      : IfcDimensionCount := Location.Dim;
  END_ENTITY;

  ENTITY IfcGeometricRepresentationItem
    ABSTRACT SUPERTYPE OF (ONEOF(IfcCompositeCurveSegment, IfcCurve, 
      IfcDirection, IfcPlacement, IfcPoint, IfcSurface, IfcVector, 
      IfcBooleanResult, IfcSolidModel, IfcHalfSpaceSolid, IfcBoundingBox, 
      IfcCartesianTransformationOperator, IfcSectionedSpine, IfcGeometricSet, 
      IfcFaceBasedSurfaceModel, IfcShellBasedSurfaceModel))
    SUBTYPE OF(IfcRepresentationItem);
  END_ENTITY;

  ENTITY IfcRepresentationItem
    ABSTRACT SUPERTYPE OF (ONEOF(IfcTopologicalRepresentationItem, 
      IfcGeometricRepresentationItem, IfcMappedItem));
  END_ENTITY;

  ENTITY IfcMappedItem
    SUBTYPE OF(IfcRepresentationItem);
      MappingSource : IfcRepresentationMap;
      MappingTarget : IfcCartesianTransformationOperator;
  END_ENTITY;

  ENTITY IfcRepresentationMap;
      MappingOrigin        : IfcAxis2Placement;
      MappedRepresentation : IfcRepresentation;
    INVERSE
      MapUsage             : SET OF IfcMappedItem FOR MappingSource;
  END_ENTITY;

  ENTITY IfcCartesianTransformationOperator
    ABSTRACT SUPERTYPE OF (ONEOF(IfcCartesianTransformationOperator2D, 
      IfcCartesianTransformationOperator3D))
    SUBTYPE OF(IfcGeometricRepresentationItem);
      Axis1       : OPTIONAL IfcDirection;
      Axis2       : OPTIONAL IfcDirection;
      LocalOrigin : IfcCartesianPoint;
      Scale       : OPTIONAL REAL;
    DERIVE
      Scl         : REAL := NVL(Scale, 1.0);
      Dim         : IfcDimensionCount := LocalOrigin.Dim;
    WHERE
      WR1 : Scl > 0.0;
  END_ENTITY;

  ENTITY IfcCartesianTransformationOperator2D
    SUPERTYPE OF (IfcCartesianTransformationOperator2DnonUniform)
    SUBTYPE OF(IfcCartesianTransformationOperator);
    DERIVE
      U : LIST [2:2] OF IfcDirection := IfcBaseAxis(2,SELF\IfcCartesianTransformationOperator.Axis1,
          SELF\IfcCartesianTransformationOperator.Axis2,?);
    WHERE
      WR1 : SELF\IfcCartesianTransformationOperator.Dim = 2;
      WR2 : NOT(EXISTS(SELF\IfcCartesianTransformationOperator.Axis1)) OR 
            (SELF\IfcCartesianTransformationOperator.Axis1.Dim = 2);
      WR3 : NOT(EXISTS(SELF\IfcCartesianTransformationOperator.Axis2)) OR 
            (SELF\IfcCartesianTransformationOperator.Axis2.Dim = 2);
  END_ENTITY;

  ENTITY IfcCartesianTransformationOperator2DnonUniform
    SUBTYPE OF(IfcCartesianTransformationOperator2D);
      Scale2 : OPTIONAL REAL;
    DERIVE
      Scl2   : REAL := NVL(Scale2, SELF\IfcCartesianTransformationOperator.Scl);
    WHERE
      WR1 : Scl2 > 0.0;
  END_ENTITY;

  ENTITY IfcDirection
    SUBTYPE OF(IfcGeometricRepresentationItem);
      DirectionRatios : LIST [2:3] OF REAL;
    DERIVE
      Dim             : IfcDimensionCount := HIINDEX(DirectionRatios);
  END_ENTITY;

  ENTITY IfcCartesianTransformationOperator3D
    SUPERTYPE OF (IfcCartesianTransformationOperator3DnonUniform)
    SUBTYPE OF(IfcCartesianTransformationOperator);
      Axis3 : OPTIONAL IfcDirection;
    DERIVE
      U     : LIST [3:3] OF IfcDirection := IfcBaseAxis(3,SELF\IfcCartesianTransformationOperator.Axis1,
              SELF\IfcCartesianTransformationOperator.Axis2,Axis3);
    WHERE
      WR1 : SELF\IfcCartesianTransformationOperator.Dim = 3;
      WR2 : NOT(EXISTS(SELF\IfcCartesianTransformationOperator.Axis1)) OR 
            (SELF\IfcCartesianTransformationOperator.Axis1.Dim = 3);
      WR3 : NOT(EXISTS(SELF\IfcCartesianTransformationOperator.Axis2)) OR 
            (SELF\IfcCartesianTransformationOperator.Axis2.Dim = 3);
      WR4 : NOT(EXISTS(Axis3)) OR (Axis3.Dim = 3);
  END_ENTITY;

  ENTITY IfcCartesianTransformationOperator3DnonUniform
    SUBTYPE OF(IfcCartesianTransformationOperator3D);
      Scale2 : OPTIONAL REAL;
      Scale3 : OPTIONAL REAL;
    DERIVE
      Scl2   : REAL := NVL(Scale2, SELF\IfcCartesianTransformationOperator.Scl);
      Scl3   : REAL := NVL(Scale3, SELF\IfcCartesianTransformationOperator.Scl);
    WHERE
      WR1 : Scl2 > 0.0;
      WR2 : Scl3 > 0.0;
  END_ENTITY;

  ENTITY IfcCartesianPoint
    SUBTYPE OF(IfcPoint);
      Coordinates : LIST [1:3] OF IfcLengthMeasure;
    DERIVE
      Dim         : IfcDimensionCount := HIINDEX(Coordinates);
    WHERE
      WR1 : HIINDEX(Coordinates) >= 2;
  END_ENTITY;

  ENTITY IfcPoint
    ABSTRACT SUPERTYPE OF (IfcCartesianPoint)
    SUBTYPE OF(IfcGeometricRepresentationItem);
  END_ENTITY;

  ENTITY IfcCompositeCurveSegment
    SUBTYPE OF(IfcGeometricRepresentationItem);
      Transition  : IfcTransitionCode;
      SameSense   : BOOLEAN;
      ParentCurve : IfcCurve;
    DERIVE
      Dim         : IfcDimensionCount := ParentCurve.Dim;
    INVERSE
      UsingCurves : SET [1:?] OF IfcCompositeCurve FOR Segments;
    WHERE
      WR1 : ('IFC2X_FINAL.IFCBOUNDEDCURVE' IN TYPEOF(ParentCurve));
  END_ENTITY;

  ENTITY IfcCurve
    ABSTRACT SUPERTYPE OF (ONEOF(IfcBoundedCurve, IfcConic, IfcLine, IfcOffsetCurve2D, IfcOffsetCurve3D))
    SUBTYPE OF(IfcGeometricRepresentationItem);
    DERIVE
      Dim : IfcDimensionCount := IfcCurveDim(SELF);
  END_ENTITY;

  ENTITY IfcBoundedCurve
    ABSTRACT SUPERTYPE OF (ONEOF(IfcCompositeCurve, IfcPolyline, IfcTrimmedCurve))
    SUBTYPE OF(IfcCurve);
  END_ENTITY;

  ENTITY IfcCompositeCurve
    SUPERTYPE OF (Ifc2DCompositeCurve)
    SUBTYPE OF(IfcBoundedCurve);
      Segments      : LIST [1:?] OF IfcCompositeCurveSegment;
      SelfIntersect : LOGICAL;
    DERIVE
      NSegments     : INTEGER := SIZEOF(Segments);
      ClosedCurve   : LOGICAL := Segments[NSegments].Transition <> Discontinuous;
    WHERE
      WR1 : ((NOT ClosedCurve) AND (SIZEOF(QUERY(Temp <* Segments | 
        Temp.Transition = Discontinuous)) = 1)) OR ((ClosedCurve) AND 
        (SIZEOF(QUERY(Temp <* Segments | Temp.Transition = Discontinuous)) = 0));
      WR2 : SIZEOF( QUERY( Temp <* Segments | Temp.Dim <> Segments[1].Dim)) = 0;
  END_ENTITY;

  ENTITY Ifc2DCompositeCurve
    SUBTYPE OF(IfcCompositeCurve);
    WHERE
      WR1 : SELF\IfcCompositeCurve.ClosedCurve;
      WR2 : SELF\IfcCurve.Dim = 2;
  END_ENTITY;

  ENTITY IfcPolyline
    SUBTYPE OF(IfcBoundedCurve);
      Points : LIST [2:?] OF IfcCartesianPoint;
    WHERE
      WR1 : SIZEOF(QUERY(Temp <* Points | Temp.Dim <> Points[1].Dim)) = 0;
  END_ENTITY;

  ENTITY IfcTrimmedCurve
    SUBTYPE OF(IfcBoundedCurve);
      BasisCurve           : IfcCurve;
      Trim1                : SET [1:2] OF IfcTrimmingSelect;
      Trim2                : SET [1:2] OF IfcTrimmingSelect;
      SenseAgreement       : BOOLEAN;
      MasterRepresentation : IfcTrimmingPreference;
    WHERE
      WR1 : (HIINDEX(Trim1) = 1) OR (TYPEOF(Trim1[1]) <> TYPEOF(Trim1[2]));
      WR2 : (HIINDEX(Trim2) = 1) OR (TYPEOF(Trim2[1]) <> TYPEOF(Trim2[2]));
      WR3 : NOT('IFC2X_FINAL.IFCBOUNDEDCURVE' IN TYPEOF(BasisCurve));
  END_ENTITY;

  ENTITY IfcConic
    ABSTRACT SUPERTYPE OF (ONEOF(IfcCircle, IfcEllipse))
    SUBTYPE OF(IfcCurve);
      Position : IfcAxis2Placement;
  END_ENTITY;

  ENTITY IfcCircle
    SUBTYPE OF(IfcConic);
      Radius : IfcPositiveLengthMeasure;
  END_ENTITY;

  ENTITY IfcEllipse
    SUBTYPE OF(IfcConic);
      SemiAxis1 : IfcPositiveLengthMeasure;
      SemiAxis2 : IfcPositiveLengthMeasure;
  END_ENTITY;

  ENTITY IfcLine
    SUBTYPE OF(IfcCurve);
      Pnt : IfcCartesianPoint;
      Dir : IfcVector;
    WHERE
      WR1 : Dir.Dim = Pnt.Dim;
  END_ENTITY;

  ENTITY IfcVector
    SUBTYPE OF(IfcGeometricRepresentationItem);
      Orientation : IfcDirection;
      Magnitude   : IfcLengthMeasure;
    DERIVE
      Dim         : IfcDimensionCount := Orientation.Dim;
    WHERE
      WR1 : Magnitude >= 0.0;
  END_ENTITY;

  ENTITY IfcOffsetCurve2D
    SUBTYPE OF(IfcCurve);
      BasisCurve    : IfcCurve;
      Distance      : IfcLengthMeasure;
      SelfIntersect : LOGICAL;
    WHERE
      WR1 : BasisCurve.Dim = 2;
  END_ENTITY;

  ENTITY IfcOffsetCurve3D
    SUBTYPE OF(IfcCurve);
      BasisCurve    : IfcCurve;
      Distance      : IfcLengthMeasure;
      SelfIntersect : LOGICAL;
      RefDirection  : IfcDirection;
    WHERE
      WR1 : BasisCurve.Dim = 3;
  END_ENTITY;

  ENTITY IfcSurface
    ABSTRACT SUPERTYPE OF (ONEOF(IfcElementarySurface, IfcSweptSurface, IfcBoundedSurface))
    SUBTYPE OF(IfcGeometricRepresentationItem);
  END_ENTITY;

  ENTITY IfcElementarySurface
    ABSTRACT SUPERTYPE OF (IfcPlane)
    SUBTYPE OF(IfcSurface);
      Position : IfcAxis2Placement3D;
    DERIVE
      Dim      : IfcDimensionCount := Position.Dim;
  END_ENTITY;

  ENTITY IfcPlane
    SUBTYPE OF(IfcElementarySurface);
  END_ENTITY;

  ENTITY IfcAxis2Placement3D
    SUBTYPE OF(IfcPlacement);
      Axis         : OPTIONAL IfcDirection;
      RefDirection : OPTIONAL IfcDirection;
    DERIVE
      P            : LIST [3:3] OF IfcDirection := IfcBuildAxes(Axis, RefDirection);
    WHERE
      WR1 : SELF\IfcPlacement.Location.Dim = 3;
      WR2 : (NOT (EXISTS (Axis))) OR (Axis.Dim = 3);
      WR3 : (NOT (EXISTS (RefDirection))) OR (RefDirection.Dim = 3);
      WR4 : (NOT (EXISTS (Axis))) OR (NOT (EXISTS (RefDirection))) OR (IfcCrossProduct(Axis,RefDirection).Magnitude > 0.0);
      WR5 : NOT ((EXISTS (Axis)) XOR (EXISTS (RefDirection)));
  END_ENTITY;

  ENTITY IfcSweptSurface
    ABSTRACT SUPERTYPE OF (ONEOF(IfcSurfaceOfRevolution, IfcSurfaceOfLinearExtrusion))
    SUBTYPE OF(IfcSurface);
      SweptCurve : IfcProfileDef;
      Position   : IfcAxis2Placement3D;
    DERIVE
      Dim        : IfcDimensionCount := Position.Dim;
    WHERE
      WR1 : NOT('IFC2X_FINAL.IFCDERIVEDPROFILEDEF' IN TYPEOF(SweptCurve));
      WR2 : SweptCurve.ProfileType = IfcProfileTypeEnum.Curve;
  END_ENTITY;

  ENTITY IfcSurfaceOfRevolution
    SUBTYPE OF(IfcSweptSurface);
      AxisPosition : IfcAxis1Placement;
    DERIVE
      AxisLine     : IfcLine := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcCurve() || IfcLine(AxisPosition.Location, 
                       IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector(AxisPosition.Z,1.0));
  END_ENTITY;

  ENTITY IfcAxis1Placement
    SUBTYPE OF(IfcPlacement);
      Axis : OPTIONAL IfcDirection;
    DERIVE
      Z    : IfcDirection := NVL (IfcNormalise(Axis), 
             IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([0.0,0.0,1.0]));
    WHERE
      WR1 : (NOT (EXISTS (Axis))) OR (Axis.Dim = 3);
      WR2 : SELF\IfcPlacement.Location.Dim = 3;
  END_ENTITY;

  ENTITY IfcSurfaceOfLinearExtrusion
    SUBTYPE OF(IfcSweptSurface);
      ExtrudedDirection : IfcDirection;
      Depth             : IfcLengthMeasure;
    DERIVE
      ExtrusionAxis     : IfcVector := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector (ExtrudedDirection, Depth);
    WHERE
      WR41 : Depth > 0;
  END_ENTITY;

  ENTITY IfcBoundedSurface
    SUPERTYPE OF (ONEOF(IfcCurveBoundedPlane, IfcRectangularTrimmedSurface))
    SUBTYPE OF(IfcSurface);
  END_ENTITY;

  ENTITY IfcCurveBoundedPlane
    SUBTYPE OF(IfcBoundedSurface);
      BasisSurface    : IfcPlane;
      OuterBoundary   : Ifc2DCompositeCurve;
      InnerBoundaries : SET OF Ifc2DCompositeCurve;
    DERIVE
      Dim             : IfcDimensionCount := BasisSurface.Dim;
  END_ENTITY;

  ENTITY IfcRectangularTrimmedSurface
    SUBTYPE OF(IfcBoundedSurface);
      BasisSurface : IfcSurface;
      U1           : IfcParameterValue;
      V1           : IfcParameterValue;
      U2           : IfcParameterValue;
      V2           : IfcParameterValue;
      Usense       : BOOLEAN;
      Vsense       : BOOLEAN;
    WHERE
      WR1 : U1 <> U2;
      WR2 : V1 <> V2;
      WR3 : (('IFC2X_FINAL.IFCELEMENTARYSURFACE' IN TYPEOF(BasisSurface)) AND
             (NOT ('IFC2X_FINAL.IFCPLANE' IN TYPEOF(BasisSurface)))) OR
             ('IFC2X_FINAL.IFCSURFACEOFREVOLUTION' IN TYPEOF(BasisSurface)) OR
             (Usense = (U2 > U1));
      WR4 : Vsense = (V2 > V1);
  END_ENTITY;

  FUNCTION IfcBuild2Axes
    (RefDirection : IfcDirection)
      : LIST [2:2] OF IfcDirection;
  LOCAL
    D : IfcDirection := NVL(IfcNormalise(RefDirection),
        IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([1.0,0.0]));
  END_LOCAL;
    RETURN([D, IfcOrthogonalComplement(D)]);
  END_FUNCTION;

  FUNCTION IfcBuildAxes
    (Axis, RefDirection : IfcDirection) 
      : LIST [3:3] OF IfcDirection;
  LOCAL
    D1, D2 : IfcDirection;
  END_LOCAL;
    D1 := NVL(IfcNormalise(Axis), IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([0.0,0.0,1.0]));
    D2 := IfcFirstProjAxis(D1, RefDirection);
    RETURN ([D2, IfcNormalise(IfcCrossProduct(D1,D2)).Orientation, D1]);
  END_FUNCTION;

  FUNCTION IfcCrossProduct
    (Arg1, Arg2 : IfcDirection) 
      : IfcVector;
  LOCAL
    Mag : REAL;
    Res : IfcDirection;
    V1,V2  : LIST[3:3] OF REAL;
    Result : IfcVector;
  END_LOCAL;
  
    IF (NOT EXISTS (Arg1) OR (Arg1.Dim = 2)) OR (NOT EXISTS (Arg2) OR (Arg2.Dim = 2)) THEN
      RETURN(?);
    ELSE
      BEGIN
        V1  := IfcNormalise(Arg1).DirectionRatios;
        V2  := IfcNormalise(Arg2).DirectionRatios;
        Res := IfcRepresentationItem() || IfcGeometricRepresentationItem () 
               || IfcDirection([(V1[2]*V2[3] - V1[3]*V2[2]), (V1[3]*V2[1] - V1[1]*V2[3]), (V1[1]*V2[2] - V1[2]*V2[1])]);
        Mag := 0.0;
        REPEAT i := 1 TO 3;
          Mag := Mag + Res.DirectionRatios[i]*Res.DirectionRatios[i];
        END_REPEAT;
        IF (Mag > 0.0) THEN
          Result := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector(Res, SQRT(Mag));
        ELSE
          Result := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector(Arg1, 0.0);
        END_IF;
        RETURN(Result);
      END;
    END_IF;
  END_FUNCTION;

  FUNCTION IfcCurveDim
  (Curve : IfcCurve)
           : IfcDimensionCount;
  LOCAL
    TempDim  : IfcDimensionCount := 3;
  END_LOCAL;
    IF ('IFC2X_FINAL.IFCLINE' IN TYPEOF(Curve))
      THEN TempDim := Curve.Pnt.Dim;
      ELSE
      IF ('IFC2X_FINAL.IFCCONIC' IN TYPEOF(Curve))
        THEN TempDim := Curve.Position.Dim;
        ELSE
        IF ('IFC2X_FINAL.IFCPOLYLINE' IN TYPEOF(Curve))
          THEN TempDim := Curve.Points[1].Dim;
          ELSE
          IF ('IFC2X_FINAL.IFCTRIMMEDCURVE' IN TYPEOF(Curve))
            THEN TempDim := IfcCurveDim(Curve.BasisCurve);
            ELSE
            IF ('IFC2X_FINAL.IFCCOMPOSITECURVE' IN TYPEOF(Curve))
              THEN TempDim := Curve.Segments[1].Dim;
              ELSE
              IF ('IFC2X_FINAL.IFCOFFSETCURVE2D' IN TYPEOF(Curve))
                THEN TempDim := 2; 
                ELSE
                IF ('IFC2X_FINAL.IFCOFFSETCURVE3D' IN TYPEOF(Curve))
                  THEN TempDim := 3;
                  ELSE TempDim := ?;
                END_IF;
              END_IF;
            END_IF;
          END_IF;
        END_IF;
      END_IF;
    END_IF;
  RETURN (TempDim);
  END_FUNCTION;

  FUNCTION IfcDotProduct
    (Arg1, Arg2 : IfcDirection) 
      : REAL;
  LOCAL
    Scalar : REAL;
    Vec1, Vec2 : IfcDirection;
    Ndim   : INTEGER;
  END_LOCAL;
  
    IF NOT EXISTS (Arg1) OR NOT EXISTS (Arg2) THEN
      Scalar := ?;
    ELSE
      IF (Arg1.Dim <> Arg2.Dim) THEN
        Scalar := ?;
      ELSE
        BEGIN
          Vec1 := IfcNormalise(Arg1);
          Vec2 := IfcNormalise(Arg2);
          Ndim := Arg1.Dim;
          Scalar := 0.0;
          REPEAT i := 1 TO Ndim;
            Scalar := Scalar + Vec1.DirectionRatios[i]*Vec2.DirectionRatios[i];
          END_REPEAT;
        END;
      END_IF;
    END_IF;
    RETURN (Scalar);
  END_FUNCTION;

  FUNCTION IfcFirstProjAxis
    (ZAxis, Arg : IfcDirection) : IfcDirection;
  LOCAL
    XAxis : IfcDirection;
    V     : IfcDirection;
    Z     : IfcDirection;
    XVec  : IfcVector;
  END_LOCAL;
  
    IF (NOT EXISTS(ZAxis)) THEN
      RETURN (?) ;
    ELSE
      Z := IfcNormalise(ZAxis);
      IF NOT EXISTS(Arg) THEN
        IF (Z.DirectionRatios <> [1.0,0.0,0.0]) THEN
          V := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([1.0,0.0,0.0]);
        ELSE
          V := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([0.0,1.0,0.0]);
        END_IF;
      ELSE
        IF (Arg.Dim <> 3) THEN
          RETURN (?) ;
        END_IF;
        IF ((IfcCrossProduct(Arg,Z).Magnitude) = 0.0) THEN
          RETURN (?);
        ELSE
          V := IfcNormalise(Arg);
        END_IF;
      END_IF;
      XVec  := IfcScalarTimesVector(IfcDotProduct(V, Z), Z);
      XAxis := IfcVectorDifference(V, XVec).Orientation;
      XAxis := IfcNormalise(XAxis);
    END_IF;
    RETURN(XAxis);
  END_FUNCTION;

  FUNCTION IfcNormalise
    (Arg : IfcVectorOrDirection) 
      : IfcVectorOrDirection;
  LOCAL
    Ndim : INTEGER;
    V    : IfcDirection
         := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([1.,0.]); 
    Vec  : IfcVector 
         := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector (
              IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([1.,0.]), 1.);
    Mag  : REAL;
    Result : IfcVectorOrDirection
           := V;
  END_LOCAL;
  
    IF NOT EXISTS (Arg) THEN
      RETURN (?);
    ELSE
      Ndim := Arg.Dim;
      IF 'IFC2X_FINAL.IFCVECTOR' IN TYPEOF(Arg) THEN
        BEGIN
          Vec := Arg;
          V := Arg.Orientation;
          IF Arg.Magnitude = 0.0 THEN
            RETURN(?);
          ELSE
            Vec.Magnitude := 1.0;
          END_IF;
        END;
      ELSE
        V := Arg;
      END_IF;
      Mag := 0.0;
        REPEAT i := 1 TO Ndim;
          Mag := Mag + V.DirectionRatios[i]*V.DirectionRatios[i];
        END_REPEAT;
      IF Mag > 0.0 THEN
        Mag := SQRT(Mag);
        REPEAT i := 1 TO Ndim;
          V.DirectionRatios[i] := V.DirectionRatios[i]/Mag;
        END_REPEAT;
        IF 'IFC2X_FINAL.IFCVECTOR' IN TYPEOF(arg) THEN
          Vec.Orientation := V;
          Result := Vec;
        ELSE
          Result := V;
        END_IF;
      ELSE
        RETURN(?);
      END_IF;
    END_IF;
    RETURN (Result);
  END_FUNCTION;

  FUNCTION IfcOrthogonalComplement
    (Vec : IfcDirection) 
      : IfcDirection;
  LOCAL
    Result : IfcDirection ;
  END_LOCAL;
    IF NOT EXISTS (Vec) OR (Vec.Dim <> 2) THEN
      RETURN(?);
    ELSE
      Result := IfcRepresentationItem() || IfcGeometricRepresentationItem() || IfcDirection([-Vec.DirectionRatios[2], Vec.DirectionRatios[1]]);
      RETURN(Result);
    END_IF;
  END_FUNCTION;

  FUNCTION IfcScalarTimesVector
    (Scalar : REAL; Vec : IfcVectorOrDirection)
      : IfcVector;
  LOCAL
    V : IfcDirection;
    Mag : REAL;
    Result : IfcVector;
  END_LOCAL;
  
    IF NOT EXISTS (Scalar) OR NOT EXISTS (Vec) THEN
      RETURN (?) ;
    ELSE
      IF 'IFC2X_FINAL.IFCVECTOR' IN TYPEOF (Vec) THEN
        V := Vec.Orientation;
        Mag := Scalar * Vec.Magnitude;
      ELSE
        V := Vec;
        Mag := Scalar;
      END_IF;
      IF (Mag < 0.0 ) THEN
        REPEAT i := 1 TO SIZEOF(V.DirectionRatios);
          V.DirectionRatios[i] := -V.DirectionRatios[i];
        END_REPEAT;
        Mag := -Mag;
      END_IF;
      Result := IfcRepresentationItem() || IfcGeometricRepresentationItem() || IfcVector(IfcNormalise(V), Mag);
    END_IF;
    RETURN (Result);
  END_FUNCTION;

  FUNCTION IfcVectorDifference
    (Arg1, Arg2 : IfcVectorOrDirection)
      : IfcVector;
  LOCAL
    Result : IfcVector;
    Res, Vec1, Vec2 : IfcDirection;
    Mag, Mag1, Mag2 : REAL;
    Ndim : INTEGER;
  END_LOCAL;
  
    IF ((NOT EXISTS (Arg1)) OR (NOT EXISTS (Arg2))) OR (Arg1.Dim <> Arg2.Dim) THEN
      RETURN (?) ;
    ELSE
      BEGIN
        IF 'IFC2X_FINAL.IFCVECTOR' IN TYPEOF(Arg1) THEN
          Mag1 := Arg1.Magnitude;
          Vec1 := Arg1.Orientation;
        ELSE
          Mag1 := 1.0;
          Vec1 := Arg1;
        END_IF;
        IF 'IFC2X_FINAL.IFCVECTOR' IN TYPEOF(Arg2) THEN
          Mag2 := Arg2.Magnitude;
          Vec2 := Arg2.Orientation;
        ELSE
          Mag2 := 1.0;
          Vec2 := Arg2;
        END_IF;
        Vec1 := IfcNormalise (Vec1);
        Vec2 := IfcNormalise (Vec2);
        Ndim := SIZEOF(Vec1.DirectionRatios);
        Mag  := 0.0;
        IF (Ndim = 2) THEN
          Res := IfcRepresentationItem() || IfcGeometricRepresentationItem() || IfcDirection([0.,0.]);
        ELSE
          Res := IfcRepresentationItem() || IfcGeometricRepresentationItem() || IfcDirection([0.,0.,0.]);
        END_IF;
        REPEAT i := 1 TO Ndim;
          Res.DirectionRatios[i] := Mag1*Vec1.DirectionRatios[i] + Mag2*Vec2.DirectionRatios[i];
          Mag := Mag + (Res.DirectionRatios[i]*Res.DirectionRatios[i]);
        END_REPEAT;
        IF (Mag > 0.0 ) THEN
          Result := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector( Res, SQRT(Mag));
        ELSE
          Result := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector( Vec1, 0.0);
        END_IF;
      END;
    END_IF;
    RETURN (Result);
  END_FUNCTION;

  FUNCTION IfcVectorSum
    (Arg1, Arg2 : IfcVectorOrDirection) 
      : IfcVector;
  LOCAL
    Result : IfcVector;
    Res, Vec1, Vec2 : IfcDirection;
    Mag, Mag1, Mag2 : REAL;
    Ndim : INTEGER;
  END_LOCAL;
  
    IF ((NOT EXISTS (Arg1)) OR (NOT EXISTS (Arg2))) OR (Arg1.Dim <> Arg2.Dim) THEN
      RETURN (?) ;
    ELSE
      BEGIN
        IF 'IFC2X_FINAL.IFCVECTOR' IN TYPEOF(Arg1) THEN
          Mag1 := Arg1.Magnitude;
          Vec1 := Arg1.Orientation;
        ELSE
          Mag1 := 1.0;
          Vec1 := Arg1;
        END_IF;
        IF 'IFC2X_FINAL.IFCVECTOR' IN TYPEOF(Arg2) THEN
          Mag2 := Arg2.Magnitude;
          Vec2 := Arg2.Orientation;
        ELSE
          Mag2 := 1.0;
          Vec2 := Arg2;
        END_IF;
        Vec1 := IfcNormalise (Vec1);
        Vec2 := IfcNormalise (Vec2);
        Ndim := SIZEOF(Vec1.DirectionRatios);
        Mag  := 0.0;
        Res  := IfcRepresentationItem() || IfcGeometricRepresentationItem() || IfcDirection([]);
        REPEAT i := 1 TO Ndim;
          Res.DirectionRatios[i] := Mag1*Vec1.DirectionRatios[i] +
                                       Mag2*Vec2.DirectionRatios[i];
          Mag := Mag + (Res.DirectionRatios[i]*Res.DirectionRatios[i]);
        END_REPEAT;
        IF (Mag > 0.0 ) THEN
          Result := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector( Res, SQRT(Mag));
        ELSE
          Result := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcVector( Vec1, 0.0);
        END_IF;
      END;
    END_IF;
    RETURN (Result);
  END_FUNCTION;

  FUNCTION IfcBaseAxis
    (Dim : INTEGER; 
     Axis1, Axis2, Axis3 : IfcDirection) 
      : LIST [2:3] OF IfcDirection;
  
  LOCAL
    U : LIST [2:3] OF IfcDirection;
    Factor : REAL;
    D1, D2 : IfcDirection;
  END_LOCAL;
  
    IF (Dim = 3) THEN 
      D1 := NVL(IfcNormalise(Axis3), IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([0.0,0.0,1.0]));
      D2 := IfcFirstProjAxis(D1, Axis1);
      U  := [D2, IfcSecondProjAxis(D1, D2, Axis2), D1];
    ELSE
      IF EXISTS(Axis1) THEN
        D1 := IfcNormalise(Axis1);
        U  := [D1, IfcOrthogonalComplement(D1)];
        IF EXISTS(Axis2) THEN
          Factor := IfcDotProduct(Axis2, U[2]);
          IF (Factor < 0.0) THEN
            U[2].DirectionRatios[1] := -U[2].DirectionRatios[1];
            U[2].DirectionRatios[2] := -U[2].DirectionRatios[2];
          END_IF;
        END_IF;
      ELSE
        IF EXISTS(Axis2) THEN
          D1 := IfcNormalise(Axis2);
          U  := [IfcOrthogonalComplement(D1), D1];
          U[1].DirectionRatios[1] := -U[1].DirectionRatios[1];
          U[1].DirectionRatios[2] := -U[1].DirectionRatios[2];
          ELSE
            U := [IfcRepresentationItem() || IfcGeometricRepresentationItem() || IfcDirection([1.0, 0.0]), 
                  IfcRepresentationItem() || IfcGeometricRepresentationItem() || IfcDirection([0.0, 1.0])];
        END_IF;
      END_IF;
    END_IF;
    RETURN(U);
  END_FUNCTION;

  FUNCTION IfcSecondProjAxis
    (ZAxis, XAxis, Arg: IfcDirection) 
      : IfcDirection;
  LOCAL
    YAxis : IfcVector;
    V     : IfcDirection;
    Temp  : IfcVector;
  END_LOCAL;
  
    IF NOT EXISTS(Arg) THEN
      V := IfcRepresentationItem() || IfcGeometricRepresentationItem () || IfcDirection([0.0,1.0,0.0]);
    ELSE
      V := Arg;
    END_IF;
    Temp  := IfcScalarTimesVector(IfcDotProduct(V, ZAxis), ZAxis);
    YAxis := IfcVectorDifference(V, Temp);
    Temp  := IfcScalarTimesVector(IfcDotProduct(V, XAxis), XAxis);
    YAxis := IfcVectorDifference(YAxis, Temp);
    YAxis := IfcNormalise(YAxis);
    RETURN(YAxis.Orientation);
  END_FUNCTION;

-- END_SCHEMA;
-- SCHEMA IFCMATERIALRESOURCE;

  TYPE IfcLayerSetDirectionEnum = ENUMERATION OF
    (AXIS1,
     AXIS2,
     AXIS3);
  END_TYPE;

  TYPE IfcDirectionSenseEnum = ENUMERATION OF
    (POSITIVE,
     NEGATIVE);
  END_TYPE;

  TYPE IfcMaterialSelect = SELECT
    (IfcMaterial,
     IfcMaterialList,
     IfcMaterialLayerSetUsage);
  END_TYPE;

  ENTITY IfcMaterial;
      Name         : IfcLabel;
    INVERSE
      ClassifiedAs : SET [0:1] OF IfcMaterialClassificationRelationship FOR ClassifiedMaterial;
  END_ENTITY;

  ENTITY IfcMaterialClassificationRelationship;
      MaterialClassifications : SET [1:?] OF IfcClassificationNotationSelect;
      ClassifiedMaterial      : IfcMaterial;
  END_ENTITY;

  ENTITY IfcMaterialLayer;
      Material           : OPTIONAL IfcMaterial;
      LayerThickness     : IfcPositiveLengthMeasure;
      IsVentilated       : OPTIONAL IfcBoolean;
    INVERSE
      ToMaterialLayerSet : IfcMaterialLayerSet FOR MaterialLayers;
  END_ENTITY;

  ENTITY IfcMaterialLayerSet;
      MaterialLayers : LIST [1:?] OF IfcMaterialLayer;
      LayerSetName   : OPTIONAL IfcLabel;
    DERIVE
      TotalThickness : IfcLengthMeasure := IfcMlsTotalThickness(SELF);
  END_ENTITY;

  ENTITY IfcMaterialLayerSetUsage;
      ForLayerSet             : IfcMaterialLayerSet;
      LayerSetDirection       : IfcLayerSetDirectionEnum;
      DirectionSense          : IfcDirectionSenseEnum;
      OffsetFromReferenceLine : IfcLengthMeasure;
  END_ENTITY;

  ENTITY IfcMaterialList;
      Materials : LIST [1:?] OF IfcMaterial;
  END_ENTITY;

  FUNCTION IfcMlsTotalThickness
  (LayerSet : IfcMaterialLayerSet) : IfcLengthMeasure;
    LOCAL
      Max : IfcLengthMeasure := LayerSet.MaterialLayers[1].LayerThickness;    
    END_LOCAL;
  
    IF SIZEOF(LayerSet.MaterialLayers) > 1 THEN
      REPEAT i := 2 TO HIINDEX(LayerSet.MaterialLayers);
         Max := Max + LayerSet.MaterialLayers[i].LayerThickness;
      END_REPEAT;
    END_IF;
    RETURN (Max);
  END_FUNCTION;

-- END_SCHEMA;
-- SCHEMA IFCMEASURERESOURCE;

  TYPE IfcAmountOfSubstanceMeasure = REAL;
  END_TYPE;

  TYPE IfcAngularVelocityMeasure = REAL;
  END_TYPE;

  TYPE IfcAreaMeasure = REAL;
  END_TYPE;

  TYPE IfcBoolean = BOOLEAN;
  END_TYPE;

  TYPE IfcCompoundPlaneAngleMeasure = LIST [3:3] OF INTEGER;
    WHERE
      WR1 : { 0 <= SELF[1] < 360 };
      WR2 : { 0 <= SELF[2] < 60 };
      WR3 : { 0 <= SELF[3] < 60 };
  END_TYPE;

  TYPE IfcContextDependentMeasure = REAL;
  END_TYPE;

  TYPE IfcCountMeasure = NUMBER;
  END_TYPE;

  TYPE IfcDescriptiveMeasure = STRING;
  END_TYPE;

  TYPE IfcDynamicViscosityMeasure = REAL;
  END_TYPE;

  TYPE IfcElectricCurrentMeasure = REAL;
  END_TYPE;

  TYPE IfcElectricVoltageMeasure = REAL;
  END_TYPE;

  TYPE IfcEnergyMeasure = REAL;
  END_TYPE;

  TYPE IfcFrequencyMeasure = REAL;
  END_TYPE;

  TYPE IfcHeatFluxDensityMeasure = REAL;
  END_TYPE;

  TYPE IfcInteger = INTEGER;
  END_TYPE;

  TYPE IfcIntegerCountRateMeasure = INTEGER;
  END_TYPE;

  TYPE IfcKinematicViscosityMeasure = REAL;
  END_TYPE;

  TYPE IfcLengthMeasure = REAL;
  END_TYPE;

  TYPE IfcLinearVelocityMeasure = REAL;
  END_TYPE;

  TYPE IfcLuminousIntensityMeasure = REAL;
  END_TYPE;

  TYPE IfcMassDensityMeasure = REAL;
  END_TYPE;

  TYPE IfcMassFlowRateMeasure = REAL;
  END_TYPE;

  TYPE IfcMassMeasure = REAL;
  END_TYPE;

  TYPE IfcMonetaryMeasure = REAL;
  END_TYPE;

  TYPE IfcNumericMeasure = NUMBER;
  END_TYPE;

  TYPE IfcParameterValue = REAL;
  END_TYPE;

  TYPE IfcPlaneAngleMeasure = REAL;
  END_TYPE;

  TYPE IfcPositiveLengthMeasure = IfcLengthMeasure;
    WHERE
      WR1 : SELF > 0;
  END_TYPE;

  TYPE IfcPositivePlaneAngleMeasure = IfcPlaneAngleMeasure;
    WHERE
      WR1 : SELF > 0;
  END_TYPE;

  TYPE IfcPositiveRatioMeasure = IfcRatioMeasure;
    WHERE
      WR1 : SELF > 0;
  END_TYPE;

  TYPE IfcRatioMeasure = REAL;
  END_TYPE;

  TYPE IfcPowerMeasure = REAL;
  END_TYPE;

  TYPE IfcPressureMeasure = REAL;
  END_TYPE;

  TYPE IfcReal = REAL;
  END_TYPE;

  TYPE IfcSolidAngleMeasure = REAL;
  END_TYPE;

  TYPE IfcIdentifier = STRING;
  END_TYPE;

  TYPE IfcThermalAdmittanceMeasure = REAL;
  END_TYPE;

  TYPE IfcThermalResistanceMeasure = REAL;
  END_TYPE;

  TYPE IfcThermalTransmittanceMeasure = REAL;
  END_TYPE;

  TYPE IfcThermodynamicTemperatureMeasure = REAL;
  END_TYPE;

  TYPE IfcTimeMeasure = REAL;
  END_TYPE;

  TYPE IfcTimeStamp = INTEGER;
  END_TYPE;

  TYPE IfcVolumeMeasure = REAL;
  END_TYPE;

  TYPE IfcVolumetricFlowRateMeasure = REAL;
  END_TYPE;

  TYPE IfcUnit = SELECT
    (IfcDerivedUnit,
     IfcNamedUnit,
     IfcMonetaryUnit);
  END_TYPE;

  TYPE IfcLabel = STRING;
  END_TYPE;

  TYPE IfcValue = SELECT
    (IfcMeasureValue,
     IfcSimpleValue,
     IfcDerivedMeasureValue);
  END_TYPE;

  TYPE IfcMeasureValue = SELECT
    (IfcVolumeMeasure,
     IfcTimeMeasure,
     IfcThermodynamicTemperatureMeasure,
     IfcSolidAngleMeasure,
     IfcPositiveRatioMeasure,
     IfcRatioMeasure,
     IfcPositivePlaneAngleMeasure,
     IfcPlaneAngleMeasure,
     IfcParameterValue,
     IfcNumericMeasure,
     IfcMassMeasure,
     IfcPositiveLengthMeasure,
     IfcLengthMeasure,
     IfcElectricCurrentMeasure,
     IfcDescriptiveMeasure,
     IfcCountMeasure,
     IfcContextDependentMeasure,
     IfcAreaMeasure,
     IfcAmountOfSubstanceMeasure,
     IfcLuminousIntensityMeasure,
     IfcNormalisedRatioMeasure);
  END_TYPE;

  TYPE IfcNormalisedRatioMeasure = IfcRatioMeasure;
    WHERE
      WR1 : {0.0 <= SELF <= 1.0};
  END_TYPE;

  TYPE IfcSimpleValue = SELECT
    (IfcInteger,
     IfcReal,
     IfcBoolean,
     IfcIdentifier,
     IfcText,
     IfcLabel,
     IfcLogical);
  END_TYPE;

  TYPE IfcText = STRING;
  END_TYPE;

  TYPE IfcLogical = LOGICAL;
  END_TYPE;

  TYPE IfcDerivedMeasureValue = SELECT
    (IfcVolumetricFlowRateMeasure,
     IfcTimeStamp,
     IfcThermalTransmittanceMeasure,
     IfcThermalResistanceMeasure,
     IfcThermalAdmittanceMeasure,
     IfcPressureMeasure,
     IfcPowerMeasure,
     IfcMassFlowRateMeasure,
     IfcMassDensityMeasure,
     IfcLinearVelocityMeasure,
     IfcKinematicViscosityMeasure,
     IfcIntegerCountRateMeasure,
     IfcHeatFluxDensityMeasure,
     IfcFrequencyMeasure,
     IfcEnergyMeasure,
     IfcElectricVoltageMeasure,
     IfcDynamicViscosityMeasure,
     IfcCompoundPlaneAngleMeasure,
     IfcAngularVelocityMeasure,
     IfcThermalConductivityMeasure,
     IfcMolecularWeightMeasure,
     IfcVaporPermeabilityMeasure,
     IfcMoistureDiffusivityMeasure,
     IfcIsothermalMoistureCapacityMeasure,
     IfcSpecificHeatCapacityMeasure,
     IfcMonetaryMeasure,
     IfcMagneticFluxDensityMeasure,
     IfcMagneticFluxMeasure,
     IfcLuminousFluxMeasure,
     IfcForceMeasure,
     IfcInductanceMeasure,
     IfcIlluminanceMeasure,
     IfcElectricResistanceMeasure,
     IfcElectricConductanceMeasure,
     IfcElectricChargeMeasure,
     IfcDoseEquivalentMeasure,
     IfcElectricCapacitanceMeasure,
     IfcAbsorbedDoseMeasure,
     IfcRadioActivityMeasure,
     IfcRotationalFrequencyMeasure,
     IfcTorqueMeasure,
     IfcAccelerationMeasure,
     IfcLinearForceMeasure,
     IfcLinearStiffnessMeasure,
     IfcModulusOfSubgradeReactionMeasure,
     IfcModulusOfElasticityMeasure,
     IfcMomentOfInertiaMeasure,
     IfcPlanarForceMeasure,
     IfcRotationalStiffnessMeasure,
     IfcShearModulusMeasure,
     IfcLinearMomentMeasure);
  END_TYPE;

  TYPE IfcThermalConductivityMeasure = REAL;
  END_TYPE;

  TYPE IfcMolecularWeightMeasure = REAL;
  END_TYPE;

  TYPE IfcVaporPermeabilityMeasure = REAL;
  END_TYPE;

  TYPE IfcMoistureDiffusivityMeasure = REAL;
  END_TYPE;

  TYPE IfcIsothermalMoistureCapacityMeasure = REAL;
  END_TYPE;

  TYPE IfcSpecificHeatCapacityMeasure = REAL;
  END_TYPE;

  TYPE IfcMagneticFluxDensityMeasure = REAL;
  END_TYPE;

  TYPE IfcMagneticFluxMeasure = REAL;
  END_TYPE;

  TYPE IfcLuminousFluxMeasure = REAL;
  END_TYPE;

  TYPE IfcForceMeasure = REAL;
  END_TYPE;

  TYPE IfcInductanceMeasure = REAL;
  END_TYPE;

  TYPE IfcIlluminanceMeasure = REAL;
  END_TYPE;

  TYPE IfcElectricResistanceMeasure = REAL;
  END_TYPE;

  TYPE IfcElectricConductanceMeasure = REAL;
  END_TYPE;

  TYPE IfcElectricChargeMeasure = REAL;
  END_TYPE;

  TYPE IfcDoseEquivalentMeasure = REAL;
  END_TYPE;

  TYPE IfcElectricCapacitanceMeasure = REAL;
  END_TYPE;

  TYPE IfcAbsorbedDoseMeasure = REAL;
  END_TYPE;

  TYPE IfcRadioActivityMeasure = REAL;
  END_TYPE;

  TYPE IfcRotationalFrequencyMeasure = REAL;
  END_TYPE;

  TYPE IfcTorqueMeasure = REAL;
  END_TYPE;

  TYPE IfcAccelerationMeasure = REAL;
  END_TYPE;

  TYPE IfcLinearForceMeasure = REAL;
  END_TYPE;

  TYPE IfcLinearStiffnessMeasure = REAL;
  END_TYPE;

  TYPE IfcModulusOfSubgradeReactionMeasure = REAL;
  END_TYPE;

  TYPE IfcModulusOfElasticityMeasure = REAL;
  END_TYPE;

  TYPE IfcMomentOfInertiaMeasure = REAL;
  END_TYPE;

  TYPE IfcPlanarForceMeasure = REAL;
  END_TYPE;

  TYPE IfcRotationalStiffnessMeasure = REAL;
  END_TYPE;

  TYPE IfcShearModulusMeasure = REAL;
  END_TYPE;

  TYPE IfcLinearMomentMeasure = REAL;
  END_TYPE;

  TYPE IfcSIPrefix = ENUMERATION OF
    (EXA,
     PETA,
     TERA,
     GIGA,
     MEGA,
     KILO,
     HECTO,
     DECA,
     DECI,
     CENTI,
     MILLI,
     MICRO,
     NANO,
     PICO,
     FEMTO,
     ATTO);
  END_TYPE;

  TYPE IfcSIUnitName = ENUMERATION OF
    (AMPERE,
     BECQUEREL,
     CANDELA,
     COULOMB,
     CUBIC_METRE,
     DEGREE_CELSIUS,
     FARAD,
     GRAM,
     GRAY,
     HENRY,
     HERTZ,
     JOULE,
     KELVIN,
     LUMEN,
     LUX,
     METRE,
     MOLE,
     NEWTON,
     OHM,
     PASCAL,
     RADIAN,
     SECOND,
     SIEMENS,
     SIEVERT,
     SQUARE_METRE,
     STERADIAN,
     TESLA,
     VOLT,
     WATT,
     WEBER);
  END_TYPE;

  TYPE IfcUnitEnum = ENUMERATION OF
    (ABSORBEDDOSEUNIT,
     AMOUNTOFSUBSTANCEUNIT,
     AREAUNIT,
     DOSEEQUIVALENTUNIT,
     ELECTRICCAPACITANCEUNIT,
     ELECTRICCHARGEUNIT,
     ELECTRICCONDUCTANCEUNIT,
     ELECTRICCURRENTUNIT,
     ELECTRICRESISTANCEUNIT,
     ELECTRICVOLTAGEUNIT,
     ENERGYUNIT,
     FORCEUNIT,
     FREQUENCYUNIT,
     ILLUMINANCEUNIT,
     INDUCTANCEUNIT,
     LENGTHUNIT,
     LUMINOUSFLUXUNIT,
     LUMINOUSINTENSITYUNIT,
     MAGNETICFLUXDENSITYUNIT,
     MAGNETICFLUXUNIT,
     MASSUNIT,
     PLANEANGLEUNIT,
     POWERUNIT,
     PRESSUREUNIT,
     RADIOACTIVITYUNIT,
     SOLIDANGLEUNIT,
     THERMODYNAMICTEMPERATUREUNIT,
     TIMEUNIT,
     VOLUMEUNIT,
     USERDEFINED);
  END_TYPE;

  TYPE IfcDerivedUnitEnum = ENUMERATION OF
    (ANGULARVELOCITYUNIT,
     COMPOUNDPLANEANGLEUNIT,
     DYNAMICVISCOSITYUNIT,
     HEATFLUXDENSITYUNIT,
     INTEGERCOUNTRATEUNIT,
     ISOTHERMALMOISTURECAPACITYUNIT,
     KINEMATICVISCOSITYUNIT,
     LINEARVELOCITYUNIT,
     MASSDENSITYUNIT,
     MASSFLOWRATEUNIT,
     MOISTUREDIFFUSIVITYUNIT,
     MOLECULARWEIGHTUNIT,
     SPECIFICHEATCAPACITYUNIT,
     THERMALADMITTANCEUNIT,
     THERMALCONDUCTANCEUNIT,
     THERMALRESISTANCEUNIT,
     THERMALTRANSMITTANCEUNIT,
     VAPORPERMEABILITYUNIT,
     VOLUMETRICFLOWRATEUNIT,
     ROTATIONALFREQUENCYUNIT,
     TORQUEUNIT,
     MOMENTORINERTIAUNIT,
     LINEARMOMENTUNIT,
     LINEARFORCEUNIT,
     PLANARFORCEUNIT,
     MODULUSOFELASTICITYUNIT,
     SHEARMODULUSUNIT,
     LINEARSTIFFNESSUNIT,
     ROTATIONALSTIFFNESSUNIT,
     MODULUSOFSUBGRADEREACTIONUNIT,
     ACCELERATIONUNIT,
     USERDEFINED);
  END_TYPE;

  TYPE IfcCurrencyEnum = ENUMERATION OF
    (AED,
     AES,
     ATS,
     AUD,
     BBD,
     BEG,
     BGL,
     BHD,
     BMD,
     BND,
     BRL,
     BSD,
     BWP,
     BZD,
     CAD,
     CBD,
     CHF,
     CLP,
     CNY,
     CYS,
     CZK,
     DDP,
     DEM,
     DKK,
     EGL,
     EST,
     EUR,
     FAK,
     FIM,
     FJD,
     FKP,
     FRF,
     GBP,
     GIP,
     GMD,
     GRX,
     HKD,
     HUF,
     ICK,
     IDR,
     ILS,
     INR,
     IRP,
     ITL,
     JMD,
     JOD,
     JPY,
     KES,
     KRW,
     KWD,
     KYD,
     LKR,
     LUF,
     MTL,
     MUR,
     MXN,
     MYR,
     NLG,
     NZD,
     OMR,
     PGK,
     PHP,
     PKR,
     PLN,
     PTN,
     QAR,
     RUR,
     SAR,
     SCR,
     SEK,
     SGD,
     SKP,
     THB,
     TRL,
     TTD,
     TWD,
     USD,
     VEB,
     VND,
     XEU,
     ZAR,
     ZWD,
     NOK);
  END_TYPE;

  ENTITY IfcDerivedUnit;
      Elements        : SET [1:?] OF IfcDerivedUnitElement;
      UnitType        : IfcDerivedUnitEnum;
      UserDefinedType : OPTIONAL IfcLabel;
    DERIVE
      Dimensions      : IfcDimensionalExponents := IfcDeriveDimensionalExponents(SELF);
    WHERE
      WR1 : (SIZEOF (Elements) > 1) OR ((SIZEOF (Elements) = 1) AND (Elements[1].Exponent <> 1 ));
      WR2 : (UnitType <> IfcDerivedUnitEnum.USERDEFINED) OR
            ((UnitType = IfcDerivedUnitEnum.USERDEFINED) AND 
             (EXISTS(SELF.UserDefinedType)));
  END_ENTITY;

  ENTITY IfcDerivedUnitElement;
      Unit     : IfcNamedUnit;
      Exponent : INTEGER;
  END_ENTITY;

  ENTITY IfcNamedUnit
    ABSTRACT SUPERTYPE OF (ONEOF(IfcContextDependentUnit, IfcConversionBasedUnit, IfcSIUnit));
      Dimensions : IfcDimensionalExponents;
      UnitType   : IfcUnitEnum;
    WHERE
      WR1 : IfcCorrectDimensions (SELF.UnitType, SELF.Dimensions);
  END_ENTITY;

  ENTITY IfcContextDependentUnit
    SUBTYPE OF(IfcNamedUnit);
      Name : IfcLabel;
  END_ENTITY;

  ENTITY IfcConversionBasedUnit
    SUBTYPE OF(IfcNamedUnit);
      Name             : IfcLabel;
      ConversionFactor : IfcMeasureWithUnit;
  END_ENTITY;

  ENTITY IfcMeasureWithUnit;
      ValueComponent : IfcValue;
      UnitComponent  : IfcUnit;
  END_ENTITY;

  ENTITY IfcSIUnit
    SUBTYPE OF(IfcNamedUnit);
      Prefix                       : OPTIONAL IfcSIPrefix;
      Name                         : IfcSIUnitName;
    DERIVE
      SELF\IfcNamedUnit.Dimensions : IfcDimensionalExponents := IfcDimensionsForSiUnit (SELF.Name);
  END_ENTITY;

  ENTITY IfcDimensionalExponents;
      LengthExponent                   : INTEGER;
      MassExponent                     : INTEGER;
      TimeExponent                     : INTEGER;
      ElectricCurrentExponent          : INTEGER;
      ThermodynamicTemperatureExponent : INTEGER;
      AmountOfSubstanceExponent        : INTEGER;
      LuminousIntensityExponent        : INTEGER;
  END_ENTITY;

  ENTITY IfcMonetaryUnit;
      Currency : IfcCurrencyEnum;
  END_ENTITY;

  ENTITY IfcUnitAssignment;
      Units : SET [1:?] OF IfcUnit;
  END_ENTITY;

  FUNCTION IfcCorrectDimensions
  (m   : IfcUnitEnum; Dim : IfcDimensionalExponents) : LOGICAL;  
  CASE m OF
    LENGTHUNIT : IF
      Dim = (IfcDimensionalExponents (1, 0, 0, 0, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    MASSUNIT : IF
      Dim = (IfcDimensionalExponents (0, 1, 0, 0, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    TIMEUNIT : IF
      Dim = (IfcDimensionalExponents (0, 0, 1, 0, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    ELECTRICCURRENTUNIT : IF
      Dim = (IfcDimensionalExponents (0, 0, 0, 1, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    THERMODYNAMICTEMPERATUREUNIT : IF
      Dim = (IfcDimensionalExponents (0, 0, 0, 0, 1, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    AMOUNTOFSUBSTANCEUNIT : IF
      Dim = (IfcDimensionalExponents (0, 0, 0, 0, 0, 1, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    LUMINOUSINTENSITYUNIT : IF
      Dim = (IfcDimensionalExponents (0, 0, 0, 0, 0, 0, 1))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    PLANEANGLEUNIT : IF
      Dim = (IfcDimensionalExponents (0, 0, 0, 0, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    SOLIDANGLEUNIT : IF
      Dim = (IfcDimensionalExponents (0, 0, 0, 0, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    AREAUNIT : IF
      Dim = (IfcDimensionalExponents (2, 0, 0, 0, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    VOLUMEUNIT : IF
      Dim = (IfcDimensionalExponents (3, 0, 0, 0, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
  
    ABSORBEDDOSEUNIT : IF
      Dim = (IfcDimensionalExponents (2, 0, -2, 0, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    RADIOACTIVITYUNIT : IF
      Dim = (IfcDimensionalExponents (0, 0, -1, 0, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    ELECTRICCAPACITANCEUNIT : IF
      Dim = (IfcDimensionalExponents (-2, 1, 4, 1, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    DOSEEQUIVALENTUNIT : IF
      Dim = (IfcDimensionalExponents (2, 0, -2, 0, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    ELECTRICCHARGEUNIT : IF
      Dim = (IfcDimensionalExponents (0, 0, 1, 1, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    ELECTRICCONDUCTANCEUNIT : IF
      Dim = (IfcDimensionalExponents (-2, -1, 3, 2, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    ELECTRICVOLTAGEUNIT : IF
      Dim = (IfcDimensionalExponents (2, 1, -3, -1, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    ELECTRICRESISTANCEUNIT : IF
      Dim = (IfcDimensionalExponents (2, 1, -3, -2, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    ENERGYUNIT : IF
      Dim = (IfcDimensionalExponents (2, 1, -2, 0, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    FORCEUNIT : IF
      Dim = (IfcDimensionalExponents (1, 1, -2, 0, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    FREQUENCYUNIT : IF
      Dim = (IfcDimensionalExponents (0, 0, -1, 0, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    INDUCTANCEUNIT : IF
      Dim = (IfcDimensionalExponents (2, 1, -2, -2, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    ILLUMINANCEUNIT : IF
      Dim = (IfcDimensionalExponents (-2, 0, 0, 0, 0, 0, 1))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    LUMINOUSFLUXUNIT : IF
      Dim = (IfcDimensionalExponents (0, 0, 0, 0, 0, 0, 1))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    MAGNETICFLUXUNIT : IF
      Dim = (IfcDimensionalExponents (2, 1, -2, -1, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    MAGNETICFLUXDENSITYUNIT : IF
      Dim = (IfcDimensionalExponents (0, 1, -2, -1, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    POWERUNIT : IF
      Dim = (IfcDimensionalExponents (2, 1, -3, 0, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
    PRESSUREUNIT : IF
      Dim = (IfcDimensionalExponents (-1, 1, -2, 0, 0, 0, 0))
        THEN RETURN(TRUE);
        ELSE RETURN(FALSE);
      END_IF;
  
    OTHERWISE :
      RETURN (UNKNOWN);
  END_CASE;
  END_FUNCTION;

  FUNCTION IfcDeriveDimensionalExponents
  (x : IfcUnit)           : IfcDimensionalExponents;  
    LOCAL
      Result : IfcDimensionalExponents :=
               IfcDimensionalExponents(0, 0, 0, 0, 0, 0, 0);  
    END_LOCAL;
    IF 'IFC2X_FINAL.IFCDERIVEDUNIT' IN TYPEOF(x) THEN
      REPEAT i := LOINDEX(x.Elements) TO HIINDEX(x.Elements);
        Result.LengthExponent :=        
          Result.LengthExponent + (x.Elements[i].Exponent * x.Elements[i].Unit.Dimensions.LengthExponent);
        Result.MassExponent := 
          Result.MassExponent  + (x.Elements[i].Exponent * x.Elements[i].Unit.Dimensions.MassExponent);
        Result.TimeExponent := 
          Result.TimeExponent + (x.Elements[i].Exponent * x.Elements[i].Unit.Dimensions.TimeExponent);
        Result.ElectricCurrentExponent :=
          Result.ElectricCurrentExponent + (x.Elements[i].Exponent * x.Elements[i].Unit.Dimensions.ElectricCurrentExponent);
        Result.ThermodynamicTemperatureExponent :=
          Result.ThermodynamicTemperatureExponent + (x.Elements[i].Exponent * x.Elements[i].Unit.Dimensions.ThermodynamicTemperatureExponent);
        Result.AmountOfSubstanceExponent :=
          Result.AmountOfSubstanceExponent + (x.Elements[i].Exponent * x.Elements[i].Unit.Dimensions.AmountOfSubstanceExponent);
        Result.LuminousIntensityExponent :=
          Result.LuminousIntensityExponent + (x.Elements[i].Exponent * x.Elements[i].Unit.Dimensions.LuminousIntensityExponent);
      END_REPEAT;  
    ELSE -- x is a unitless or a named unit
      Result := x.Dimensions;  
    END_IF;  
  RETURN (Result);
  END_FUNCTION;

  FUNCTION IfcDimensionsForSiUnit
  (n : IfcSiUnitName )     : IfcDimensionalExponents;
    CASE n OF
      METRE          : RETURN (IfcDimensionalExponents
                               (1, 0, 0, 0, 0, 0, 0));
      SQUARE_METRE   : RETURN (IfcDimensionalExponents
                               (2, 0, 0, 0, 0, 0, 0));
      CUBIC_METRE    : RETURN (IfcDimensionalExponents
                               (3, 0, 0, 0, 0, 0, 0));
      GRAM           : RETURN (IfcDimensionalExponents
                               (0, 1, 0, 0, 0, 0, 0));
      SECOND         : RETURN (IfcDimensionalExponents
                               (0, 0, 1, 0, 0, 0, 0));
      AMPERE         : RETURN (IfcDimensionalExponents
                               (0, 0, 0, 1, 0, 0, 0));
      KELVIN         : RETURN (IfcDimensionalExponents
                               (0, 0, 0, 0, 1, 0, 0));
      MOLE           : RETURN (IfcDimensionalExponents
                               (0, 0, 0, 0, 0, 1, 0));
      CANDELA        : RETURN (IfcDimensionalExponents
                               (0, 0, 0, 0, 0, 0, 1));
      RADIAN         : RETURN (IfcDimensionalExponents
                               (0, 0, 0, 0, 0, 0, 0));
      STERADIAN      : RETURN (IfcDimensionalExponents
                               (0, 0, 0, 0, 0, 0, 0));
      HERTZ          : RETURN (IfcDimensionalExponents
                               (0, 0, -1, 0, 0, 0, 0));
      NEWTON         : RETURN (IfcDimensionalExponents
                               (1, 1, -2, 0, 0, 0, 0));
      PASCAL         : RETURN (IfcDimensionalExponents
                               (-1, 1, -2, 0, 0, 0, 0));
      JOULE          : RETURN (IfcDimensionalExponents
                               (2, 1, -2, 0, 0, 0, 0));
      WATT           : RETURN (IfcDimensionalExponents
                               (2, 1, -3, 0, 0, 0, 0));
      COULOMB        : RETURN (IfcDimensionalExponents
                               (0, 0, 1, 1, 0, 0, 0));
      VOLT           : RETURN (IfcDimensionalExponents
                               (2, 1, -3, -1, 0, 0, 0));
      FARAD          : RETURN (IfcDimensionalExponents
                               (-2, -1, 4, 1, 0, 0, 0));
      OHM            : RETURN (IfcDimensionalExponents
                               (2, 1, -3, -2, 0, 0, 0));
      SIEMENS        : RETURN (IfcDimensionalExponents
                               (-2, -1, 3, 2, 0, 0, 0));
      WEBER          : RETURN (IfcDimensionalExponents
                               (2, 1, -2, -1, 0, 0, 0));
      TESLA          : RETURN (IfcDimensionalExponents
                               (0, 1, -2, -1, 0, 0, 0));
      HENRY          : RETURN (IfcDimensionalExponents
                               (2, 1, -2, -2, 0, 0, 0));
      DEGREE_CELSIUS : RETURN (IfcDimensionalExponents
                               (0, 0, 0, 0, 1, 0, 0));
      LUMEN          : RETURN (IfcDimensionalExponents
                               (0, 0, 0, 0, 0, 0, 1));
      LUX            : RETURN (IfcDimensionalExponents
                               (-2, 0, 0, 0, 0, 0, 1));
      BECQUEREL      : RETURN (IfcDimensionalExponents
                               (0, 0, -1, 0, 0, 0, 0));
      GRAY           : RETURN (IfcDimensionalExponents
                               (2, 0, -2, 0, 0, 0, 0));
      SIEVERT        : RETURN (IfcDimensionalExponents
                               (2, 0, -2, 0, 0, 0, 0));
      OTHERWISE      : RETURN (IfcDimensionalExponents
                               (0, 0, 0, 0, 0, 0, 0));
    END_CASE;
  END_FUNCTION;

-- END_SCHEMA;
-- SCHEMA IFCPROFILERESOURCE;

  TYPE IfcProfileTypeEnum = ENUMERATION OF
    (CURVE,
     AREA);
  END_TYPE;

  ENTITY IfcProfileDef
    ABSTRACT SUPERTYPE OF (ONEOF(IfcArbitraryClosedProfileDef, 
      IfcCircleProfileDef, IfcRectangleProfileDef, IfcTrapeziumProfileDef, 
      IfcEllipseProfileDef, IfcRoundedRectangleProfileDef, IfcDerivedProfileDef, 
      IfcArbitraryOpenProfileDef, IfcIshapeProfileDef, IfcCompositeProfileDef));
      ProfileType : IfcProfileTypeEnum;
      ProfileName : OPTIONAL IfcLabel;
  END_ENTITY;

  ENTITY IfcArbitraryClosedProfileDef
    SUPERTYPE OF (IfcArbitraryProfileDefWithVoids)
    SUBTYPE OF(IfcProfileDef);
      OuterCurve : IfcCurve;
    WHERE
      WR1 : OuterCurve.Dim = 2;
      WR2 : NOT('IFC2X_FINAL.IFCLINE' IN TYPEOF(OuterCurve));
      WR3 : NOT('IFC2X_FINAL.IFCOFFSETCURVE2D' IN TYPEOF(OuterCurve));
  END_ENTITY;

  ENTITY IfcArbitraryProfileDefWithVoids
    SUBTYPE OF(IfcArbitraryClosedProfileDef);
      InnerCurves : SET [1:?] OF IfcCurve;
    WHERE
      WR1 : SELF\IfcProfileDef.ProfileType = AREA;
      WR2 : SIZEOF(QUERY(temp <* InnerCurves | temp.Dim <> 2)) = 0;
      WR3 : SIZEOF(QUERY(temp <* InnerCurves | 'IFC2X_FINAL.IFCLINE' IN TYPEOF(temp))) = 0;
  END_ENTITY;

  ENTITY IfcCircleProfileDef
    SUBTYPE OF(IfcProfileDef);
      Position : IfcAxis2Placement2D;
      Radius   : IfcPositiveLengthMeasure;
  END_ENTITY;

  ENTITY IfcRectangleProfileDef
    SUBTYPE OF(IfcProfileDef);
      Position : IfcAxis2Placement2D;
      XDim     : IfcPositiveLengthMeasure;
      YDim     : IfcPositiveLengthMeasure;
  END_ENTITY;

  ENTITY IfcTrapeziumProfileDef
    SUBTYPE OF(IfcProfileDef);
      Position   : IfcAxis2Placement2D;
      BottomXDim : IfcPositiveLengthMeasure;
      TopXDim    : IfcPositiveLengthMeasure;
      YDim       : IfcPositiveLengthMeasure;
      TopXOffset : IfcLengthMeasure;
  END_ENTITY;

  ENTITY IfcEllipseProfileDef
    SUBTYPE OF(IfcProfileDef);
      Position  : IfcAxis2Placement2D;
      SemiAxis1 : IfcPositiveLengthMeasure;
      SemiAxis2 : IfcPositiveLengthMeasure;
  END_ENTITY;

  ENTITY IfcRoundedRectangleProfileDef
    SUBTYPE OF(IfcProfileDef);
      Position       : IfcAxis2Placement2D;
      XDim           : IfcPositiveLengthMeasure;
      YDim           : IfcPositiveLengthMeasure;
      RoundingRadius : IfcPositiveLengthMeasure;
    WHERE
      WR21 : ((RoundingRadius <= (XDim/2)) AND (RoundingRadius <= (YDim/2)));
  END_ENTITY;

  ENTITY IfcDerivedProfileDef
    SUBTYPE OF(IfcProfileDef);
      ParentProfile : IfcProfileDef;
      Operator      : IfcCartesianTransformationOperator2D;
      Label         : OPTIONAL IfcLabel;
    WHERE
      WR1 : SELF\IfcProfileDef.ProfileType = ParentProfile.ProfileType;
  END_ENTITY;

  ENTITY IfcArbitraryOpenProfileDef
    SUBTYPE OF(IfcProfileDef);
      Curve : IfcBoundedCurve;
    WHERE
      WR1 : SELF\IfcProfileDef.ProfileType = IfcProfileTypeEnum.CURVE;
      WR2 : Curve.Dim = 2;
  END_ENTITY;

  ENTITY IfcIshapeProfileDef
    SUBTYPE OF(IfcProfileDef);
      Position        : IfcAxis2Placement2D;
      OverallWidth    : IfcPositiveLengthMeasure;
      OverallDepth    : IfcPositiveLengthMeasure;
      WebThickness    : IfcPositiveLengthMeasure;
      FlangeThickness : IfcPositiveLengthMeasure;
      FilletRadius    : OPTIONAL IfcPositiveLengthMeasure;
    WHERE
      WR1 : FlangeThickness < (OverallDepth / 2);
      WR2 : WebThickness < OverallWidth;
  END_ENTITY;

  ENTITY IfcCompositeProfileDef
    SUBTYPE OF(IfcProfileDef);
      Profiles : SET [2:?] OF IfcProfileDef;
      Label    : OPTIONAL IfcLabel;
    WHERE
      WR1 : SIZEOF(QUERY(temp <* Profiles | temp.ProfileType <> Profiles[1].ProfileType)) = 0;
      WR2 : SIZEOF(QUERY(temp <* Profiles | 'IFC2X_FINAL.IFCCOMPOSITEPROFILEDEF' IN TYPEOF(temp))) = 0;
  END_ENTITY;

-- END_SCHEMA;
-- SCHEMA IFCPROPERTYRESOURCE;

  TYPE IfcObjectReferenceSelect = SELECT
    (IfcMaterial,
     IfcPerson,
     IfcDateAndTime,
     IfcMaterialList,
     IfcOrganization,
     IfcCalendarDate,
     IfcLocalTime,
     IfcPersonAndOrganization,
     IfcMaterialLayer,
     IfcExternalReference);
  END_TYPE;

  ENTITY IfcPropertyEnumeratedValue
    SUBTYPE OF(IfcSimpleProperty);
      EnumerationValues    : LIST [1:?] OF IfcValue;
      EnumerationReference : OPTIONAL IfcPropertyEnumeration;
    WHERE
      WR1 : NOT(EXISTS(EnumerationReference)) OR 
               (SIZEOF(QUERY(temp <* EnumerationValues |
                temp IN EnumerationReference.EnumerationValues))
                = SIZEOF(EnumerationValues));
  END_ENTITY;

  ENTITY IfcSimpleProperty
    ABSTRACT SUPERTYPE OF (ONEOF(IfcPropertySingleValue, IfcPropertyEnumeratedValue,
      IfcPropertyBoundedValue, IfcPropertyTableValue, IfcPropertyReferenceValue))
    SUBTYPE OF(IfcProperty);
  END_ENTITY;

  ENTITY IfcProperty
    ABSTRACT SUPERTYPE OF (ONEOF(IfcComplexProperty, IfcSimpleProperty));
      Name          : IfcIdentifier;
      Description   : OPTIONAL IfcText;
    INVERSE
      PartOfComplex : SET [0:1] OF IfcComplexProperty FOR HasProperties;
  END_ENTITY;

  ENTITY IfcComplexProperty
    SUBTYPE OF(IfcProperty);
      UsageName     : IfcIdentifier;
      HasProperties : LIST [1:?] OF UNIQUE IfcProperty;
    WHERE
      WR1 : SIZEOF(QUERY(temp <* HasProperties | SELF :=: temp)) = 0;
  END_ENTITY;

  ENTITY IfcPropertySingleValue
    SUBTYPE OF(IfcSimpleProperty);
      NominalValue : IfcValue;
      Unit         : OPTIONAL IfcUnit;
  END_ENTITY;

  ENTITY IfcPropertyBoundedValue
    SUBTYPE OF(IfcSimpleProperty);
      UpperBoundValue : IfcValue;
      LowerBoundValue : IfcValue;
      Unit            : OPTIONAL IfcUnit;
    WHERE
      WR1 : TYPEOF(UpperBoundValue) = TYPEOF(LowerBoundValue);
  END_ENTITY;

  ENTITY IfcPropertyTableValue
    SUBTYPE OF(IfcSimpleProperty);
      DefiningValues : LIST [1:?] OF UNIQUE IfcValue;
      DefinedValues  : LIST [1:?] OF IfcValue;
      Expression     : OPTIONAL IfcText;
      DefiningUnit   : OPTIONAL IfcUnit;
      DefinedUnit    : OPTIONAL IfcUnit;
    WHERE
      WR1 : SIZEOF(DefiningValues) = SIZEOF(DefinedValues);
      WR2 : SIZEOF(QUERY(temp <* SELF.DefiningValues | TYPEOF(temp) <> TYPEOF(SELF.DefiningValues[1])))=0;
      WR3 : SIZEOF(QUERY(temp <* SELF.DefinedValues | TYPEOF(temp) <> TYPEOF(SELF.DefinedValues[1])))=0;
  END_ENTITY;

  ENTITY IfcPropertyReferenceValue
    SUBTYPE OF(IfcSimpleProperty);
      UsageName         : OPTIONAL IfcLabel;
      PropertyReference : IfcObjectReferenceSelect;
  END_ENTITY;

  ENTITY IfcPropertyEnumeration;
      Name              : IfcLabel;
      EnumerationValues : LIST [1:?] OF UNIQUE IfcValue;
      Unit              : OPTIONAL IfcUnit;
    UNIQUE
      UR1 : Name;
  END_ENTITY;

-- END_SCHEMA;
-- SCHEMA IFCQUANTITYRESOURCE;

  ENTITY IfcPhysicalQuantity
    ABSTRACT SUPERTYPE OF (ONEOF(IfcQuantityLength, IfcQuantityArea, 
      IfcQuantityVolume, IfcQuantityCount, IfcQuantityWeight));
      Name        : IfcLabel;
      Description : OPTIONAL IfcText;
      Unit        : OPTIONAL IfcNamedUnit;
  END_ENTITY;

  ENTITY IfcQuantityLength
    SUBTYPE OF(IfcPhysicalQuantity);
      LengthValue : IfcLengthMeasure;
    WHERE
      WR1 : NOT(EXISTS(SELF\IfcPhysicalQuantity.Unit)) OR
               (SELF\IfcPhysicalQuantity.Unit.UnitType = IfcUnitEnum.LENGTHUNIT);
  END_ENTITY;

  ENTITY IfcQuantityArea
    SUBTYPE OF(IfcPhysicalQuantity);
      AreaValue : IfcAreaMeasure;
    WHERE
      WR1 : NOT(EXISTS(SELF\IfcPhysicalQuantity.Unit)) OR
               (SELF\IfcPhysicalQuantity.Unit.UnitType = IfcUnitEnum.AREAUNIT);
  END_ENTITY;

  ENTITY IfcQuantityVolume
    SUBTYPE OF(IfcPhysicalQuantity);
      VolumeValue : IfcVolumeMeasure;
    WHERE
      WR1 : NOT(EXISTS(SELF\IfcPhysicalQuantity.Unit)) OR
               (SELF\IfcPhysicalQuantity.Unit.UnitType = IfcUnitEnum.VOLUMEUNIT);
  END_ENTITY;

  ENTITY IfcQuantityCount
    SUBTYPE OF(IfcPhysicalQuantity);
      CountValue : IfcCountMeasure;
  END_ENTITY;

  ENTITY IfcQuantityWeight
    SUBTYPE OF(IfcPhysicalQuantity);
      WeightValue : IfcMassMeasure;
    WHERE
      WR1 : NOT(EXISTS(SELF\IfcPhysicalQuantity.Unit)) OR
               (SELF\IfcPhysicalQuantity.Unit.UnitType = IfcUnitEnum.MASSUNIT);
  END_ENTITY;

-- END_SCHEMA;
-- SCHEMA IFCREPRESENTATIONRESOURCE;

  ENTITY IfcGeometricRepresentationContext
    SUBTYPE OF(IfcRepresentationContext);
      CoordinateSpaceDimension : IfcDimensionCount;
      Precision                : OPTIONAL REAL;
      WorldCoordinateSystem    : IfcAxis2Placement;
      TrueNorth                : OPTIONAL IfcDirection;
    WHERE
      WR1 : CoordinateSpaceDimension = WorldCoordinateSystem.Dim;
  END_ENTITY;

  ENTITY IfcRepresentationContext
    SUPERTYPE OF (IfcGeometricRepresentationContext);
      ContextIdentifier        : OPTIONAL IfcLabel;
      ContextType              : OPTIONAL IfcLabel;
    INVERSE
      RepresentationsInContext : SET OF IfcRepresentation FOR ContextOfItems;
  END_ENTITY;

  ENTITY IfcRepresentation
    SUPERTYPE OF (IfcShapeRepresentation);
      ContextOfItems           : IfcRepresentationContext;
      RepresentationIdentifier : OPTIONAL IfcLabel;
      RepresentationType       : OPTIONAL IfcLabel;
      Items                    : SET [1:?] OF IfcRepresentationItem;
    INVERSE
      OfProductRepresentation  : SET [0:1] OF IfcProductRepresentation FOR Representations;
  END_ENTITY;

  ENTITY IfcShapeRepresentation
    SUBTYPE OF(IfcRepresentation);
    INVERSE
      OfShapeAspect : SET [0:1] OF IfcShapeAspect FOR ShapeRepresentations;
    WHERE
      WR1 : 'IFC2X_FINAL.IFCGEOMETRICREPRESENTATIONCONTEXT' IN TYPEOF(SELF\IfcRepresentation.ContextOfItems);
      WR2 : SIZEOF(QUERY(temp <* Items | 'IFC2X_FINAL.IFCTOPOLOGICALREPRESENTATIONITEM' IN TYPEOF(temp))) = 0;
      WR3 : EXISTS(SELF\IfcRepresentation.RepresentationType);
      WR4 : IfcShapeRepresentationTypes(SELF\IfcRepresentation.RepresentationType, SELF\IfcRepresentation.Items);
  END_ENTITY;

  ENTITY IfcShapeAspect;
      ShapeRepresentations         : LIST [1:?] OF IfcShapeRepresentation;
      Name                         : OPTIONAL IfcLabel;
      Description                  : OPTIONAL IfcText;
      ProductDefinitional          : LOGICAL;
      PartOfProductDefinitionShape : IfcProductDefinitionShape;
  END_ENTITY;

  ENTITY IfcProductDefinitionShape
    SUBTYPE OF(IfcProductRepresentation);
    INVERSE
      HasShapeAspects : SET OF IfcShapeAspect FOR PartOfProductDefinitionShape;
  END_ENTITY;

  ENTITY IfcProductRepresentation
    SUPERTYPE OF (IfcProductDefinitionShape);
      Name            : OPTIONAL IfcLabel;
      Description     : OPTIONAL IfcText;
      Representations : LIST [1:?] OF IfcRepresentation;
  END_ENTITY;

  FUNCTION IfcShapeRepresentationTypes
   (RepType : IfcLabel; Items : SET OF IfcRepresentationItem) : LOGICAL;
      LOCAL
        Count : INTEGER := 0;
      END_LOCAL;
  
      CASE RepType OF 
      'Curve2D' :
        BEGIN 
          Count := SIZEOF(QUERY(temp <* Items | ('IFC2X_FINAL.IFCCURVE' IN TYPEOF(temp)) 
                   AND (temp.Dim = 2)));
        END;
      'GeometricSet' : 
        BEGIN 
          Count := SIZEOF(QUERY(temp <* Items | ('IFC2X_FINAL.IFCGEOMETRICSET' IN TYPEOF(temp))
                   OR ('IFC2X_FINAL.IFCPOINT' IN TYPEOF(temp))
                   OR ('IFC2X_FINAL.IFCCURVE' IN TYPEOF(temp))
                   OR ('IFC2X_FINAL.IFCSURFACE' IN TYPEOF(temp))));
        END;
      'GeometricCurveSet' :
        BEGIN
          Count := SIZEOF(QUERY(temp <* Items | ('IFC2X_FINAL.IFCGEOMETRICSET' IN TYPEOF(temp))
                   OR ('IFC2X_FINAL.IFCPOINT' IN TYPEOF(temp))
                   OR ('IFC2X_FINAL.IFCCURVE' IN TYPEOF(temp))));
           REPEAT i:=1 TO HIINDEX(Items);  
             IF ('IFC2X_FINAL.IFCGEOMETRICSET' IN TYPEOF(Items[i]))
             THEN
               IF (SIZEOF(QUERY(temp <* Items[i].Elements | 'IFC2X_FINAL.IFCSURFACE' IN TYPEOF(temp))) > 0)
               THEN
                 Count := Count - 1;
               END_IF;
             END_IF;
           END_REPEAT;
        END;
      'SurfaceModel' :
        BEGIN
          Count := SIZEOF(QUERY(temp <* Items | ('IFC2X_FINAL.IFCSHELLBASEDSURFACEMODEL' IN TYPEOF(temp))
                   OR ('IFC2X_FINAL.IFCFACEBASEDSURFACEMODEL' IN TYPEOF(temp))));      
        END;
      'SolidModel' :
        BEGIN
          Count := SIZEOF(QUERY(temp <* Items | ('IFC2X_FINAL.IFCSOLIDMODEL' IN TYPEOF(temp))));            
        END;
      'SweptSolid' :
        BEGIN
          Count := SIZEOF(QUERY(temp <* Items | ('IFC2X_FINAL.IFCSWEPTAREASOLID' IN TYPEOF(temp))));            
        END;
      'CSG' :
        BEGIN
          Count := SIZEOF(QUERY(temp <* Items | ('IFC2X_FINAL.IFCBOOLEANRESULT' IN TYPEOF(temp))));            
        END;
      'Clipping' :
        BEGIN
          Count := SIZEOF(QUERY(temp <* Items | ('IFC2X_FINAL.IFCBOOLEANCLIPPINGRESULT' IN TYPEOF(temp))));            
        END;
      'Brep' :
        BEGIN
          Count := SIZEOF(QUERY(temp <* Items | ('IFC2X_FINAL.IFCFACETEDBREP' IN TYPEOF(temp))
                   OR ('IFC2X_FINAL.IFCFACETEDBREPWITHVOIDS' IN TYPEOF(temp))));      
        END;
      'BoundingBox' :
        BEGIN
          Count := SIZEOF(QUERY(temp <* Items | ('IFC2X_FINAL.IFCBOUNDINGBOX' IN TYPEOF(temp))));
          IF (SIZEOF(Items) > 1)
          THEN
            Count := 0;
          END_IF;   
        END;
      'SectionedSpine' :
        BEGIN
          Count := SIZEOF(QUERY(temp <* Items | ('IFC2X_FINAL.IFCSECTIONEDSPINE' IN TYPEOF(temp))));      
        END;
      'MappedRepresentation' :
        BEGIN
          Count := SIZEOF(QUERY(temp <* Items | ('IFC2X_FINAL.IFCMAPPEDITEM' IN TYPEOF(temp)))); 
          IF (SIZEOF(Items) > 1)
          THEN
            Count := 0;
          END_IF;   
        END;
       OTHERWISE : RETURN(?);
      END_CASE;
      RETURN (Count = SIZEOF(Items));
  END_FUNCTION;

-- END_SCHEMA;
-- SCHEMA IFCTOPOLOGYRESOURCE;

  TYPE IfcShell = SELECT
    (IfcClosedShell,
     IfcOpenShell);
  END_TYPE;

  ENTITY IfcClosedShell
    SUBTYPE OF(IfcConnectedFaceSet);
  END_ENTITY;

  ENTITY IfcConnectedFaceSet
    SUPERTYPE OF (ONEOF(IfcClosedShell, IfcOpenShell))
    SUBTYPE OF(IfcTopologicalRepresentationItem);
      CfsFaces : SET [1:?] OF IfcFace;
  END_ENTITY;

  ENTITY IfcTopologicalRepresentationItem
    ABSTRACT SUPERTYPE OF (ONEOF(IfcConnectedFaceSet, IfcEdge, IfcFace, 
      IfcFaceBound, IfcPath, IfcVertex, IfcLoop))
    SUBTYPE OF(IfcRepresentationItem);
  END_ENTITY;

  ENTITY IfcEdge
    SUPERTYPE OF (ONEOF(IfcOrientedEdge, IfcEdgeCurve))
    SUBTYPE OF(IfcTopologicalRepresentationItem);
      EdgeStart : IfcVertex;
      EdgeEnd   : IfcVertex;
  END_ENTITY;

  ENTITY IfcOrientedEdge
    SUBTYPE OF(IfcEdge);
      EdgeElement            : IfcEdge;
      Orientation            : BOOLEAN;
    DERIVE
      SELF\IfcEdge.EdgeStart : IfcVertex := IfcBooleanChoose 
                               (Orientation, EdgeElement.EdgeStart, EdgeElement.EdgeEnd);
      SELF\IfcEdge.EdgeEnd   : IfcVertex := IfcBooleanChoose 
                               (Orientation, EdgeElement.EdgeEnd, EdgeElement.EdgeStart);
    WHERE
      WR1 : NOT('IFC2X_FINAL.IFCORIENTEDEDGE' IN TYPEOF(EdgeElement));
  END_ENTITY;

  ENTITY IfcVertex
    SUPERTYPE OF (IfcVertexPoint)
    SUBTYPE OF(IfcTopologicalRepresentationItem);
  END_ENTITY;

  ENTITY IfcVertexPoint
    SUBTYPE OF(IfcVertex);
      VertexGeometry : IfcPoint;
  END_ENTITY;

  ENTITY IfcEdgeCurve
    SUBTYPE OF(IfcEdge);
      EdgeGeometry : IfcCurve;
      SameSense    : BOOLEAN;
  END_ENTITY;

  ENTITY IfcFace
    SUPERTYPE OF (IfcFaceSurface)
    SUBTYPE OF(IfcTopologicalRepresentationItem);
      Bounds : SET [1:?] OF IfcFaceBound;
    WHERE
      WR1 : SIZEOF(QUERY(temp <* Bounds | 'IFC2X_FINAL.IFCFACEOUTERBOUND' IN TYPEOF(temp))) <= 1;
  END_ENTITY;

  ENTITY IfcFaceSurface
    SUBTYPE OF(IfcFace);
      FaceSurface : IfcSurface;
      SameSense   : BOOLEAN;
  END_ENTITY;

  ENTITY IfcFaceBound
    SUPERTYPE OF (IfcFaceOuterBound)
    SUBTYPE OF(IfcTopologicalRepresentationItem);
      Bound       : IfcLoop;
      Orientation : BOOLEAN;
  END_ENTITY;

  ENTITY IfcFaceOuterBound
    SUBTYPE OF(IfcFaceBound);
  END_ENTITY;

  ENTITY IfcLoop
    SUPERTYPE OF (IfcPolyLoop)
    SUBTYPE OF(IfcTopologicalRepresentationItem);
  END_ENTITY;

  ENTITY IfcPolyLoop
    SUBTYPE OF(IfcLoop);
      Polygon : LIST [3:?] OF UNIQUE IfcCartesianPoint;
    DERIVE
      Dim     : IfcDimensionCount := Polygon[1].Dim;
    WHERE
      WR21 : SIZEOF(QUERY(Temp <* Polygon | Temp.Dim <> Polygon[1].Dim)) = 0;
  END_ENTITY;

  ENTITY IfcPath
    SUBTYPE OF(IfcTopologicalRepresentationItem);
      EdgeList : LIST [1:?] OF UNIQUE IfcOrientedEdge;
    WHERE
      WR1 : IfcPathHeadToTail(SELF);
  END_ENTITY;

  ENTITY IfcOpenShell
    SUBTYPE OF(IfcConnectedFaceSet);
  END_ENTITY;

  FUNCTION IfcBooleanChoose
  (B : BOOLEAN ;
       Choice1, Choice2 : GENERIC : Item) : GENERIC : Item;
    IF B THEN
       RETURN (Choice1);
    ELSE
       RETURN (Choice2);
    END_IF;
  END_FUNCTION;

  FUNCTION IfcPathHeadToTail
  (APath : IfcPath) : LOGICAL;
     LOCAL
       N : INTEGER := 0;
       P : LOGICAL := UNKNOWN;
     END_LOCAL;
       N := SIZEOF (APath.EdgeList);
     REPEAT i := 2 TO N;
        P := P AND (APath.EdgeList[i-1].EdgeEnd :=:
                    APath.EdgeList[i].EdgeStart);
     END_REPEAT;
     RETURN (P);
  END_FUNCTION;

-- END_SCHEMA;
-- SCHEMA IFCUTILITYRESOURCE;

  TYPE IfcStateEnum = ENUMERATION OF
    (READWRITE,
     READONLY,
     LOCKED,
     READWRITELOCKED,
     READONLYLOCKED);
  END_TYPE;

  TYPE IfcChangeActionEnum = ENUMERATION OF
    (NOCHANGE,
     MODIFIED,
     ADDED,
     DELETED,
     MODIFIEDADDED,
     MODIFIEDDELETED);
  END_TYPE;

  TYPE IfcGloballyUniqueId = STRING (22) FIXED;
  END_TYPE;

  ENTITY IfcApplication;
      ApplicationDeveloper  : IfcOrganization;
      Version               : IfcLabel;
      ApplicationFullName   : IfcLabel;
      ApplicationIdentifier : IfcIdentifier;
    UNIQUE
      UR1 : ApplicationIdentifier;
      UR2 : ApplicationFullName, Version;
  END_ENTITY;

  ENTITY IfcOwnerHistory;
      OwningUser               : IfcPersonAndOrganization;
      OwningApplication        : IfcApplication;
      State                    : OPTIONAL IfcStateEnum;
      ChangeAction             : IfcChangeActionEnum;
      LastModifiedDate         : OPTIONAL IfcTimeStamp;
      LastModifyingUser        : OPTIONAL IfcPersonAndOrganization;
      LastModifyingApplication : OPTIONAL IfcApplication;
      CreationDate             : IfcTimeStamp;
  END_ENTITY;

  ENTITY IfcTable;
      Name               : STRING;
      Rows               : LIST [1:?] OF IfcTableRow;
    DERIVE
      NumberOfCellsInRow : INTEGER := HIINDEX(Rows[1].RowCells);
      NumberOfHeadings   : INTEGER := SIZEOF(QUERY( Temp <* Rows | Temp.IsHeading));
      NumberOfDataRows   : INTEGER := SIZEOF(QUERY( Temp <* Rows | NOT(Temp.IsHeading)));
    WHERE
      WR1 : SIZEOF(QUERY( Temp <* Rows | HIINDEX(Temp.RowCells) <> HIINDEX(Rows[1].RowCells))) = 0;
      WR2 : SIZEOF(QUERY( Temp <* Rows | HIINDEX(Temp.RowCells) <> HIINDEX(Rows[1].RowCells))) = 0;
      WR3 : { 0 <= NumberOfHeadings <= 1 };
  END_ENTITY;

  ENTITY IfcTableRow;
      RowCells  : LIST [1:?] OF IfcMeasureValue;
      IsHeading : BOOLEAN;
    INVERSE
      OfTable   : IfcTable FOR Rows;
  END_ENTITY;

-- END_SCHEMA;
-- SCHEMA IFCKERNEL;

  TYPE IfcSequenceEnum = ENUMERATION OF
    (START_START,
     START_FINISH,
     FINISH_START,
     FINISH_FINISH,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcResourceConsumptionEnum = ENUMERATION OF
    (CONSUMED,
     PARTIALLYCONSUMED,
     NOTCONSUMED,
     OCCUPIED,
     PARTIALLYOCCUPIED,
     NOTOCCUPIED,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcObjectTypeEnum = ENUMERATION OF
    (PRODUCT,
     PROCESS,
     CONTROL,
     RESOURCE,
     ACTOR,
     GROUP,
     PROJECT,
     NOTDEFINED);
  END_TYPE;

  ENTITY IfcProduct
    ABSTRACT SUPERTYPE OF (ONEOF(
      IfcProxy
     ,IfcElement
     ,IfcGrid
     ,IfcSpatialStructureElement
    ))
    SUBTYPE OF(IfcObject);
      ObjectPlacement : OPTIONAL IfcObjectPlacement;
      Representation  : OPTIONAL IfcProductRepresentation;
    INVERSE
      ReferencedBy    : SET OF IfcRelAssignsToProduct FOR RelatingProduct;
    WHERE
      WR1 : (EXISTS(Representation) AND EXISTS(ObjectPlacement))
            OR (NOT(EXISTS(Representation)));
  END_ENTITY;

  ENTITY IfcObject
    ABSTRACT SUPERTYPE OF (ONEOF(IfcActor, IfcControl, IfcGroup, IfcProcess, IfcProduct, IfcProject, IfcResource))
    SUBTYPE OF(IfcRoot);
      ObjectType      : OPTIONAL IfcLabel;
    INVERSE
      IsDefinedBy     : SET OF IfcRelDefines FOR RelatedObjects;
      HasAssociations : SET OF IfcRelAssociates FOR RelatedObjects;
      HasAssignments  : SET OF IfcRelAssigns FOR RelatedObjects;
      Decomposes      : SET OF IfcRelDecomposes FOR RelatedObjects;
      IsDecomposedBy  : SET [0:1] OF IfcRelDecomposes FOR RelatingObject;
    WHERE
      WR1 : SIZEOF(QUERY(temp <* IsDefinedBy | 'IFC2X_FINAL.IFCRELDEFINESBYTYPE' IN TYPEOF(temp))) <= 1;
  END_ENTITY;

  ENTITY IfcRoot
    ABSTRACT SUPERTYPE OF (ONEOF(IfcObject, IfcPropertyDefinition, IfcRelationship));
      GlobalId     : IfcGloballyUniqueId;
      OwnerHistory : IfcOwnerHistory;
      Name         : OPTIONAL IfcLabel;
      Description  : OPTIONAL IfcText;
    UNIQUE
      UR1 : GlobalId;
  END_ENTITY;

  ENTITY IfcPropertyDefinition
    ABSTRACT SUPERTYPE OF (ONEOF(IfcTypeObject, IfcPropertySetDefinition))
    SUBTYPE OF(IfcRoot);
    INVERSE
      HasAssociations : SET OF IfcRelAssociates FOR RelatedObjects;
  END_ENTITY;

  ENTITY IfcTypeObject
    SUPERTYPE OF (IfcTypeProduct)
    SUBTYPE OF(IfcPropertyDefinition);
      ApplicableOccurrence : OPTIONAL IfcLabel;
      HasPropertySets      : OPTIONAL LIST [1:?] OF UNIQUE IfcPropertySetDefinition;
    INVERSE
      ObjectTypeOf         : SET [0:1] OF IfcRelDefinesByType FOR RelatingType;
    WHERE
      WR1 : EXISTS(SELF\IfcRoot.Name);
  END_ENTITY;

  ENTITY IfcTypeProduct
    SUPERTYPE OF (ONEOF(
      IfcDoorStyle
     ,IfcWindowStyle
    ))
    SUBTYPE OF(IfcTypeObject);
      RepresentationMaps : OPTIONAL LIST [1:?] OF UNIQUE IfcRepresentationMap;
      Tag                : OPTIONAL IfcLabel;
    WHERE
      WR1 : NOT(EXISTS(SELF\IfcTypeObject.ObjectTypeOf[1])) OR
            (SIZEOF(QUERY(temp <* SELF\IfcTypeObject.ObjectTypeOf[1].RelatedObjects |
             NOT(('IFC2X_FINAL.IFCPRODUCT' IN TYPEOF(temp)) OR
                 ('IFC2X_FINAL.IFCPROXY' IN TYPEOF(temp))))) = 0);
  END_ENTITY;

  ENTITY IfcPropertySetDefinition
    ABSTRACT SUPERTYPE OF (ONEOF(
      IfcPropertySet
     ,IfcDoorLiningProperties
     ,IfcDoorPanelProperties
     ,IfcElectricalBaseProperties
     ,IfcElementQuantity
     ,IfcFluidFlowProperties
     ,IfcManufacturerInformation
     ,IfcPermeableCoveringProperties
     ,IfcSpaceThermalLoad
     ,IfcWindowLiningProperties
     ,IfcWindowPanelProperties
    ))
    SUBTYPE OF(IfcPropertyDefinition);
    INVERSE
      PropertyDefinitionOf : SET [0:1] OF IfcRelDefinesByProperties FOR RelatingPropertyDefinition;
      DefinesType          : SET [0:1] OF IfcTypeObject FOR HasPropertySets;
  END_ENTITY;

  ENTITY IfcPropertySet
    SUBTYPE OF(IfcPropertySetDefinition);
      HasProperties : SET [1:?] OF IfcProperty;
    WHERE
      WR1 : EXISTS(SELF\IfcRoot.Name);
  END_ENTITY;

  ENTITY IfcRelDefinesByProperties
    SUPERTYPE OF (IfcRelOverridesProperties)
    SUBTYPE OF(IfcRelDefines);
      RelatingPropertyDefinition : IfcPropertySetDefinition;
  END_ENTITY;

  ENTITY IfcRelDefines
    ABSTRACT SUPERTYPE OF (ONEOF(IfcRelDefinesByProperties, IfcRelDefinesByType))
    SUBTYPE OF(IfcRelationship);
      RelatedObjects : SET [1:?] OF IfcObject;
  END_ENTITY;

  ENTITY IfcRelationship
    ABSTRACT SUPERTYPE OF (ONEOF(IfcRelAssigns, IfcRelDecomposes, IfcRelAssociates, IfcRelDefines, IfcRelConnects))
    SUBTYPE OF(IfcRoot);
  END_ENTITY;

  ENTITY IfcRelAssigns
    ABSTRACT SUPERTYPE OF (ONEOF(IfcRelAssignsToProcess, IfcRelAssignsToProduct, 
      IfcRelAssignsToControl, IfcRelAssignsToResource, IfcRelAssignsToActor, IfcRelAssignsToGroup))
    SUBTYPE OF(IfcRelationship);
      RelatedObjects     : SET [1:?] OF IfcObject;
      RelatedObjectsType : OPTIONAL IfcObjectTypeEnum;
    WHERE
      WR1 : IfcCorrectObjectAssignment(RelatedObjectsType, RelatedObjects);
  END_ENTITY;

  ENTITY IfcRelAssignsToProcess
    SUBTYPE OF(IfcRelAssigns);
      RelatingProcess   : IfcProcess;
      QuantityInProcess : OPTIONAL IfcMeasureWithUnit;
    WHERE
      WR1 : SIZEOF (QUERY (temp <* SELF\IfcRelAssigns.RelatedObjects | 'IFC2X_FINAL.IFCPROCESS' IN TYPEOF(temp))) = 0;
  END_ENTITY;

  ENTITY IfcProcess
    ABSTRACT SUPERTYPE  OF (IfcTask)
    SUBTYPE OF(IfcObject);
      Productivity    : OPTIONAL IfcMeasureWithUnit;
    INVERSE
      OperatesOn      : SET OF IfcRelAssignsToProcess FOR RelatingProcess;
      IsSuccessorFrom : SET OF IfcRelSequence FOR RelatedProcess;
      IsPredecessorTo : SET OF IfcRelSequence FOR RelatingProcess;
  END_ENTITY;

  ENTITY IfcRelSequence
    SUBTYPE OF(IfcRelConnects);
      RelatingProcess : IfcProcess;
      RelatedProcess  : IfcProcess;
      TimeLag         : IfcTimeMeasure;
      SequenceType    : IfcSequenceEnum;
    WHERE
      WR1 : RelatingProcess :<>: RelatedProcess;
  END_ENTITY;

  ENTITY IfcRelConnects
    ABSTRACT SUPERTYPE OF (ONEOF(
      IfcRelSequence
     ,IfcRelAssignsFMStandard
     ,IfcRelConnectsElements
     ,IfcRelContainedInSpatialStructure
     ,IfcRelCoversBldgElements
     ,IfcRelFillsElement
     ,IfcRelFlowControlElements
     ,IfcRelInteractionRequirements
     ,IfcRelMaintenanceEvent
     ,IfcRelServicesBuildings
     ,IfcRelSpaceBoundary
     ,IfcRelVoidsElement
    ))
    SUBTYPE OF(IfcRelationship);
  END_ENTITY;

  ENTITY IfcRelAssignsToProduct
    SUBTYPE OF(IfcRelAssigns);
      RelatingProduct : IfcProduct;
    WHERE
      WR1 : SIZEOF(QUERY(Temp <* SELF\IfcRelAssigns.RelatedObjects | RelatingProduct :=: Temp)) = 0;
  END_ENTITY;

  ENTITY IfcRelAssignsToControl
    SUPERTYPE OF (ONEOF(
      IfcRelAssignsTasks
     ,IfcRelCostsObjects
    ))
    SUBTYPE OF(IfcRelAssigns);
      RelatingControl : IfcControl;
    WHERE
      WR1 : SIZEOF (QUERY (temp <* SELF\IfcRelAssigns.RelatedObjects | 'IFC2X_FINAL.IFCCONTROL' IN TYPEOF(temp))) = 0;
  END_ENTITY;

  ENTITY IfcControl
    ABSTRACT SUPERTYPE OF (ONEOF(
      IfcApprovalUsage
     ,IfcConstraintUsage
     ,IfcCost
     ,IfcCostSchedule
     ,IfcEquipmentStandard
     ,IfcFurnitureStandard
     ,IfcMaintenanceRecord
     ,IfcProjectOrder
     ,IfcScheduleTimeControl
     ,IfcSpaceProgram
     ,IfcWorkControl
    ))
    SUBTYPE OF(IfcObject);
    INVERSE
      Controls : SET OF IfcRelAssignsToControl FOR RelatingControl;
  END_ENTITY;

  ENTITY IfcRelAssignsToResource
    SUBTYPE OF(IfcRelAssigns);
      RelatingResource : IfcResource;
    WHERE
      WR1 : SIZEOF (QUERY (temp <* SELF\IfcRelAssigns.RelatedObjects | 'IFC2X_FINAL.IFCRESOURCE' IN TYPEOF(temp))) = 0;
  END_ENTITY;

  ENTITY IfcResource
    ABSTRACT SUPERTYPE OF (ONEOF(
      IfcConstructionEquipmentResource
     ,IfcConstructionMaterialResource
     ,IfcConstructionProductResource
     ,IfcCrewResource
     ,IfcLaborResource
     ,IfcSubContractResource
    ))
    SUBTYPE OF(IfcObject);
      ResourceConsumption : OPTIONAL IfcResourceConsumptionEnum;
      BaseUnit            : OPTIONAL IfcMeasureWithUnit;
    INVERSE
      ResourceOf          : SET OF IfcRelAssignsToResource FOR RelatingResource;
  END_ENTITY;

  ENTITY IfcRelAssignsToActor
    SUBTYPE OF(IfcRelAssigns);
      RelatingActor : IfcActor;
      ActingRole    : OPTIONAL IfcActorRole;
    WHERE
      WR1 : SIZEOF(QUERY(Temp <* SELF\IfcRelAssigns.RelatedObjects | 'IFC2X_FINAL.IFCACTOR' IN TYPEOF(Temp))) = 0;
  END_ENTITY;

  ENTITY IfcActor
    SUBTYPE OF(IfcObject);
      TheActor     : IfcActorSelect;
    INVERSE
      IsActingUpon : SET OF IfcRelAssignsToActor FOR RelatingActor;
  END_ENTITY;

  ENTITY IfcRelAssignsToGroup
    SUBTYPE OF(IfcRelAssigns);
      RelatingGroup : IfcGroup;
    WHERE
      WR1 : SIZEOF(QUERY(Temp <* SELF\IfcRelAssigns.RelatedObjects | RelatingGroup :=: Temp)) = 0;
  END_ENTITY;

  ENTITY IfcGroup
    SUPERTYPE OF (ONEOF(
      IfcAsset
     ,IfcCMDocPackage
     ,IfcInventory
     ,IfcSpaceProgramGroup
     ,IfcSystem
     ,IfcZone
    ))
    SUBTYPE OF(IfcObject);
    INVERSE
      IsGroupedBy : IfcRelAssignsToGroup FOR RelatingGroup;
  END_ENTITY;

  ENTITY IfcRelDecomposes
    ABSTRACT SUPERTYPE OF (ONEOF(IfcRelAggregates, IfcRelNests))
    SUBTYPE OF(IfcRelationship);
      RelatingObject : IfcObject;
      RelatedObjects : SET [1:?] OF IfcObject;
    WHERE
      WR1 : SIZEOF(QUERY(Temp <* RelatedObjects | RelatingObject :=: Temp)) = 0;
  END_ENTITY;

  ENTITY IfcRelAggregates
    SUBTYPE OF(IfcRelDecomposes);
  END_ENTITY;

  ENTITY IfcRelNests
    SUBTYPE OF(IfcRelDecomposes);
    WHERE
      WR1 : SIZEOF(QUERY(Temp <* SELF\IfcRelDecomposes.RelatedObjects | 
              NOT(TYPEOF(SELF\IfcRelDecomposes.RelatingObject) = TYPEOF(Temp)))) = 0;
  END_ENTITY;

  ENTITY IfcRelAssociates
    SUPERTYPE OF (ONEOF(
      IfcRelAssociatesClassification
     ,IfcRelAssociatesDocument
     ,IfcRelAssociatesLibrary
     ,IfcRelAssociatesMaterial
    ))
    SUBTYPE OF(IfcRelationship);
      RelatedObjects : SET [1:?] OF IfcRoot;
    WHERE
      WR1 : SIZEOF(QUERY(temp <* RelatedObjects |
             NOT(('IFC2X_FINAL.IFCOBJECT' IN TYPEOF(temp)) 
              OR ('IFC2X_FINAL.IFCPROPERTYDEFINITION' IN TYPEOF(temp)))
             )) = 0;
  END_ENTITY;

  ENTITY IfcRelAssociatesClassification
    SUBTYPE OF(IfcRelAssociates);
      RelatingClassification : IfcClassificationNotationSelect;
  END_ENTITY;

  ENTITY IfcRelAssociatesDocument
    SUBTYPE OF(IfcRelAssociates);
      RelatingDocument : IfcDocumentSelect;
  END_ENTITY;

  ENTITY IfcRelAssociatesLibrary
    SUBTYPE OF(IfcRelAssociates);
      RelatingLibrary : IfcLibrarySelect;
  END_ENTITY;

  ENTITY IfcRelDefinesByType
    SUBTYPE OF(IfcRelDefines);
      RelatingType : IfcTypeObject;
  END_ENTITY;

  ENTITY IfcRelOverridesProperties
    SUBTYPE OF(IfcRelDefinesByProperties);
      OverridingProperties : SET [1:?] OF IfcProperty;
    WHERE
      WR1 : SIZEOF(SELF\IfcRelDefines.RelatedObjects) = 1;
  END_ENTITY;

  ENTITY IfcProject
    SUBTYPE OF(IfcObject);
      LongName               : OPTIONAL IfcLabel;
      Phase                  : OPTIONAL IfcLabel;
      RepresentationContexts : SET [1:?] OF IfcRepresentationContext;
      UnitsInContext         : IfcUnitAssignment;
    WHERE
      WR1 : EXISTS(SELF\IfcRoot.Name);
  END_ENTITY;

  ENTITY IfcProxy
    SUBTYPE OF(IfcProduct);
      ProxyType : IfcObjectTypeEnum;
      Tag       : OPTIONAL IfcLabel;
    WHERE
      WR1 : EXISTS(SELF\IfcRoot.Name);
  END_ENTITY;

  RULE IfcSingleProjectInstance FOR
    (IfcProject);
    WHERE
      WR1 : SIZEOF(IfcProject) <= 1;
  END_RULE;

  RULE IfcPlacementNotShared FOR
    (IfcObjectPlacement);
        LOCAL
          Count : INTEGER := 0;
        END_LOCAL;
        IF (SIZEOF(IfcObjectPlacement) > 0)
        THEN
          REPEAT i := LOINDEX(IfcObjectPlacement) TO HIINDEX(IfcObjectPlacement);
            IF (SIZEOF(USEDIN(IfcObjectPlacement[i], 'IFC2X_FINAL.IFCPRODUCT.OBJECTPLACEMENT')) <= 1)
            THEN 
              Count := Count + 1;
            END_IF;
          END_REPEAT;
        END_IF;
    WHERE
      WR1 : Count = SIZEOF(IfcObjectPlacement);
  END_RULE;

  RULE IfcRepresentationContextSameWCS FOR
    (IfcGeometricRepresentationContext);
       LOCAL
          Count : INTEGER := 0;    
       END_LOCAL;
        IF (SIZEOF(IfcGeometricRepresentationContext) > 0)
        THEN
          REPEAT i := 1 TO HIINDEX(IfcGeometricRepresentationContext);
            IF (IfcGeometricRepresentationContext[1].WorldCoordinateSystem :=: IfcGeometricRepresentationContext[i].WorldCoordinateSystem)
            THEN 
              Count := Count + 1;
            ELSE
              IF ((IfcGeometricRepresentationContext[1].WorldCoordinateSystem.P[1].DirectionRatios[1] 
                      = IfcGeometricRepresentationContext[i].WorldCoordinateSystem.P[1].DirectionRatios[1])
                   AND (IfcGeometricRepresentationContext[1].WorldCoordinateSystem.P[1].DirectionRatios[2] 
                      = IfcGeometricRepresentationContext[i].WorldCoordinateSystem.P[1].DirectionRatios[2])
                   AND (NVL(IfcGeometricRepresentationContext[1].WorldCoordinateSystem.P[1].DirectionRatios[3],0.) 
                      = NVL(IfcGeometricRepresentationContext[i].WorldCoordinateSystem.P[1].DirectionRatios[3],0.))
                   AND (IfcGeometricRepresentationContext[1].WorldCoordinateSystem.P[2].DirectionRatios[1] 
                      = IfcGeometricRepresentationContext[i].WorldCoordinateSystem.P[2].DirectionRatios[1])
                   AND (IfcGeometricRepresentationContext[1].WorldCoordinateSystem.P[2].DirectionRatios[2] 
                      = IfcGeometricRepresentationContext[i].WorldCoordinateSystem.P[2].DirectionRatios[2])
                   AND (NVL(IfcGeometricRepresentationContext[1].WorldCoordinateSystem.P[2].DirectionRatios[3],0.) 
                      = NVL(IfcGeometricRepresentationContext[i].WorldCoordinateSystem.P[2].DirectionRatios[3],0.))
                   AND (IfcGeometricRepresentationContext[1].WorldCoordinateSystem.Location.Coordinates[1] 
                      = IfcGeometricRepresentationContext[i].WorldCoordinateSystem.Location.Coordinates[1])
                   AND (IfcGeometricRepresentationContext[1].WorldCoordinateSystem.Location.Coordinates[2] 
                      = IfcGeometricRepresentationContext[i].WorldCoordinateSystem.Location.Coordinates[2])
                   AND (NVL(IfcGeometricRepresentationContext[1].WorldCoordinateSystem.Location.Coordinates[3],0.) 
                      = NVL(IfcGeometricRepresentationContext[i].WorldCoordinateSystem.Location.Coordinates[3],0.)))
              THEN
                Count := Count + 1;
              END_IF;
            END_IF;
          END_REPEAT;
        END_IF;
    WHERE
      WR1 : Count = SIZEOF(IfcGeometricRepresentationContext);
  END_RULE;

  FUNCTION IfcCorrectObjectAssignment
    (Constraint: IfcObjectTypeEnum; Objects : SET[1:?] OF IfcObject)
    : LOGICAL ;
    
  LOCAL
    Count : INTEGER := 0;
  END_LOCAL;
  
    IF (NOT(EXISTS(Constraint)) OR (Constraint = IfcObjectTypeEnum.NOTDEFINED))
    THEN 
      RETURN(?);
      ELSE
      IF (Constraint = IfcObjectTypeEnum.PRODUCT)
      THEN
        Count := SIZEOF(QUERY(temp <* Objects | NOT('IFC2X_FINAL.IFCPRODUCT' IN TYPEOF(temp))));
        RETURN(Count = 0);
        ELSE
        IF (Constraint = IfcObjectTypeEnum.PROCESS)
        THEN
          Count := SIZEOF(QUERY(temp <* Objects | NOT('IFC2X_FINAL.IFCPROCESS' IN TYPEOF(temp))));
          RETURN(Count = 0);
          ELSE
          IF (Constraint = IfcObjectTypeEnum.CONTROL)
          THEN
            Count := SIZEOF(QUERY(temp <* Objects | NOT('IFC2X_FINAL.IFCCONTROL' IN TYPEOF(temp))));
            RETURN(Count = 0);
            ELSE
            IF (Constraint = IfcObjectTypeEnum.RESOURCE)
            THEN
              Count := SIZEOF(QUERY(temp <* Objects | NOT('IFC2X_FINAL.IFCRESOURCE' IN TYPEOF(temp))));
              RETURN(Count = 0);
              ELSE
              IF (Constraint = IfcObjectTypeEnum.ACTOR)
              THEN
                Count := SIZEOF(QUERY(temp <* Objects | NOT('IFC2X_FINAL.IFCACTOR' IN TYPEOF(temp))));
                RETURN(Count = 0);
                ELSE
                IF (Constraint = IfcObjectTypeEnum.GROUP)
                THEN
                  Count := SIZEOF(QUERY(temp <* Objects | NOT('IFC2X_FINAL.IFCGROUP' IN TYPEOF(temp))));
                  RETURN(Count = 0);
                  ELSE
                  IF (Constraint = IfcObjectTypeEnum.PROJECT)
                  THEN
                    Count := SIZEOF(QUERY(temp <* Objects | NOT('IFC2X_FINAL.IFCPROJECT' IN TYPEOF(temp))));
                    RETURN(Count = 0);
                  END_IF;
                END_IF;
              END_IF;
            END_IF;
          END_IF;
        END_IF;
      END_IF;
    END_IF;
    RETURN(?);
  END_FUNCTION;

-- END_SCHEMA;
-- SCHEMA IFCPRODUCTEXTENSION;

  TYPE IfcInternalOrExternalEnum = ENUMERATION OF
    (INTERNAL,
     EXTERNAL,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcPhysicalOrVirtualEnum = ENUMERATION OF
    (PHYSICAL,
     VIRTUAL,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcElementCompositionEnum = ENUMERATION OF
    (COMPLEX,
     ELEMENT,
     PARTIAL);
  END_TYPE;

  TYPE IfcTransportElementTypeEnum = ENUMERATION OF
    (ELEVATOR,
     ESCALATOR,
     MOVINGWALKWAY,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  ENTITY IfcZone
    SUBTYPE OF(IfcGroup);
    WHERE
      WR1 : SIZEOF (QUERY (temp <* SELF\IfcGroup.IsGroupedBy.RelatedObjects 
            | NOT(('IFC2X_FINAL.IFCZONE' IN TYPEOF(temp)) OR 
            ('IFC2X_FINAL.IFCSPACE' IN TYPEOF(temp))) )) = 0;
  END_ENTITY;

  ENTITY IfcSystem
    SUBTYPE OF(IfcGroup);
    INVERSE
      ServicesBuildings : SET [0:1] OF IfcRelServicesBuildings FOR RelatingSystem;
    WHERE
      WR1 : SIZEOF (QUERY (temp <* SELF\IfcGroup.IsGroupedBy.RelatedObjects |  
              NOT(('IFC2X_FINAL.IFCELEMENT' IN TYPEOF(temp))
              OR ('IFC2X_FINAL.IFCSYSTEM' IN TYPEOF(temp))))) = 0;
  END_ENTITY;

  ENTITY IfcRelServicesBuildings
    SUBTYPE OF(IfcRelConnects);
      RelatingSystem   : IfcSystem;
      RelatedBuildings : SET [1:?] OF IfcBuilding;
  END_ENTITY;

  ENTITY IfcRelVoidsElement
    SUBTYPE OF(IfcRelConnects);
      RelatingBuildingElement : IfcBuildingElement;
      RelatedOpeningElement   : IfcOpeningElement;
  END_ENTITY;

  ENTITY IfcBuildingElement
    ABSTRACT SUPERTYPE OF (ONEOF(
      IfcBuildingElementProxy
     ,IfcBeam
     ,IfcColumn
     ,IfcCovering
     ,IfcCurtainWall
     ,IfcDoor
     ,IfcRailing
     ,IfcRamp
     ,IfcRampFlight
     ,IfcRoof
     ,IfcSlab
     ,IfcStair
     ,IfcStairFlight
     ,IfcWall
     ,IfcWindow
    ))
    SUBTYPE OF(IfcElement);
    INVERSE
      ProvidesBoundaries : SET OF IfcRelSpaceBoundary FOR RelatedBuildingElement;
      HasOpenings        : SET OF IfcRelVoidsElement FOR RelatingBuildingElement;
      FillsVoids         : SET [0:1] OF IfcRelFillsElement FOR RelatedBuildingElement;
  END_ENTITY;

  ENTITY IfcElement
    ABSTRACT SUPERTYPE OF (ONEOF(IfcBuildingElement, IfcOpeningElement, 
      IfcFurnishingElement, IfcElectricalElement, IfcDistributionElement, 
      IfcTransportElement, IfcEquipmentElement))
    SUBTYPE OF(IfcProduct);
      Tag                  : OPTIONAL IfcIdentifier;
    INVERSE
      ConnectedTo          : SET OF IfcRelConnectsElements FOR RelatingElement;
      ConnectedFrom        : SET OF IfcRelConnectsElements FOR RelatedElement;
      ContainedInStructure : SET [0:1] OF IfcRelContainedInSpatialStructure FOR RelatedElements;
  END_ENTITY;

  ENTITY IfcSpatialStructureElement
    ABSTRACT SUPERTYPE OF (ONEOF(IfcBuilding, IfcBuildingStorey, IfcSpace, IfcSite))
    SUBTYPE OF(IfcProduct);
      LongName         : OPTIONAL IfcLabel;
      CompositionType  : IfcElementCompositionEnum;
    INVERSE
      ContainsElements : SET OF IfcRelContainedInSpatialStructure FOR RelatingStructure;
  END_ENTITY;

  ENTITY IfcBuilding
    SUBTYPE OF(IfcSpatialStructureElement);
      ElevationOfRefHeight : OPTIONAL IfcLengthMeasure;
      ElevationOfTerrain   : OPTIONAL IfcLengthMeasure;
      BuildingAddress      : OPTIONAL IfcPostalAddress;
    INVERSE
      ServicedBySystems    : SET OF IfcRelServicesBuildings FOR RelatedBuildings;
  END_ENTITY;

  ENTITY IfcBuildingStorey
    SUBTYPE OF(IfcSpatialStructureElement);
      Elevation : OPTIONAL IfcLengthMeasure;
  END_ENTITY;

  ENTITY IfcSpace
    SUBTYPE OF(IfcSpatialStructureElement);
      InteriorOrExteriorSpace : IfcInternalOrExternalEnum;
      ElevationWithFlooring   : OPTIONAL IfcLengthMeasure;
    INVERSE
      BoundedBy               : SET OF IfcRelSpaceBoundary FOR RelatingSpace;
  END_ENTITY;

  ENTITY IfcRelSpaceBoundary
    SUBTYPE OF(IfcRelConnects);
      RelatingSpace              : IfcSpace;
      RelatedBuildingElement     : OPTIONAL IfcBuildingElement;
      ConnectionGeometry         : OPTIONAL IfcConnectionSurfaceGeometry;
      PhysicalOrVirtualBoundary  : IfcPhysicalOrVirtualEnum;
      InternalOrExternalBoundary : IfcInternalOrExternalEnum;
    WHERE
      WR1 : ((PhysicalOrVirtualBoundary = IfcPhysicalOrVirtualEnum.Physical) AND (EXISTS(RelatedBuildingElement))) OR 
            ((PhysicalOrVirtualBoundary = IfcPhysicalOrVirtualEnum.Virtual) AND (NOT(EXISTS(RelatedBuildingElement)))) OR 
             (PhysicalOrVirtualBoundary = IfcPhysicalOrVirtualEnum.NotDefined);
  END_ENTITY;

  ENTITY IfcSite
    SUBTYPE OF(IfcSpatialStructureElement);
      RefLatitude     : OPTIONAL IfcCompoundPlaneAngleMeasure;
      RefLongitude    : OPTIONAL IfcCompoundPlaneAngleMeasure;
      RefElevation    : OPTIONAL IfcLengthMeasure;
      LandTitleNumber : OPTIONAL IfcLabel;
      SiteAddress     : OPTIONAL IfcPostalAddress;
  END_ENTITY;

  ENTITY IfcRelContainedInSpatialStructure
    SUBTYPE OF(IfcRelConnects);
      RelatedElements   : SET [1:?] OF IfcElement;
      RelatingStructure : IfcSpatialStructureElement;
  END_ENTITY;

  ENTITY IfcGrid
    SUBTYPE OF(IfcProduct);
      UAxes : LIST [1:?] OF UNIQUE IfcGridAxis;
      VAxes : LIST [1:?] OF UNIQUE IfcGridAxis;
      WAxes : OPTIONAL LIST [1:?] OF UNIQUE IfcGridAxis;
    WHERE
      WR1 : EXISTS(SELF\IfcProduct.ObjectPlacement);
      WR2 : NOT(EXISTS(SELF\IfcProduct.Representation));
  END_ENTITY;

  ENTITY IfcOpeningElement
    SUBTYPE OF(IfcElement);
    INVERSE
      VoidsElements : IfcRelVoidsElement FOR RelatedOpeningElement;
      HasFillings   : SET OF IfcRelFillsElement FOR RelatingOpeningElement;
  END_ENTITY;

  ENTITY IfcRelFillsElement
    SUBTYPE OF(IfcRelConnects);
      RelatingOpeningElement : IfcOpeningElement;
      RelatedBuildingElement : IfcBuildingElement;
  END_ENTITY;

  ENTITY IfcFurnishingElement
    SUPERTYPE OF (ONEOF(
      IfcBuiltIn
     ,IfcFurniture
     ,IfcSystemFurnitureElement
    ))
    SUBTYPE OF(IfcElement);
  END_ENTITY;

  ENTITY IfcElectricalElement
    SUPERTYPE OF (ONEOF(
      IfcElectricalAppliance
     ,IfcElectricMotor
     ,IfcLightFixture
     ,IfcOutlet
    ))
    SUBTYPE OF(IfcElement);
  END_ENTITY;

  ENTITY IfcDistributionElement
    SUPERTYPE OF (ONEOF(
      IfcControlElement
     ,IfcDistributionFlowElement
    ))
    SUBTYPE OF(IfcElement);
  END_ENTITY;

  ENTITY IfcTransportElement
    SUBTYPE OF(IfcElement);
      OperationType    : IfcTransportElementTypeEnum;
      CapacityByWeight : OPTIONAL IfcMassMeasure;
      CapacityByNumber : OPTIONAL IfcCountMeasure;
  END_ENTITY;

  ENTITY IfcEquipmentElement
    SUPERTYPE OF (ONEOF(
       IfcAssessory
      ,IfcDiscreteElement
    ))
    SUBTYPE OF(IfcElement);
  END_ENTITY;

  ENTITY IfcRelConnectsElements
    SUPERTYPE OF (ONEOF(
      IfcRelConnectsPathElements
     ,IfcRelConnectsPorts
    ))
    SUBTYPE OF(IfcRelConnects);
      ConnectionGeometry : OPTIONAL IfcConnectionGeometry;
      RelatingElement    : IfcElement;
      RelatedElement     : IfcElement;
    WHERE
      WR31 : RelatingElement :<>: RelatedElement;
  END_ENTITY;

  ENTITY IfcBuildingElementProxy
    SUBTYPE OF(IfcBuildingElement);
      CompositionType : OPTIONAL IfcElementCompositionEnum;
    WHERE
      WR1 : EXISTS(SELF\IfcRoot.Name);
  END_ENTITY;

  ENTITY IfcElementQuantity
    SUBTYPE OF(IfcPropertySetDefinition);
      MethodOfMeasurement : IfcLabel;
      Quantities          : SET [1:?] OF IfcPhysicalQuantity;
  END_ENTITY;

  ENTITY IfcRelAssociatesMaterial
    SUBTYPE OF(IfcRelAssociates);
      RelatingMaterial : IfcMaterialSelect;
    WHERE
      WR1 : SIZEOF(QUERY(temp <* SELF\IfcRelAssociates.RelatedObjects | 
            'IFC2X_FINAL.IFCOPENINGELEMENT' IN TYPEOF(temp))) = 0;
      WR2 : SIZEOF(QUERY(temp <* SELF\IfcRelAssociates.RelatedObjects | 
            NOT('IFC2X_FINAL.IFCELEMENT' IN TYPEOF(temp)))) = 0;
  END_ENTITY;

-- END_SCHEMA;
-- SCHEMA IFCSHAREDBLDGELEMENTS;

  TYPE IfcConnectionTypeEnum = ENUMERATION OF
    (ATPATH,
     ATSTART,
     ATEND,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcCoveringTypeEnum = ENUMERATION OF
    (CEILING,
     FLOORING,
     CLADDING,
     ROOFING,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcSlabTypeEnum = ENUMERATION OF
    (FLOOR,
     ROOF,
     LANDING,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcRoofTypeEnum = ENUMERATION OF
    (FLAT_ROOF,
     SHED_ROOF,
     GABLE_ROOF,
     HIP_ROOF,
     HIPPED_GABLE_ROOF,
     GAMBREL_ROOF,
     MANSARD_ROOF,
     BARREL_ROOF,
     RAINBOW_ROOF,
     BUTTERFLY_ROOF,
     PAVILION_ROOF,
     DOME_ROOF,
     FREEFORM,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcStairTypeEnum = ENUMERATION OF
    (STRAIGHT_RUN_STAIR,
     TWO_STRAIGHT_RUN_STAIR,
     QUARTER_WINDING_STAIR,
     QUARTER_TURN_STAIR,
     HALF_WINDING_STAIR,
     HALF_TURN_STAIR,
     TWO_QUARTER_WINDING_STAIR,
     TWO_QUARTER_TURN_STAIR,
     THREE_QUARTER_WINDING_STAIR,
     THREE_QUARTER_TURN_STAIR,
     SPIRAL_STAIR,
     DOUBLE_RETURN_STAIR,
     CURVED_RUN_STAIR,
     TWO_CURVED_RUN_STAIR,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcRampTypeEnum = ENUMERATION OF
    (STRAIGHT_RUN_RAMP,
     TWO_STRAIGHT_RUN_RAMP,
     QUARTER_TURN_RAMP,
     TWO_QUARTER_TURN_RAMP,
     HALF_TURN_RAMP,
     SPIRAL_RAMP,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcDoorStyleOperationEnum = ENUMERATION OF
    (SINGLE_SWING_LEFT,
     SINGLE_SWING_RIGHT,
     DOUBLE_DOOR_SINGLE_SWING,
     DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT,
     DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT,
     DOUBLE_SWING_LEFT,
     DOUBLE_SWING_RIGHT,
     DOUBLE_DOOR_DOUBLE_SWING,
     SLIDING_TO_LEFT,
     SLIDING_TO_RIGHT,
     DOUBLE_DOOR_SLIDING,
     FOLDING_TO_LEFT,
     FOLDING_TO_RIGHT,
     DOUBLE_DOOR_FOLDING,
     REVOLVING,
     ROLLINGUP,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcDoorStyleConstructionEnum = ENUMERATION OF
    (ALUMINIUM,
     HIGH_GRADE_STEEL,
     STEEL,
     WOOD,
     ALUMINIUM_WOOD,
     ALUMINIUM_PLASTIC,
     PLASTIC,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcWindowStyleConstructionEnum = ENUMERATION OF
    (ALUMINIUM,
     HIGH_GRADE_STEEL,
     STEEL,
     WOOD,
     ALUMINIUM_WOOD,
     PLASTIC,
     OTHER_CONSTRUCTION,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcWindowStyleOperationEnum = ENUMERATION OF
    (SINGLE_PANEL,
     DOUBLE_PANEL_VERTICAL,
     DOUBLE_PANEL_HORIZONTAL,
     TRIPLE_PANEL_VERTICAL,
     TRIPLE_PANEL_BOTTOM,
     TRIPLE_PANEL_TOP,
     TRIPLE_PANEL_LEFT,
     TRIPLE_PANEL_RIGHT,
     TRIPLE_PANEL_HORIZONTAL,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcDoorPanelOperationEnum = ENUMERATION OF
    (SWINGING,
     DOUBLE_ACTING,
     SLIDING,
     FOLDING,
     REVOLVING,
     ROLLINGUP,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcDoorPanelPositionEnum = ENUMERATION OF
    (LEFT,
     MIDDLE,
     RIGHT,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcWindowPanelOperationEnum = ENUMERATION OF
    (SIDEHUNGRIGHTHAND,
     SIDEHUNGLEFTHAND,
     TILTANDTURNRIGHTHAND,
     TILTANDTURNLEFTHAND,
     TOPHUNG,
     BOTTOMHUNG,
     PIVOTHORIZONTAL,
     PIVOTVERTICAL,
     SLIDINGHORIZONTAL,
     SLIDINGVERTICAL,
     REMOVABLECASEMENT,
     FIXEDCASEMENT,
     OTHEROPERATION,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcWindowPanelPositionEnum = ENUMERATION OF
    (LEFT,
     MIDDLE,
     RIGHT,
     BOTTOM,
     TOP,
     NOTDEFINED);
  END_TYPE;

  ENTITY IfcRelCoversBldgElements
    SUBTYPE OF(IfcRelConnects);
      RelatingBuildingElement : IfcBuildingElement;
      RelatedCoverings        : LIST [1:?] OF IfcCovering;
  END_ENTITY;

  ENTITY IfcRelConnectsPathElements
    SUBTYPE OF(IfcRelConnectsElements);
      RelatingPriorities     : LIST OF INTEGER;
      RelatedPriorities      : LIST OF INTEGER;
      RelatedConnectionType  : IfcConnectionTypeEnum;
      RelatingConnectionType : IfcConnectionTypeEnum;
    DERIVE
      RelatedLayerCount      : INTEGER := IfcNoOfLayers(SELF\IfcRelConnectsElements.RelatedElement);
      RelatingLayerCount     : INTEGER := IfcNoOfLayers(SELF\IfcRelConnectsElements.RelatingElement);
  END_ENTITY;

  ENTITY IfcWall
    SUPERTYPE OF (IfcWallStandardCase)
    SUBTYPE OF(IfcBuildingElement);
    WHERE
      WR1 : SIZEOF (QUERY(temp <* SELF\IfcObject.HasAssociations |
              'IFC2X_FINAL.IFCRELASSOCIATESMATERIAL' IN TYPEOF(temp)
              )) <= 1;
  END_ENTITY;

  ENTITY IfcWallStandardCase
    SUBTYPE OF(IfcWall);
    WHERE
      WR1 : SIZEOF (QUERY(temp <* USEDIN(SELF, 'IFC2X_FINAL.IFCRELASSOCIATES.RELATEDOBJECTS') |
                          ('IFC2X_FINAL.IFCRELASSOCIATESMATERIAL' IN TYPEOF(temp)) AND
                          ('IFC2X_FINAL.IFCMATERIALLAYERSETUSAGE' IN TYPEOF(temp.RelatingMaterial))
                          )) = 1;
  END_ENTITY;

  ENTITY IfcCovering
    SUBTYPE OF(IfcBuildingElement);
      PredefinedType : IfcCoveringTypeEnum;
    INVERSE
      Covers         : SET [0:1] OF IfcRelCoversBldgElements FOR RelatedCoverings;
    WHERE
      WR1 : SIZEOF (QUERY(temp <* SELF\IfcObject.HasAssociations |
              'IFC2X_FINAL.IFCRELASSOCIATESMATERIAL' IN TYPEOF(temp)
              )) <= 1;
      WR2 : (PredefinedType <> IfcCoveringTypeEnum.UserDefined) OR 
            ((PredefinedType = IfcCoveringTypeEnum.UserDefined) AND EXISTS(SELF\IfcObject.ObjectType));
  END_ENTITY;

  ENTITY IfcColumn
    SUBTYPE OF(IfcBuildingElement);
  END_ENTITY;

  ENTITY IfcBeam
    SUBTYPE OF(IfcBuildingElement);
  END_ENTITY;

  ENTITY IfcDoor
    SUBTYPE OF(IfcBuildingElement);
      OverallHeight : OPTIONAL IfcPositiveLengthMeasure;
      OverallWidth  : OPTIONAL IfcPositiveLengthMeasure;
  END_ENTITY;

  ENTITY IfcWindow
    SUBTYPE OF(IfcBuildingElement);
      OverallHeight : OPTIONAL IfcPositiveLengthMeasure;
      OverallWidth  : OPTIONAL IfcPositiveLengthMeasure;
  END_ENTITY;

  ENTITY IfcSlab
    SUBTYPE OF(IfcBuildingElement);
      PredefinedType : IfcSlabTypeEnum;
    WHERE
      WR2 : (PredefinedType <> IfcSlabTypeEnum.USERDEFINED) OR
            ((PredefinedType = IfcSlabTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType));
  END_ENTITY;

  ENTITY IfcRoof
    SUBTYPE OF(IfcBuildingElement);
      ShapeType : IfcRoofTypeEnum;
    WHERE
      WR1 : (HIINDEX(SELF\IfcObject.IsDecomposedBy) = 0) OR 
            ((HIINDEX(SELF\IfcObject.IsDecomposedBy) = 1) AND (NOT(EXISTS(SELF\IfcProduct.Representation))));
  END_ENTITY;

  ENTITY IfcStair
    SUBTYPE OF(IfcBuildingElement);
      ShapeType : IfcStairTypeEnum;
    WHERE
      WR1 : (HIINDEX(SELF\IfcObject.IsDecomposedBy) = 0) OR ((HIINDEX(SELF\IfcObject.IsDecomposedBy) = 1) AND 
            (NOT(EXISTS(SELF\IfcProduct.Representation))));
  END_ENTITY;

  ENTITY IfcStairFlight
    SUBTYPE OF(IfcBuildingElement);
      NumberOfRiser  : OPTIONAL INTEGER;
      NumberOfTreads : OPTIONAL INTEGER;
      RiserHeight    : OPTIONAL IfcPositiveLengthMeasure;
      TreadLength    : OPTIONAL IfcPositiveLengthMeasure;
  END_ENTITY;

  ENTITY IfcRamp
    SUBTYPE OF(IfcBuildingElement);
      ShapeType : IfcRampTypeEnum;
    WHERE
      WR1 : (HIINDEX(SELF\IfcObject.IsDecomposedBy) = 0) OR ((HIINDEX(SELF\IfcObject.IsDecomposedBy) = 1) AND 
            (NOT(EXISTS(SELF\IfcProduct.Representation))));
  END_ENTITY;

  ENTITY IfcRampFlight
    SUBTYPE OF(IfcBuildingElement);
  END_ENTITY;

  ENTITY IfcDoorStyle
    SUBTYPE OF(IfcTypeProduct);
      OperationType            : IfcDoorStyleOperationEnum;
      ConstructionType         : IfcDoorStyleConstructionEnum;
      ParameterTakesPrecedence : BOOLEAN;
      Sizeable                 : BOOLEAN;
  END_ENTITY;

  ENTITY IfcWindowStyle
    SUBTYPE OF(IfcTypeProduct);
      ConstructionType         : IfcWindowStyleConstructionEnum;
      OperationType            : IfcWindowStyleOperationEnum;
      ParameterTakesPrecedence : BOOLEAN;
      Sizeable                 : BOOLEAN;
  END_ENTITY;

  ENTITY IfcDoorLiningProperties
    SUBTYPE OF(IfcPropertySetDefinition);
      LiningDepth        : OPTIONAL IfcPositiveLengthMeasure;
      LiningThickness    : OPTIONAL IfcPositiveLengthMeasure;
      ThresholdDepth     : OPTIONAL IfcPositiveLengthMeasure;
      ThresholdThickness : OPTIONAL IfcPositiveLengthMeasure;
      TransomThickness   : OPTIONAL IfcPositiveLengthMeasure;
      TransomOffset      : OPTIONAL IfcLengthMeasure;
      LiningOffset       : OPTIONAL IfcLengthMeasure;
      ThresholdOffset    : OPTIONAL IfcLengthMeasure;
      CasingThickness    : OPTIONAL IfcPositiveLengthMeasure;
      CasingDepth        : OPTIONAL IfcPositiveLengthMeasure;
      ShapeAspectStyle   : OPTIONAL IfcShapeAspect;
    WHERE
      WR1 : (EXISTS(LiningDepth) AND EXISTS(LiningThickness)) XOR
            (NOT(EXISTS(LiningDepth)) AND NOT(EXISTS(LiningThickness)));
      WR2 : (EXISTS(ThresholdDepth) AND EXISTS(ThresholdThickness)) XOR
            (NOT(EXISTS(ThresholdDepth)) AND NOT(EXISTS(ThresholdThickness)));
      WR3 : (EXISTS(TransomOffset) AND EXISTS(TransomThickness)) XOR
            (NOT(EXISTS(TransomOffset)) AND NOT(EXISTS(TransomThickness)));
      WR4 : (EXISTS(CasingDepth) AND EXISTS(CasingThickness)) XOR
            (NOT(EXISTS(CasingDepth)) AND NOT(EXISTS(CasingThickness)));
      WR5 : EXISTS(SELF\IfcPropertySetDefinition.DefinesType[1]) AND 
            ('IFC2X_FINAL.IFCDOORSTYLE' IN TYPEOF(SELF\IfcPropertySetDefinition.DefinesType[1]));
  END_ENTITY;

  ENTITY IfcDoorPanelProperties
    SUBTYPE OF(IfcPropertySetDefinition);
      PanelDepth       : OPTIONAL IfcPositiveLengthMeasure;
      PanelOperation   : IfcDoorPanelOperationEnum;
      PanelWidth       : OPTIONAL IfcNormalisedRatioMeasure;
      PanelPosition    : IfcDoorPanelPositionEnum;
      ShapeAspectStyle : OPTIONAL IfcShapeAspect;
    WHERE
      WR1 : EXISTS(SELF\IfcPropertySetDefinition.DefinesType[1]) AND 
            ('IFC2X_FINAL.IFCDOORSTYLE' IN TYPEOF(SELF\IfcPropertySetDefinition.DefinesType[1]));
  END_ENTITY;

  ENTITY IfcWindowLiningProperties
    SUBTYPE OF(IfcPropertySetDefinition);
      LiningDepth         : OPTIONAL IfcPositiveLengthMeasure;
      LiningThickness     : OPTIONAL IfcPositiveLengthMeasure;
      TransomThickness    : OPTIONAL IfcPositiveLengthMeasure;
      MullionThickness    : OPTIONAL IfcPositiveLengthMeasure;
      FirstTransomOffset  : OPTIONAL IfcNormalisedRatioMeasure;
      SecondTransomOffset : OPTIONAL IfcNormalisedRatioMeasure;
      FirstMullionOffset  : OPTIONAL IfcNormalisedRatioMeasure;
      SecondMullionOffset : OPTIONAL IfcNormalisedRatioMeasure;
      ShapeAspectStyle    : OPTIONAL IfcShapeAspect;
    WHERE
      WR1 : (EXISTS(LiningDepth) AND EXISTS(LiningThickness)) XOR
            (NOT(EXISTS(LiningDepth)) AND NOT(EXISTS(LiningThickness)));
  END_ENTITY;

  ENTITY IfcWindowPanelProperties
    SUBTYPE OF(IfcPropertySetDefinition);
      OperationType    : IfcWindowPanelOperationEnum;
      PanelPosition    : IfcWindowPanelPositionEnum;
      FrameDepth       : OPTIONAL IfcPositiveLengthMeasure;
      FrameThickness   : OPTIONAL IfcPositiveLengthMeasure;
      ShapeAspectStyle : OPTIONAL IfcShapeAspect;
  END_ENTITY;

  FUNCTION IfcNoOfLayers
      (Element : IfcElement )
                  : INTEGER;
      
      LOCAL
        Association : BAG OF IfcRelAssociates := [];
        MaterialAssociation : SET OF IfcRelAssociatesMaterial := [];
      END_LOCAL;
      
      Association := USEDIN(Element, 'IFC2X_FINAL.IFCRELASSOCIATES.RELATEDOBJECTS');
   
      IF SIZEOF (Association) > 0 THEN
        REPEAT i := 1 TO HIINDEX(Association);
          IF ('IFC2X_FINAL.IFCRELASSOCIATESMATERIAL' IN TYPEOF(Association[i])) THEN 
            MaterialAssociation := MaterialAssociation + Association[i];
          END_IF;
        END_REPEAT;
      END_IF;
      
      IF (SIZEOF(MaterialAssociation) <> 1) THEN
        RETURN (?);
      ELSE
        IF 'IFC2X_FINAL.IFCMATERIAL' IN TYPEOF(MaterialAssociation[1].RelatingMaterial) THEN
           RETURN (1);
        END_IF;
        IF 'IFC2X_FINAL.IFCMATERIALLAYERSETUSAGE' IN TYPEOF(MaterialAssociation[1].RelatingMaterial) THEN
           RETURN (SIZEOF(MaterialAssociation[1].RelatingMaterial.ForLayerSet.MaterialLayers));
        END_IF;
        IF 'IFC2X_FINAL.IFCMATERIALLIST' IN TYPEOF(MaterialAssociation[1].RelatingMaterial) THEN
           RETURN (?);
        END_IF;
      END_IF;
    
      RETURN (?);
  END_FUNCTION;

-- END_SCHEMA;

(* end of platform - IFC2x addendum 1 *)
(* begin of non-platform part  - IFC2x addendum 1 *)

-- SCHEMA IFCAPPROVALRESOURCE;

  TYPE IfcApprovalStatusEnum = ENUMERATION OF
    (APPROVED,
     PROCESSED,
     ONHOLD,
     SUBMITTED,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  ENTITY IfcApproval;
      Description        : IfcText;
      AuthorizingAgent   : OPTIONAL IfcActorSelect;
      RequestFrom        : IfcActorSelect;
      RequestTo          : IfcActorSelect;
      RequestingDate     : IfcDateTimeSelect;
      RequestedDate      : OPTIONAL IfcDateTimeSelect;
      ApprovalDate       : OPTIONAL IfcDateTimeSelect;
      ApprovalStatus     : OPTIONAL IfcApprovalStatusEnum;
      ApprovalConstraint : OPTIONAL IfcText;
  END_ENTITY;

-- END_SCHEMA;
-- SCHEMA IFCCONSTRAINTRESOURCE;

  TYPE IfcBenchmarkEnum = ENUMERATION OF
    (GREATERTHAN,
     GREATERTHANOREQUALTO,
     LESSTHAN,
     LESSTHANOREQUALTO,
     EQUALTO,
     NOTEQUALTO,
     TARGETWITHTOLERANCE,
     RANGE,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcMetricDataEnum = ENUMERATION OF
    (SCALAR,
     VECTOR,
     TIMESERIES,
     TABLE,
     GRAPH,
     DISTRIBUTION,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcMetricValueSelect = SELECT
    (IfcMeasureWithUnit,
     IfcTable);
  END_TYPE;

  TYPE IfcObjectiveEnum = ENUMERATION OF
    (CODECOMPLIANCE,
     DESIGNINTENT,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcConstraintEnum = ENUMERATION OF
    (HARD,
     SOFT,
     ADVISORY,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcAggregatorEnum = ENUMERATION OF
    (LOGICALAND,
     LOGICALOR,
     LOGICALXOR,
     LOGICALNOT);
  END_TYPE;

  TYPE IfcConstraintIntentEnum = ENUMERATION OF
    (RATIONALE,
     EXPECTEDPERFORMANCE,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  ENTITY IfcConstraint
    SUPERTYPE OF (ONEOF(IfcMetric, IfcObjective));
      ConstraintGrade  : IfcConstraintEnum;
      Description      : OPTIONAL IfcText;
      ConstraintSource : OPTIONAL IfcLabel;
      Name             : IfcLabel;
      CreatingActor    : OPTIONAL IfcActorSelect;
      CreationTime     : OPTIONAL IfcDateTimeSelect;
    INVERSE
      Aggregates       : SET OF IfcConstraintAggregationRelationship FOR RelatingConstraint;
      IsAggregatedIn   : SET OF IfcConstraintAggregationRelationship FOR RelatedConstraints;
    WHERE
      WR11 : NOT(ConstraintGrade = IfcConstraintEnum.USERDEFINED) OR EXISTS(Description) OR EXISTS(ConstraintSource);
  END_ENTITY;

  ENTITY IfcMetric
    SUPERTYPE OF (IfcMetricBenchmark)
    SUBTYPE OF(IfcConstraint);
      Values : LIST [1:?] OF IfcMetricValue;
  END_ENTITY;

  ENTITY IfcMetricBenchmark
    SUBTYPE OF(IfcMetric);
      Benchmark : IfcBenchmarkEnum;
    WHERE
      WR31 : NOT(Benchmark = IfcBenchmarkEnum.USERDEFINED) OR EXISTS(SELF\IfcConstraint.Description) OR EXISTS(SELF\IfcConstraint.ConstraintSource);
  END_ENTITY;

  ENTITY IfcMetricValue;
      DataType    : IfcMetricDataEnum;
      DataValue   : IfcMetricValueSelect;
      ValueSource : IfcLabel;
  END_ENTITY;

  ENTITY IfcObjective
    SUBTYPE OF(IfcConstraint);
      ObjectiveQualifier : IfcObjectiveEnum;
      BenchmarkValues    : LIST OF IfcMetric;
      ResultValues       : LIST OF IfcMetric;
    WHERE
      WR21 : NOT(ObjectiveQualifier = IfcObjectiveEnum.USERDEFINED) OR EXISTS(SELF\IfcConstraint.Description) OR EXISTS(SELF\IfcConstraint.ConstraintSource);
  END_ENTITY;

  ENTITY IfcConstraintAggregationRelationship;
      LogicalAggregator  : IfcAggregatorEnum;
      RelatingConstraint : IfcConstraint;
      RelatedConstraints : LIST [1:?] OF UNIQUE IfcConstraint;
    WHERE
      WR11 : SIZEOF(QUERY(Temp <* RelatedConstraints | RelatingConstraint :=: Temp)) = 0;
  END_ENTITY;

  ENTITY IfcActionTimeControl;
      ConstraintType : IfcLabel;
      ContraintTime  : IfcDateTimeSelect;
  END_ENTITY;

-- END_SCHEMA;
-- SCHEMA IFCCOSTRESOURCE;

  TYPE IfcCostModifierBasisEnum = ENUMERATION OF
    (RUNNING,
     STATIC);
  END_TYPE;

  TYPE IfcCostModifierValueSelect = SELECT
    (IfcCostModifierValue,
     IfcRatioMeasure);
  END_TYPE;

  TYPE IfcCostOperatorEnum = ENUMERATION OF
    (ADDVALUE,
     SUBTRACTVALUE,
     MULTIPLYVALUE);
  END_TYPE;

  TYPE IfcQuantityRoundOffBasisEnum = ENUMERATION OF
    (ROUNDTOCLOSEST,
     ROUNDTUP,
     ROUNDTDOWN,
     NONE);
  END_TYPE;

  ENTITY IfcCostValue;
      BaseCostValue     : OPTIONAL IfcMonetaryMeasure;
      FinalCostValue    : OPTIONAL IfcMonetaryMeasure;
      Currency          : OPTIONAL IfcCurrencyEnum;
      UnitCostBasis     : OPTIONAL IfcMeasureWithUnit;
      CostType          : OPTIONAL IfcLabel;
      CostDate          : OPTIONAL IfcCalendarDate;
      CostModifiers     : OPTIONAL LIST [1:?] OF UNIQUE IfcCostModifier;
    INVERSE
      ValueOfComponents : SET [0:1] OF IfcCostValueRelationship FOR ComponentOf;
      IsComponentIn     : SET OF IfcCostValueRelationship FOR CostComponents;
      CostsReferenced   : SET OF IfcReferencesCostDocument FOR ReferencingCosts;
    WHERE
      WR1 : EXISTS(BaseCostValue) OR EXISTS(FinalCostValue) OR EXISTS(ValueOfComponents[1]);
  END_ENTITY;

  ENTITY IfcCostModifier;
      Purpose             : IfcText;
      ModifierValue       : IfcCostModifierValueSelect;
      ModifierDate        : IfcCalendarDate;
      CostOperator        : IfcCostOperatorEnum;
      ModifierBasis       : OPTIONAL IfcCostModifierBasisEnum;
    INVERSE
      ModifiedCost        : SET OF IfcCostValue FOR CostModifiers;
      ModifiersReferenced : SET OF IfcReferencesCostDocument FOR ReferencingModifiers;
  END_ENTITY;

  ENTITY IfcCostModifierValue;
      ModifierAmount : IfcMonetaryMeasure;
      Currency       : OPTIONAL IfcCurrencyEnum;
  END_ENTITY;

  ENTITY IfcReferencesCostDocument;
      ReferencedDocument   : IfcDocumentSelect;
      ReferencingCosts     : OPTIONAL SET [1:?] OF IfcCostValue;
      ReferencingModifiers : OPTIONAL SET [1:?] OF IfcCostModifier;
  END_ENTITY;

  ENTITY IfcCostValueRelationship;
      ComponentOf    : IfcCostValue;
      CostComponents : SET [1:?] OF IfcCostValue;
      Description    : OPTIONAL IfcText;
  END_ENTITY;

  ENTITY IfcCostQuantity;
      BaseQuantity      : OPTIONAL IfcMeasureWithUnit;
      FinalQuantity     : OPTIONAL IfcMeasureWithUnit;
      WasteFactor       : OPTIONAL IfcPositiveRatioMeasure;
      RoundOffIncrement : IfcReal;
      RoundOffBasis     : IfcQuantityRoundOffBasisEnum;
  END_ENTITY;

-- END_SCHEMA;
-- SCHEMA IFCMATERIALPROPERTYRESOURCE;

  ENTITY IfcMaterialProperties
    ABSTRACT SUPERTYPE OF (ONEOF(IfcMechanicalMaterialProperties, 
      IfcThermalMaterialProperties, IfcHygroscopicMaterialProperties, 
      IfcExtendedMaterialProperties, IfcGeneralMaterialProperties, 
      IfcOpticalMaterialProperties));
      Material : IfcMaterial;
  END_ENTITY;

  ENTITY IfcMechanicalMaterialProperties
    SUBTYPE OF(IfcMaterialProperties);
      DynamicViscosity : OPTIONAL IfcDynamicViscosityMeasure;
    UNIQUE
      UR31 : Material;
  END_ENTITY;

  ENTITY IfcThermalMaterialProperties
    SUBTYPE OF(IfcMaterialProperties);
      SpecificHeatCapacity : OPTIONAL IfcSpecificHeatCapacityMeasure;
      BoilingPoint         : OPTIONAL IfcThermodynamicTemperatureMeasure;
      FreezingPoint        : OPTIONAL IfcThermodynamicTemperatureMeasure;
      ThermalConductivity  : OPTIONAL IfcThermalConductivityMeasure;
    UNIQUE
      UR31 : Material;
  END_ENTITY;

  ENTITY IfcHygroscopicMaterialProperties
    SUBTYPE OF(IfcMaterialProperties);
      UpperVaporResistanceFactor : OPTIONAL IfcPositiveRatioMeasure;
      LowerVaporResistanceFactor : OPTIONAL IfcPositiveRatioMeasure;
      IsothermalMoistureCapacity : OPTIONAL IfcIsothermalMoistureCapacityMeasure;
      VaporPermeability          : OPTIONAL IfcVaporPermeabilityMeasure;
      MoistureDiffusivity        : OPTIONAL IfcMoistureDiffusivityMeasure;
    UNIQUE
      UR31 : Material;
  END_ENTITY;

  ENTITY IfcExtendedMaterialProperties
    SUBTYPE OF(IfcMaterialProperties);
      ExtendedProperties : SET [1:?] OF IfcProperty;
      Description        : OPTIONAL IfcText;
      Name               : IfcLabel;
  END_ENTITY;

  ENTITY IfcGeneralMaterialProperties
    SUBTYPE OF(IfcMaterialProperties);
      MolecularWeight : OPTIONAL IfcMolecularWeightMeasure;
      Porosity        : OPTIONAL IfcNormalisedRatioMeasure;
      MassDensity     : OPTIONAL IfcMassDensityMeasure;
    UNIQUE
      UR31 : Material;
    WHERE
      WR31 : (Porosity < 1.0);
  END_ENTITY;

  ENTITY IfcOpticalMaterialProperties
    SUBTYPE OF(IfcMaterialProperties);
      VisibleTransmittance     : OPTIONAL IfcPositiveRatioMeasure;
      SolarTransmittance       : OPTIONAL IfcPositiveRatioMeasure;
      ThermalIrTransmittance   : OPTIONAL IfcPositiveRatioMeasure;
      ThermalIrEmissivityBack  : OPTIONAL IfcPositiveRatioMeasure;
      ThermalIrEmissivityFront : OPTIONAL IfcPositiveRatioMeasure;
      VisibleReflectanceBack   : OPTIONAL IfcPositiveRatioMeasure;
      VisibleReflectanceFront  : OPTIONAL IfcPositiveRatioMeasure;
      SolarReflectanceFront    : OPTIONAL IfcPositiveRatioMeasure;
      SolarReflectanceBack     : OPTIONAL IfcPositiveRatioMeasure;
    UNIQUE
      UR31 : Material;
  END_ENTITY;

-- END_SCHEMA;
-- SCHEMA IFCPRESENTATIONRESOURCE;

  TYPE IfcStyledItemSelect = SELECT
    (IfcShapeAspect,
     IfcShapeRepresentation);
  END_TYPE;

  TYPE IfcColorRGB = LIST [3:3] OF IfcNormalisedRatioMeasure;
  END_TYPE;

  TYPE IfcSurfaceSideEnum = ENUMERATION OF
    (POSITIVE,
     NEGATIVE,
     BOTH);
  END_TYPE;

  ENTITY IfcSurfaceStyleUsage;
      AppliedTo : SET [1:?] OF IfcStyledItemSelect;
      Style     : IfcSurfaceStyle;
      Side      : IfcSurfaceSideEnum;
  END_ENTITY;

  ENTITY IfcSurfaceStyle;
      Name       : IfcLabel;
      Properties : SET [1:?] OF IfcSurfaceStyleProperties;
    INVERSE
      Usages     : SET [1:?] OF IfcSurfaceStyleUsage FOR Style;
    WHERE
      WR11 : SIZEOF(QUERY(Temp <* Properties | 'IFC2X_FINAL.IFCSURFACERENDERINGPROPERTIES' IN TYPEOF(Temp))) <= 1;
  END_ENTITY;

  ENTITY IfcSurfaceStyleProperties
    ABSTRACT SUPERTYPE OF (ONEOF(IfcSurfaceExtendedProperties, IfcSurfaceShadingProperties));
      UsageIdentifier : OPTIONAL IfcLabel;
  END_ENTITY;

  ENTITY IfcSurfaceExtendedProperties
    SUBTYPE OF(IfcSurfaceStyleProperties);
      ExtendedProperties : SET [1:?] OF IfcProperty;
      Description        : OPTIONAL IfcText;
      Name               : IfcLabel;
  END_ENTITY;

  ENTITY IfcSurfaceShadingProperties
    SUPERTYPE OF (IfcSurfaceRenderingProperties)
    SUBTYPE OF(IfcSurfaceStyleProperties);
      AmbientColor : IfcColorRGB;
  END_ENTITY;

  ENTITY IfcSurfaceRenderingProperties
    SUBTYPE OF(IfcSurfaceShadingProperties);
      AmbientIntensity     : IfcNormalisedRatioMeasure;
      DiffuseColor         : IfcColorRGB;
      Transparency         : IfcNormalisedRatioMeasure;
      EmmisiveColor        : OPTIONAL IfcColorRGB;
      SpecularIntensity    : OPTIONAL IfcNormalisedRatioMeasure;
      SpecularColor        : OPTIONAL IfcColorRGB;
    DERIVE
      SELF\IfcSurfaceShadingProperties.AmbientColor : IfcColorRGB := 
       [AmbientIntensity * DiffuseColor[1] , AmbientIntensity * DiffuseColor[2] , AmbientIntensity * DiffuseColor[3]];
  END_ENTITY;

  ENTITY IfcPresentationLightSource
    SUPERTYPE OF (ONEOF(IfcDirectionalLightSource, IfcPointLightSource));
      Color            : IfcColorRGB;
      AmbientIntensity : IfcNormalisedRatioMeasure;
      Intensity        : IfcNormalisedRatioMeasure;
      InContext        : IfcGeometricRepresentationContext;
      Name             : IfcLabel;
      Description      : OPTIONAL IfcText;
  END_ENTITY;

  ENTITY IfcDirectionalLightSource
    SUBTYPE OF(IfcPresentationLightSource);
      Direction : IfcDirection;
  END_ENTITY;

  ENTITY IfcPointLightSource
    SUPERTYPE OF (IfcSpotLightSource)
    SUBTYPE OF(IfcPresentationLightSource);
      Location    : IfcCartesianPoint;
      Attenuation : LIST [1:3] OF REAL;
    WHERE
      WR21 : SIZEOF(QUERY(temp <* Attenuation | temp < 0.)) = 0;
  END_ENTITY;

  ENTITY IfcSpotLightSource
    SUBTYPE OF(IfcPointLightSource);
      SpreadAngle : IfcPositivePlaneAngleMeasure;
      CutOffAngle : IfcPositivePlaneAngleMeasure;
      Radius      : OPTIONAL IfcPositiveLengthMeasure;
      Direction   : IfcDirection;
    WHERE
      WR31 : (SpreadAngle <= CutOffAngle) AND (SpreadAngle < 180.);
      WR32 : (CutOffAngle <= 180.);
  END_ENTITY;

-- END_SCHEMA;
-- SCHEMA IFCREFERENCEGEOMETRYRESOURCE;

  ENTITY IfcReferenceGeometry
    ABSTRACT SUPERTYPE OF (ONEOF(IfcReferenceEdge, IfcReferenceVertex, IfcReferenceFace));
      Placement : OPTIONAL IfcAxis2Placement;
  END_ENTITY;

  ENTITY IfcReferenceEdge
    SUBTYPE OF(IfcReferenceGeometry);
      Edge : IfcEdge;
    WHERE
      WR1 : EXISTS(SELF\IfcReferenceGeometry.Placement) OR 
            (NOT('IFC2X_FINAL.IFCEDGECURVE' IN TYPEOF(Edge)));
  END_ENTITY;

  ENTITY IfcReferenceVertex
    SUBTYPE OF(IfcReferenceGeometry);
      Vertex : IfcVertex;
    WHERE
      WR1 : EXISTS(SELF\IfcReferenceGeometry.Placement) OR 
            (NOT('IFC2X_FINAL.IFCVERTEXPOINT' IN TYPEOF(Vertex)));
  END_ENTITY;

  ENTITY IfcReferenceFace
    SUBTYPE OF(IfcReferenceGeometry);
      Face : IfcFace;
    WHERE
      WR1 : EXISTS(SELF\IfcReferenceGeometry.Placement) OR 
            (NOT('IFC2X_FINAL.IFCFACESURFACE' IN TYPEOF(Face)));
  END_ENTITY;

-- END_SCHEMA;
-- SCHEMA IFCPROCESSEXTENSION;

  TYPE IfcTaskStatusEnum = ENUMERATION OF
    (COMPLETED,
     NOTYETSTARTED,
     STARTED,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcTaskMilestoneEnum = ENUMERATION OF
    (CONTRACTMILESTONE,
     CUSTOMERMILESTONE,
     FINANCIALMILESTONE,
     FINISHMILESTONE,
     MANAGEMENTMILESTONE,
     SCHEDULEDMILESTONE,
     STARTMILESTONE,
     SUPPLYMILESTONE,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcWorkControlTypeEnum = ENUMERATION OF
    (ACTUAL,
     BASELINE,
     PLANNED);
  END_TYPE;

  TYPE IfcMultiplierOrDivider = ENUMERATION OF
    (MULTIPLIER,
     DIVIDER);
  END_TYPE;

  ENTITY IfcTask
    SUBTYPE OF(IfcProcess);
      TaskId            : IfcIdentifier;
      WBSCode           : OPTIONAL LIST [1:?] OF UNIQUE IfcLabel;
      WBSSource         : OPTIONAL LIST [1:?] OF IfcLabel;
      Status            : IfcTaskStatusEnum;
      Milestones        : OPTIONAL SET [1:?] OF IfcTaskMilestoneEnum;
      WorkMethod        : OPTIONAL IfcLabel;
      InPlaceQuantity   : OPTIONAL IfcMeasureWithUnit;
      EstimatedQuantity : OPTIONAL IfcMeasureWithUnit;
      BudgetQuantity    : OPTIONAL IfcMeasureWithUnit;
      IsRootTask        : BOOLEAN;
    WHERE
      WR1 : SIZEOF(QUERY(temp <* SELF\IfcObject.Decomposes | NOT('IFC2X_FINAL.IFCRELNESTS' IN TYPEOF(temp)))) = 0;
      WR2 : SIZEOF(QUERY(temp <* SELF\IfcObject.IsDecomposedBy | NOT('IFC2X_FINAL.IFCRELNESTS' IN TYPEOF(temp)))) = 0;
      WR3 : EXISTS(SELF\IfcRoot.Name);
  END_ENTITY;

  ENTITY IfcScheduleTimeControl
    SUBTYPE OF(IfcControl);
      ActualStart                 : OPTIONAL IfcCalendarDate;
      EarlyStart                  : OPTIONAL IfcCalendarDate;
      LateStart                   : OPTIONAL IfcCalendarDate;
      ScheduleStart               : OPTIONAL IfcCalendarDate;
      ActualFinish                : OPTIONAL IfcCalendarDate;
      EarlyFinish                 : OPTIONAL IfcCalendarDate;
      LateFinish                  : OPTIONAL IfcCalendarDate;
      ScheduleFinish              : OPTIONAL IfcCalendarDate;
      ScheduleDuration            : OPTIONAL IfcTimeMeasure;
      ActualDuration              : OPTIONAL IfcTimeMeasure;
      RemainingTime               : OPTIONAL IfcTimeMeasure;
      FreeFloat                   : OPTIONAL IfcTimeMeasure;
      TotalFloat                  : OPTIONAL IfcTimeMeasure;
      IsCritical                  : OPTIONAL BOOLEAN;
      StatusTime                  : OPTIONAL IfcCalendarDate;
      StartFloat                  : OPTIONAL IfcTimeMeasure;
      FinishFloat                 : OPTIONAL IfcTimeMeasure;
      Completion                  : OPTIONAL IfcPositiveRatioMeasure;
    INVERSE
      ScheduleTimeControlAssigned : IfcRelAssignsTasks FOR TimeForTask;
  END_ENTITY;

  ENTITY IfcRelAssignsTasks
    SUBTYPE OF(IfcRelAssignsToControl);
      TimeForTask : OPTIONAL IfcScheduleTimeControl;
      Milestone   : OPTIONAL IfcTaskMilestoneEnum;
    WHERE
      WR1 : HIINDEX(SELF\IfcRelAssigns.RelatedObjects) = 1;
      WR2 : 'IFC2X_FINAL.IFCTASK' IN TYPEOF(SELF\IfcRelAssigns.RelatedObjects[1]);
      WR3 : 'IFC2X_FINAL.IFCWORKCONTROL' IN TYPEOF(SELF\IfcRelAssignsToControl.RelatingControl);
  END_ENTITY;

  ENTITY IfcWorkControl
    ABSTRACT SUPERTYPE OF (ONEOF(IfcWorkPlan, IfcWorkSchedule))
    SUBTYPE OF(IfcControl);
      Identifier      : IfcIdentifier;
      CreationDate    : IfcCalendarDate;
      Creators        : OPTIONAL SET [1:?] OF IfcPerson;
      Purpose         : OPTIONAL IfcLabel;
      Duration        : OPTIONAL IfcTimeMeasure;
      TotalFloat      : OPTIONAL IfcTimeMeasure;
      StartTime       : IfcCalendarDate;
      FinishTime      : OPTIONAL IfcCalendarDate;
      WorkControlType : OPTIONAL IfcWorkControlTypeEnum;
  END_ENTITY;

  ENTITY IfcWorkPlan
    SUBTYPE OF(IfcWorkControl);
  END_ENTITY;

  ENTITY IfcWorkSchedule
    SUBTYPE OF(IfcWorkControl);
  END_ENTITY;

  ENTITY IfcRelUsesResource
    SUBTYPE OF(IfcRelAssignsToResource);
      Duration                     : OPTIONAL IfcTimeMeasure;
      Quantity                     : OPTIONAL IfcMeasureWithUnit;
      ProductivityConversionRate   : OPTIONAL IfcMeasureWithUnit;
      ConverterMultiplierOrDivider : OPTIONAL IfcMultiplierOrDivider;
      ResourceUseCosts             : OPTIONAL SET [1:?] OF IfcCostValue;
      WasteFactor                  : OPTIONAL REAL;
    WHERE
      WR1 : HIINDEX(SELF\IfcRelAssigns.RelatedObjects) = 1;
      WR2 : 'IFC2X_FINAL.IFCPROCESS' IN TYPEOF(SELF\IfcRelAssigns.RelatedObjects[1]);
  END_ENTITY;

-- END_SCHEMA;
-- SCHEMA IFCCONTROLEXTENSION;

  ENTITY IfcConstraintUsage
    SUBTYPE OF(IfcControl);
      Intent     : IfcConstraintIntentEnum;
      Constraint : IfcConstraint;
  END_ENTITY;

  ENTITY IfcApprovalUsage
    SUBTYPE OF(IfcControl);
      Approval : IfcApproval;
  END_ENTITY;

-- END_SCHEMA;
-- SCHEMA IFCSHAREDBLDGSERVICEELEMENTS;

  TYPE IfcFlowDirectionEnum = ENUMERATION OF
    (SOURCE,
     SINK,
     SOURCEANDSINK,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcPortConnectionTypeEnum = ENUMERATION OF
    (ANGLE,
     BEADEDSLEEVE,
     BRAZED,
     COMPRESSION,
     CRIMP,
     DRAWBAND,
     DRIVESLIP,
     FLANGED,
     GROOVED,
     OUTSIDESLEEVE,
     SLIPON,
     SOLDERED,
     SSLIP,
     STANDINGSEAM,
     SWEDGE,
     THREADED,
     WELDED,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcDiscreteElementTypeEnum = ENUMERATION OF
    (INSULATION,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcFlowFittingTypeEnum = ENUMERATION OF
    (DUCTFITTING,
     PIPEFITTING,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcPrimaryFittingEnum = ENUMERATION OF
    (ENTRY,
     EXIT,
     ELBOW,
     TRANSITION,
     JUNCTION,
     OBSTRUCTION,
     OTHER,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcFlowSegmentTypeEnum = ENUMERATION OF
    (DUCTSEGMENT,
     PIPESEGMENT,
     GUTTERSEGMENT,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcAirFlowTypeEnum = ENUMERATION OF
    (SUPPLYAIR,
     RETURNAIR,
     EXHAUSTAIR,
     OTHER,
     NOTKNOWN,
     UNSET);
  END_TYPE;

  TYPE IfcAirTerminalFinishTypeEnum = ENUMERATION OF
    (ANNODIZED,
     PAINTED,
     NONE,
     OTHER,
     NOTKNOWN,
     UNSET);
  END_TYPE;

  TYPE IfcAirTerminalMountingTypeEnum = ENUMERATION OF
    (SURFACE,
     FLATFLUSH,
     LAYIN,
     OTHER,
     NOTKNOWN,
     UNSET);
  END_TYPE;

  TYPE IfcAirTerminalFaceTypeEnum = ENUMERATION OF
    (FOURWAYPATTERN,
     SINGLEDEFLECTION,
     DOUBLEDEFLECTION,
     SIGHTPROOF,
     EGGCRATE,
     PERFORATED,
     LOUVERED,
     OTHER,
     NOTKNOWN,
     UNSET);
  END_TYPE;

  TYPE IfcAirTerminalCoreTypeEnum = ENUMERATION OF
    (SHUTTERBLADE,
     CURVEDBLADE,
     REMOVABLE,
     REVERSIBLE,
     NONE,
     OTHER,
     NOTKNOWN,
     UNSET);
  END_TYPE;

  TYPE IfcSanitaryTerminalTypeEnum = ENUMERATION OF
    (FAUCET,
     ROOFDRAIN,
     SHOWER,
     SINK,
     TOILET,
     URINAL,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcHydronicHeaterTypeEnum = ENUMERATION OF
    (PANELRADIATOR,
     COLUMNRADIATOR,
     TUBERADIATOR,
     CONVECTOR,
     BASEBOARDHEATER,
     FINTUBEHEATER,
     OTHER,
     NOTKNOWN,
     UNSET);
  END_TYPE;

  TYPE IfcCoilTypeEnum = ENUMERATION OF
    (PRECOOLING,
     COOLING,
     RECOOLING,
     PREHEATING,
     HEATING,
     REHEATING,
     OTHER,
     NOTKNOWN,
     UNSET);
  END_TYPE;

  TYPE IfcCoilFlowArrangementEnum = ENUMERATION OF
    (COUNTERFLOW,
     CROSSFLOW,
     PARALLELFLOW,
     DIRECTEXPANSION,
     OTHER,
     NOTKNOWN,
     UNSET);
  END_TYPE;

  TYPE IfcHeatExchangerTypeEnum = ENUMERATION OF
    (PLATE,
     SHELLANDTUBE,
     OTHER,
     NOTKNOWN,
     UNSET);
  END_TYPE;

  TYPE IfcHeatExchangerArrangementEnum = ENUMERATION OF
    (COUNTERFLOW,
     CROSSFLOW,
     PARALLELFLOW,
     MULTIPASS,
     OTHER,
     NOTKNOWN,
     UNSET);
  END_TYPE;

  TYPE IfcCoolingTowerTypeEnum = ENUMERATION OF
    (OPENTOWER,
     CLOSEDTOWER,
     WOODFILL,
     CERAMIC,
     CROSSFLOW,
     OTHER,
     NOTKNOWN,
     UNSET);
  END_TYPE;

  TYPE IfcChillerTypeEnum = ENUMERATION OF
    (AIRCOOLED,
     WATERCOOLED,
     HEATRECOVERY,
     OTHER,
     NOTKNOWN,
     UNSET);
  END_TYPE;

  TYPE IfcBoilerTypeEnum = ENUMERATION OF
    (HOTWATER,
     GASFIRED,
     STEAM,
     OTHER,
     NOTKNOWN,
     UNSET);
  END_TYPE;

  TYPE IfcEnergySourceEnum = ENUMERATION OF
    (ELECTRICITY,
     NATURALGAS,
     OIL,
     LIQUIFIEDPETROLEUMGAS,
     PROPANE,
     STEAM,
     OTHER,
     NOTKNOWN,
     UNSET);
  END_TYPE;

  TYPE IfcCompressorTypeEnum = ENUMERATION OF
    (HERMETIC,
     RECIPROCATING,
     SCREW,
     OTHER,
     NOTKNOWN,
     UNSET);
  END_TYPE;

  TYPE IfcFanPressureClassEnum = ENUMERATION OF
    (CLASS1,
     CLASS2,
     CLASS3,
     CLASS4,
     OTHER,
     NOTKNOWN,
     UNSET);
  END_TYPE;

  TYPE IfcFanWheelTypeEnum = ENUMERATION OF
    (FORWARDCURVED,
     BACKWARDCURVED,
     AIRFOIL,
     PROPELLER,
     VANEAXIAL,
     PLUG,
     OTHER,
     NOTKNOWN,
     UNSET);
  END_TYPE;

  TYPE IfcFanDischargeTypeEnum = ENUMERATION OF
    (DUCT,
     SCREEN,
     NONE,
     OTHER,
     NOTKNOWN,
     UNSET);
  END_TYPE;

  TYPE IfcFanArrangementEnum = ENUMERATION OF
    (TOPHORIZONTAL,
     TOPANGULARDOWN,
     DOWNBLAST,
     BOTTOMANGULARDOWN,
     BOTTOMHORIZONTAL,
     BOTTOMANGULARUP,
     UPBLAST,
     TOPANGULARUP,
     OTHER,
     NOTKNOWN,
     UNSET);
  END_TYPE;

  TYPE IfcFanRotationEnum = ENUMERATION OF
    (CLOCKWISE,
     COUNTERCLOCKWISE,
     OTHER,
     NOTKNOWN,
     UNSET);
  END_TYPE;

  TYPE IfcFanDriveArrangementEnum = ENUMERATION OF
    (ARRANGEMENT1,
     ARRANGEMENT2,
     ARRANGEMENT3,
     ARRANGEMENT4,
     ARRANGEMENT5,
     ARRANGEMENT6,
     ARRANGEMENT7,
     ARRANGEMENT8,
     ARRANGEMENT9,
     ARRANGEMENT10,
     OTHER,
     NOTKNOWN,
     UNSET);
  END_TYPE;

  TYPE IfcMoterConnectionTypeEnum = ENUMERATION OF
    (DIRECTDRIVE,
     BELTDRIVE,
     COUPLING,
     OTHER,
     NOTKNOWN,
     UNSET);
  END_TYPE;

  TYPE IfcFanMountingTypeEnum = ENUMERATION OF
    (MANUFACTUREDCURB,
     FIELDERECTEDCURB,
     CONCRETEPAD,
     SUSPENDED,
     WALLMOUNTED,
     DUCTMOUNTED,
     OTHER,
     NOTKNOWN,
     UNSET);
  END_TYPE;

  TYPE IfcPumpTypeEnum = ENUMERATION OF
    (CIRCULATOR,
     ENDSUCTION,
     SPLITCASE,
     VERTICALINLINE,
     VERTICALTURBINE,
     OTHER,
     NOTKNOWN,
     UNSET);
  END_TYPE;

  TYPE IfcPumpBaseTypeEnum = ENUMERATION OF
    (FRAME,
     BASE,
     INLINE,
     OTHER,
     NOTKNOWN,
     UNSET);
  END_TYPE;

  TYPE IfcDistributionFlowElementTypeEnum = ENUMERATION OF
    (FLUIDFLOW,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcThermalLoadTypeEnum = ENUMERATION OF
    (PEOPLESENSIBLE,
     PEOPLELATENT,
     LIGHTING,
     EQUIPMENTSENSIBLE,
     EQUIPMENTLATENT,
     VENTILATIONINDOORAIR,
     VENTILATIONOUTSIDEAIR,
     RECIRCULATEDAIR,
     EXHAUSTAIR,
     AIREXCHANGERATE,
     DRYBULBTEMPERATURE,
     RELATIVEHUMIDITY,
     INFILTRATIONSENSIBLE,
     INFILTRATIONLATENT,
     OTHER,
     NOTKNOWN);
  END_TYPE;

  TYPE IfcRequirementOrCriteriaEnum = ENUMERATION OF
    (REQUIREMENT,
     CRITERIA,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcLossOrGainEnum = ENUMERATION OF
    (LOSS,
     GAIN,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcElectricCurrentEnum = ENUMERATION OF
    (ALTERNATING,
     DIRECT,
     NOTDEFINED);
  END_TYPE;

  ENTITY IfcRelFlowControlElements
    SUBTYPE OF(IfcRelConnects);
      RelatedControlElements : SET [1:?] OF IfcControlElement;
      RelatingFlowElement    : IfcDistributionFlowElement;
  END_ENTITY;

  ENTITY IfcControlElement
    SUPERTYPE OF (ONEOF(
      IfcActuator
     ,IfcController
     ,IfcSensor
    ))
    SUBTYPE OF(IfcDistributionElement);
      ControlElementId      : IfcLabel;
    INVERSE
      AssignedToFlowElement : SET [0:1] OF IfcRelFlowControlElements FOR RelatedControlElements;
    UNIQUE
      UR2 : ControlElementId;
  END_ENTITY;

  ENTITY IfcRelConnectsPorts
    SUBTYPE OF(IfcRelConnectsElements);
      FlowDirection      : IfcFlowDirectionEnum;
      PortConnectionType : OPTIONAL IfcPortConnectionTypeEnum;
    WHERE
      WR1 : 'IFC2X_FINAL.IFCDISTRIBUTIONFLOWELEMENT' IN TYPEOF(SELF\IfcRelConnectsElements.RelatingElement);
      WR2 : 'IFC2X_FINAL.IFCDISTRIBUTIONFLOWELEMENT' IN TYPEOF(SELF\IfcRelConnectsElements.RelatedElement);
  END_ENTITY;

  ENTITY IfcDiscreteElement
    SUBTYPE OF(IfcEquipmentElement);
      PredefinedType : IfcDiscreteElementTypeEnum;
    WHERE
      WR1 : (PredefinedType <> IfcDiscreteElementTypeEnum.USERDEFINED) OR
            ((PredefinedType = IfcDiscreteElementTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType));
  END_ENTITY;

  ENTITY IfcDistributionFlowElement
    SUPERTYPE OF (ONEOF(IfcFlowController, IfcFlowFitting, IfcFlowSegment, 
                  IfcFlowTerminal, IfcHeatTransferDevice, IfcFluidMovingDevice, 
                  IfcTreatmentDevice, IfcStorageDevice))
    SUBTYPE OF(IfcDistributionElement);
      FlowElementType    : IfcDistributionFlowElementTypeEnum;
    INVERSE
      HasControlElements : SET [0:1] OF IfcRelFlowControlElements FOR RelatingFlowElement;
  END_ENTITY;

  ENTITY IfcFlowController
    SUPERTYPE OF (ONEOF(
      IfcAirTerminalBox
     ,IfcDamper
     ,IfcValve
    ))
    SUBTYPE OF(IfcDistributionFlowElement);
  END_ENTITY;

  ENTITY IfcFlowFitting
    SUBTYPE OF(IfcDistributionFlowElement);
      PredefinedType     : IfcFlowFittingTypeEnum;
      PrimaryFittingType : IfcPrimaryFittingEnum;
    WHERE
      WR1 : (PredefinedType <> IfcFlowFittingTypeEnum.USERDEFINED) OR
            ((PredefinedType = IfcFlowFittingTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType));
  END_ENTITY;

  ENTITY IfcFlowSegment
    SUBTYPE OF(IfcDistributionFlowElement);
      PredefinedType : IfcFlowSegmentTypeEnum;
    WHERE
      WR1 : (PredefinedType <> IfcFlowSegmentTypeEnum.USERDEFINED) OR
            ((PredefinedType = IfcFlowSegmentTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType));
  END_ENTITY;

  ENTITY IfcFlowTerminal
    SUPERTYPE OF (ONEOF(IfcAirTerminal, IfcSanitaryTerminal, IfcHydronicHeater, IfcCoil))
    SUBTYPE OF(IfcDistributionFlowElement);
  END_ENTITY;

  ENTITY IfcAirTerminal
    SUBTYPE OF(IfcFlowTerminal);
      AirFlowType                  : IfcAirFlowTypeEnum;
      Throw                        : OPTIONAL IfcLengthMeasure;
      AirDiffusionPerformanceIndex : OPTIONAL IfcReal;
      FinishType                   : OPTIONAL IfcAirTerminalFinishTypeEnum;
      FinishColor                  : OPTIONAL IfcLabel;
      MountingType                 : OPTIONAL IfcAirTerminalMountingTypeEnum;
      FaceType                     : OPTIONAL IfcAirTerminalFaceTypeEnum;
      CoreType                     : OPTIONAL IfcAirTerminalCoreTypeEnum;
      CoreSetVertical              : OPTIONAL IfcPlaneAngleMeasure;
      CoreSetHorizontal            : OPTIONAL IfcPlaneAngleMeasure;
      IntegralControl              : OPTIONAL IfcBoolean;
  END_ENTITY;

  ENTITY IfcSanitaryTerminal
    SUBTYPE OF(IfcFlowTerminal);
      PredefinedType : IfcSanitaryTerminalTypeEnum;
    WHERE
      WR1 : (PredefinedType <> IfcSanitaryTerminalTypeEnum.USERDEFINED) OR
            ((PredefinedType = IfcSanitaryTerminalTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType));
  END_ENTITY;

  ENTITY IfcHydronicHeater
    SUBTYPE OF(IfcFlowTerminal);
      HydronicHeaterType : IfcHydronicHeaterTypeEnum;
      HeatOutput         : OPTIONAL IfcPowerMeasure;
      Enclosure          : OPTIONAL IfcLabel;
      BodyMass           : OPTIONAL IfcMassMeasure;
      NumberOfPanels     : OPTIONAL IfcInteger;
      NumberOfSections   : OPTIONAL IfcInteger;
  END_ENTITY;

  ENTITY IfcCoil
    SUBTYPE OF(IfcFlowTerminal);
      CoilType        : IfcCoilTypeEnum;
      BypassFactor    : OPTIONAL IfcRatioMeasure;
      FaceVelocity    : OPTIONAL IfcLinearVelocityMeasure;
      FlowArrangement : OPTIONAL IfcCoilFlowArrangementEnum;
  END_ENTITY;

  ENTITY IfcHeatTransferDevice
    SUPERTYPE OF (ONEOF(IfcUnitHeater, IfcTubeBundle, IfcHeatExchanger, IfcCoolingTower, IfcChiller, IfcBoiler))
    SUBTYPE OF(IfcDistributionFlowElement);
      HeatTransferRate    : OPTIONAL IfcPowerMeasure;
      ThermalEfficiency   : OPTIONAL IfcPositiveRatioMeasure;
      PrimaryEnergySource : OPTIONAL IfcEnergySourceEnum;
  END_ENTITY;

  ENTITY IfcUnitHeater
    SUBTYPE OF(IfcHeatTransferDevice);
  END_ENTITY;

  ENTITY IfcTubeBundle
    SUBTYPE OF(IfcHeatTransferDevice);
      TubeSize                      : OPTIONAL IfcPositiveLengthMeasure;
      TubeMaterial                  : OPTIONAL IfcMaterialSelect;
      TubeLength                    : OPTIONAL IfcPositiveLengthMeasure;
      TubeSpacing                   : OPTIONAL IfcPositiveLengthMeasure;
      TubeFluidEnteringTemperature  : OPTIONAL LIST [1:2] OF IfcThermodynamicTemperatureMeasure;
      TubeFluidLeavingTemperature   : OPTIONAL LIST [1:2] OF IfcThermodynamicTemperatureMeasure;
      FinMaterial                   : OPTIONAL IfcMaterialSelect;
      ShellMaterial                 : OPTIONAL IfcMaterialSelect;
      FinSpacing                    : OPTIONAL IfcPositiveLengthMeasure;
      TubeFoulingFactor             : OPTIONAL IfcThermalResistanceMeasure;
      NumberOfTubeCircuits          : OPTIONAL IfcInteger;
      NumberOfTubeRows              : OPTIONAL IfcInteger;
      ShellFluidLeavingTemperature  : OPTIONAL LIST [1:2] OF IfcThermodynamicTemperatureMeasure;
      ShellFluidEnteringTemperature : OPTIONAL LIST [1:2] OF IfcThermodynamicTemperatureMeasure;
  END_ENTITY;

  ENTITY IfcHeatExchanger
    SUBTYPE OF(IfcHeatTransferDevice);
      HeatExchangerType        : IfcHeatExchangerTypeEnum;
      HeatExchangerArrangement : OPTIONAL IfcHeatExchangerArrangementEnum;
      NumberOfPlates           : OPTIONAL IfcInteger;
  END_ENTITY;

  ENTITY IfcCoolingTower
    SUBTYPE OF(IfcHeatTransferDevice);
      CoolingTowerType         : IfcCoolingTowerTypeEnum;
      AmbientDesignTemperature : OPTIONAL LIST [1:2] OF IfcThermodynamicTemperatureMeasure;
  END_ENTITY;

  ENTITY IfcChiller
    SUBTYPE OF(IfcHeatTransferDevice);
      ChillerType            : IfcChillerTypeEnum;
      NominalCoolingCapacity : OPTIONAL IfcPowerMeasure;
  END_ENTITY;

  ENTITY IfcBoiler
    SUBTYPE OF(IfcHeatTransferDevice);
      BoilerType      : IfcBoilerTypeEnum;
      HeatOutput      : OPTIONAL IfcPowerMeasure;
      PressureRating  : OPTIONAL IfcPressureMeasure;
      EnergyInputRate : OPTIONAL IfcVolumetricFlowRateMeasure;
  END_ENTITY;

  ENTITY IfcFluidMovingDevice
    SUPERTYPE OF (ONEOF(IfcCompressor, IfcFan, IfcPump))
    SUBTYPE OF(IfcDistributionFlowElement);
      PrimaryEnergySource : OPTIONAL IfcEnergySourceEnum;
      ImpellerDiameter    : OPTIONAL IfcLengthMeasure;
  END_ENTITY;

  ENTITY IfcCompressor
    SUBTYPE OF(IfcFluidMovingDevice);
      CompressorType : IfcCompressorTypeEnum;
      HotGasBypass   : OPTIONAL IfcBoolean;
  END_ENTITY;

  ENTITY IfcFan
    SUBTYPE OF(IfcFluidMovingDevice);
      AirFlowType           : IfcAirFlowTypeEnum;
      StaticPressure        : OPTIONAL IfcPressureMeasure;
      FanPressureClass      : OPTIONAL IfcFanPressureClassEnum;
      FanWheelType          : OPTIONAL IfcFanWheelTypeEnum;
      WheelMaterial         : OPTIONAL IfcMaterialSelect;
      WheelTipSpeed         : OPTIONAL IfcLinearVelocityMeasure;
      DischargeVelocity     : OPTIONAL IfcLinearVelocityMeasure;
      HousingMaterial       : OPTIONAL IfcMaterialSelect;
      DischargePressureLoss : OPTIONAL IfcPressureMeasure;
      FanDischargeType      : OPTIONAL IfcFanDischargeTypeEnum;
      FanArrangement        : OPTIONAL IfcFanArrangementEnum;
      FanRotation           : OPTIONAL IfcFanRotationEnum;
      FanDriveArrangement   : OPTIONAL IfcFanDriveArrangementEnum;
      DrivePowerLoss        : OPTIONAL IfcPowerMeasure;
      MotorDriveType        : OPTIONAL IfcMoterConnectionTypeEnum;
      MotorInAirstream      : OPTIONAL IfcBoolean;
      FanMountingType       : OPTIONAL IfcFanMountingTypeEnum;
  END_ENTITY;

  ENTITY IfcPump
    SUBTYPE OF(IfcFluidMovingDevice);
      PumpType               : IfcPumpTypeEnum;
      NetPositiveSuctionHead : OPTIONAL IfcPressureMeasure;
      ImpellerSealMaterial   : OPTIONAL IfcMaterialSelect;
      PumpBaseType           : OPTIONAL IfcPumpBaseTypeEnum;
      MotorDriveType         : OPTIONAL IfcMoterConnectionTypeEnum;
  END_ENTITY;

  ENTITY IfcTreatmentDevice
    SUPERTYPE OF (IfcAirFilter)
    SUBTYPE OF(IfcDistributionFlowElement);
  END_ENTITY;

  ENTITY IfcAirFilter
    SUBTYPE OF(IfcTreatmentDevice);
      DirtyPressureDrop : OPTIONAL IfcPressureMeasure;
      CleanPressureDrop : OPTIONAL IfcPressureMeasure;
      Efficiency        : OPTIONAL IfcRatioMeasure;
  END_ENTITY;

  ENTITY IfcStorageDevice
    SUPERTYPE OF (IfcTank)
    SUBTYPE OF(IfcDistributionFlowElement);
  END_ENTITY;

  ENTITY IfcTank
    SUBTYPE OF(IfcStorageDevice);
      Volume                   : OPTIONAL IfcVolumeMeasure;
      ReliefValveSetting       : OPTIONAL IfcPressureMeasure;
      ChargePressure           : OPTIONAL IfcPressureMeasure;
      PressureRegulatorSetting : OPTIONAL IfcPressureMeasure;
  END_ENTITY;

  ENTITY IfcSpaceThermalLoad
    SUBTYPE OF(IfcPropertySetDefinition);
      ApplicableValueRatio  : OPTIONAL IfcPositiveRatioMeasure;
      ThermalLoadSource     : IfcThermalLoadTypeEnum;
      RequirementOrCriteria : IfcRequirementOrCriteriaEnum;
      ConstantLoad          : BOOLEAN;
      LossOrGain            : IfcLossOrGainEnum;
      SourceDescription     : OPTIONAL IfcText;
      MaximumValue          : IfcMeasureWithUnit;
      MinimumValue          : OPTIONAL IfcMeasureWithUnit;
  END_ENTITY;

  ENTITY IfcFluidFlowProperties
    SUBTYPE OF(IfcPropertySetDefinition);
      MaximumFlowRate    : OPTIONAL IfcVolumetricFlowRateMeasure;
      DesignFlowrate     : OPTIONAL IfcVolumetricFlowRateMeasure;
      MinimumFlowrate    : OPTIONAL IfcVolumetricFlowRateMeasure;
      PressureLoss       : OPTIONAL IfcPressureMeasure;
      WorkingPressure    : OPTIONAL IfcPressureMeasure;
      PressureRating     : OPTIONAL IfcPressureMeasure;
      Fluid              : IfcMaterial;
      DesignVelocity     : OPTIONAL IfcLinearVelocityMeasure;
      DesignTemperature  : OPTIONAL LIST [1:2] OF IfcThermodynamicTemperatureMeasure;
      MaximumTemperature : OPTIONAL LIST [1:2] OF IfcThermodynamicTemperatureMeasure;
      MinimumTemperature : OPTIONAL LIST [1:2] OF IfcThermodynamicTemperatureMeasure;
      WorkingTemperature : OPTIONAL LIST [1:2] OF IfcThermodynamicTemperatureMeasure;
      WorkingQuality     : OPTIONAL IfcRatioMeasure;
  END_ENTITY;

  ENTITY IfcElectricalBaseProperties
    SUPERTYPE OF (IfcElectricalExtendedProperties)
    SUBTYPE OF(IfcPropertySetDefinition);
      ElectricCurrentType   : OPTIONAL IfcElectricCurrentEnum;
      InputVoltage          : OPTIONAL IfcElectricVoltageMeasure;
      InputFrequency        : OPTIONAL IfcFrequencyMeasure;
      FullLoadCurrent       : OPTIONAL IfcElectricCurrentMeasure;
      MinimumCircuitCurrent : OPTIONAL IfcElectricCurrentMeasure;
      MaximumPowerInput     : OPTIONAL IfcPowerMeasure;
      RatedPowerInput       : OPTIONAL IfcPowerMeasure;
  END_ENTITY;

  ENTITY IfcElectricalExtendedProperties
    SUBTYPE OF(IfcElectricalBaseProperties);
      InputPhase            : OPTIONAL INTEGER;
      InrushCurrent         : OPTIONAL IfcElectricCurrentMeasure;
      LockedRotorCurrent    : OPTIONAL IfcElectricCurrentMeasure;
      CircuitSizePowerInput : OPTIONAL IfcPowerMeasure;
      FuseSize              : OPTIONAL IfcElectricCurrentMeasure;
      Grounded              : OPTIONAL BOOLEAN;
  END_ENTITY;

-- END_SCHEMA;
-- SCHEMA IFCSHAREDFACILITIESELEMENTS;

  TYPE IfcRiskTypeEnum = ENUMERATION OF
    (HEALTHANDSAFETY,
     HAZARD,
     INSURANCE,
     BUSINESS,
     GENERALRISKFACTOR,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcInventoryTypeEnum = ENUMERATION OF
    (ASSETINVENTORY,
     SPACEINVENTORY,
     FURNITUREINVENTORY);
  END_TYPE;

  ENTITY IfcAsset
    SUBTYPE OF(IfcGroup);
      AssetLocation        : IfcSpatialStructureElement;
      AssetIdentifier      : IfcLabel;
      AssetRisks           : OPTIONAL SET [1:?] OF IfcRiskTypeEnum;
      OriginalValue        : OPTIONAL IfcCostValue;
      CurrentValue         : OPTIONAL IfcCostValue;
      TotalReplacementCost : OPTIONAL IfcCostValue;
      Owner                : OPTIONAL IfcActorSelect;
      User                 : OPTIONAL IfcActorSelect;
      LeasedFrom           : OPTIONAL IfcActorSelect;
      LeasedTo             : OPTIONAL IfcActorSelect;
      ResponsiblePerson    : OPTIONAL IfcPerson;
      IncorporationDate    : OPTIONAL IfcCalendarDate;
      CommissioningDate    : OPTIONAL IfcCalendarDate;
      WarrantyDuration     : OPTIONAL IfcTimeMeasure;
      ExpectedLife         : OPTIONAL IfcTimeMeasure;
      OperatingFunction    : OPTIONAL IfcClassificationNotation;
      DepreciatedValue     : OPTIONAL IfcCostValue;
    WHERE
      WR1 : SIZEOF(QUERY(Temp <* SELF\IfcGroup.IsGroupedBy.RelatedObjects | NOT('IFC2X_FINAL.IFCELEMENT' IN TYPEOF(Temp)))) = 0;
  END_ENTITY;

  ENTITY IfcSystemFurnitureElement
    SUBTYPE OF(IfcFurnishingElement);
  END_ENTITY;

  ENTITY IfcFurniture
    SUBTYPE OF(IfcFurnishingElement);
  END_ENTITY;

  ENTITY IfcInventory
    SUBTYPE OF(IfcGroup);
      DefinedType        : IfcInventoryTypeEnum;
      Jurisdiction       : IfcActorSelect;
      ResponsiblePersons : SET [1:?] OF IfcPerson;
      LastUpdateDate     : IfcCalendarDate;
      CurrentValue       : OPTIONAL IfcCostValue;
      OriginalValue      : OPTIONAL IfcCostValue;
    WHERE
      WR41 : SIZEOF(QUERY(temp <* SELF\IfcGroup.IsGroupedBy.RelatedObjects |
                 NOT( ('IFC2X_FINAL.IFCSPACE' IN TYPEOF (temp)) OR 
                      ('IFC2X_FINAL.IFCASSET' IN TYPEOF (temp)) OR
                      ('IFC2X_FINAL.IFCFURNITURE' IN TYPEOF (temp))
                 ))) = 0;
  END_ENTITY;

  ENTITY IfcManufacturerInformation
    SUBTYPE OF(IfcPropertySetDefinition);
      ModelLabel          : OPTIONAL IfcLabel;
      ModelReference      : OPTIONAL IfcLabel;
      Manufacturer        : OPTIONAL IfcOrganization;
      QuantityInformation : OPTIONAL SET [1:?] OF IfcPhysicalQuantity;
    WHERE
      WR1 : EXISTS (Description) OR EXISTS (ModelLabel) OR EXISTS (ModelReference) OR EXISTS (Manufacturer);
  END_ENTITY;

-- END_SCHEMA;
-- SCHEMA IFCSHAREDMGMTELEMENTS;

  TYPE IfcCostUseEnum = ENUMERATION OF
    (EXTENSIONONLY,
     ELEMENTONLY,
     ELEMENTSETEXTENSIONCALC,
     EXTENSIONSETELEMENTCALC,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcChangeOrderStatusEnum = ENUMERATION OF
    (PROPOSING,
     PROPOSED,
     REQUESTED,
     BEINGAPPROVED,
     PLANNING,
     WORKSTARTED,
     WORKDELAYED,
     WORKDONE,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcPurchaseOrderStatusEnum = ENUMERATION OF
    (REQUESTED,
     BEINGAPPROVED,
     ISSUED,
     RECEIVED,
     ITEMSRECEIVED,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcWorkOrderStatusEnum = ENUMERATION OF
    (REQUESTED,
     BEINGAPPROVED,
     PLANNING,
     WORKSTARTED,
     WORKDELAYED,
     WORKDONE,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcWorkOrderRiskTypeEnum = ENUMERATION OF
    (HEALTHANDSAFETY,
     HAZARDS,
     INSURANCE,
     GENERALRISKFACTOR,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  ENTITY IfcCostSchedule
    SUPERTYPE OF (IfcBudget)
    SUBTYPE OF(IfcControl);
      Title          : IfcLabel;
      SubmittedBy    : OPTIONAL IfcActorSelect;
      ApprovedBy     : OPTIONAL SET [1:?] OF IfcActorSelect;
      PreparedBy     : IfcPerson;
      SubmittedOn    : OPTIONAL IfcCalendarDate;
      TotalCost      : IfcCostValue;
      CostElements   : OPTIONAL LIST [1:?] OF IfcCost;
      Status         : IfcLabel;
      IntendedUse    : OPTIONAL IfcText;
      Comments       : OPTIONAL LIST [1:?] OF UNIQUE IfcText;
      TargetUsers    : OPTIONAL SET [1:?] OF IfcActorSelect;
      ValidFromDate  : OPTIONAL IfcCalendarDate;
      ValidToDate    : OPTIONAL IfcCalendarDate;
      UpdateDate     : OPTIONAL IfcCalendarDate;
      ScheduleNumber : IfcIdentifier;
    UNIQUE
      UR31 : ScheduleNumber;
  END_ENTITY;

  ENTITY IfcBudget
    SUBTYPE OF(IfcCostSchedule);
      BudgetSource : OPTIONAL IfcLabel;
      Balance      : IfcCostValue;
  END_ENTITY;

  ENTITY IfcCost
    SUBTYPE OF(IfcControl);
      ContextDescription : IfcLabel;
      ElementCost        : OPTIONAL IfcCostValue;
      ExtensionCost      : OPTIONAL IfcCostValue;
      CostUse            : IfcCostUseEnum;
      PreparedOn         : OPTIONAL IfcCalendarDate;
      Quantities         : OPTIONAL LIST [1:?] OF UNIQUE IfcCostQuantity;
      CostType           : IfcLabel;
    INVERSE
      CostSchedule       : IfcCostSchedule FOR CostElements;
    WHERE
      WR1 : SIZEOF(QUERY(temp <* SELF\IfcControl.Controls | NOT('IFC2X_FINAL.IFCRELCOSTSOBJECTS' IN TYPEOF(temp)))) = 0;
  END_ENTITY;

  ENTITY IfcProjectOrder
    ABSTRACT SUPERTYPE OF (ONEOF(IfcChangeOrder, IfcPurchaseOrder, IfcWorkOrder))
    SUBTYPE OF(IfcControl);
      OrderNumber        : IfcIdentifier;
      TransactionCode    : OPTIONAL IfcLabel;
      IssuingDate        : IfcCalendarDate;
      IssuedBy           : IfcActorSelect;
      IssuedTo           : OPTIONAL SET [1:?] OF IfcActorSelect;
      AdditionalContacts : OPTIONAL SET [1:?] OF IfcActorSelect;
      Remarks            : OPTIONAL SET [1:?] OF IfcText;
      Signoff            : OPTIONAL IfcPerson;
      BudgetSource       : OPTIONAL IfcBudget;
    UNIQUE
      UR31 : OrderNumber;
  END_ENTITY;

  ENTITY IfcChangeOrder
    SUBTYPE OF(IfcProjectOrder);
      ChangeDescription   : OPTIONAL IfcText;
      ReasonForChange     : OPTIONAL IfcText;
      RequestedStartTime  : OPTIONAL IfcDateAndTime;
      RequestedFinishTime : OPTIONAL IfcDateAndTime;
      CostEstimate        : OPTIONAL IfcCostSchedule;
      WorkPlan            : OPTIONAL IfcWorkPlan;
      Status              : IfcChangeOrderStatusEnum;
      ActualStartTime     : OPTIONAL IfcDateAndTime;
      ActualFinishTime    : OPTIONAL IfcDateAndTime;
  END_ENTITY;

  ENTITY IfcPurchaseOrder
    SUBTYPE OF(IfcProjectOrder);
      RequiredDate  : OPTIONAL IfcCalendarDate;
      ScheduledDate : OPTIONAL IfcCalendarDate;
      ActualDate    : OPTIONAL IfcCalendarDate;
      IsFOB         : OPTIONAL BOOLEAN;
      ShipMethod    : OPTIONAL IfcLabel;
      PurchaseItems : OPTIONAL IfcCostSchedule;
      TotalCost     : OPTIONAL IfcCostValue;
      Status        : IfcPurchaseOrderStatusEnum;
  END_ENTITY;

  ENTITY IfcWorkOrder
    SUBTYPE OF(IfcProjectOrder);
      ProductDescription  : OPTIONAL IfcLabel;
      ShortJobDescription : IfcLabel;
      LongJobDescription  : OPTIONAL IfcLabel;
      WorkTypeRequested   : OPTIONAL IfcLabel;
      ContractualType     : OPTIONAL IfcLabel;
      IfNotAccomplished   : OPTIONAL LIST [1:?] OF UNIQUE IfcLabel;
      RequestedStartTime  : OPTIONAL IfcDateAndTime;
      RequestedFinishTime : OPTIONAL IfcDateAndTime;
      ActualStartTime     : OPTIONAL IfcDateAndTime;
      ActualFinishTime    : OPTIONAL IfcDateAndTime;
      CostEstimate        : OPTIONAL IfcCostSchedule;
      WorkPlan            : OPTIONAL IfcWorkPlan;
      Status              : IfcWorkOrderStatusEnum;
      WorkOrderRiskType   : OPTIONAL SET [1:?] OF IfcWorkOrderRiskTypeEnum;
      PerformedBy         : SET [1:?] OF IfcPerson;
      ActualCost          : OPTIONAL IfcCostValue;
  END_ENTITY;

  ENTITY IfcRelCostsObjects
    SUBTYPE OF(IfcRelAssignsToControl);
    WHERE
      WR1 : 'IFC2X_FINAL.IFCCOST' IN TYPEOF (SELF\IfcRelAssignsToControl.RelatingControl);
  END_ENTITY;

-- END_SCHEMA;
-- SCHEMA IFCSHAREDSPATIALELEMENTS;

  TYPE IfcOccupantTypeEnum = ENUMERATION OF
    (OWNER,
     LESSEE,
     TENANT,
     ASSIGNEE,
     NOTDEFINED);
  END_TYPE;

  ENTITY IfcSpaceProgramGroup
    SUBTYPE OF(IfcGroup);
      RequiredGroupArea : OPTIONAL IfcAreaMeasure;
      GroupRole         : OPTIONAL IfcLabel;
      GroupAssignment   : OPTIONAL IfcActorSelect;
    WHERE
      WR41 : SIZEOF(QUERY(Temp <* SELF\IfcGroup.IsGroupedBy.RelatedObjects | NOT('IFC2X_FINAL.IFCSPACEPROGRAM' IN TYPEOF(Temp)))) = 0;
  END_ENTITY;

  ENTITY IfcRelInteractionRequirements
    SUBTYPE OF(IfcRelConnects);
      DailyInteraction      : OPTIONAL IfcCountMeasure;
      ImportanceRating      : OPTIONAL IfcNormalisedRatioMeasure;
      LocationOfInteraction : OPTIONAL IfcSpatialStructureElement;
      RelatingActor         : OPTIONAL IfcActor;
      RelatedActor          : OPTIONAL IfcActor;
      RelatedSpaceProgram   : IfcSpaceProgram;
      RelatingSpaceProgram  : IfcSpaceProgram;
  END_ENTITY;

  ENTITY IfcCompartment
    SUBTYPE OF(IfcZone);
      HasNaturalVentilation  : OPTIONAL LOGICAL;
      HasSprinklerProtection : OPTIONAL LOGICAL;
      FireRiskFactor         : OPTIONAL INTEGER;
  END_ENTITY;

  ENTITY IfcOccupant
    SUBTYPE OF(IfcActor);
      LeeseOrRentalDate   : OPTIONAL IfcCalendarDate;
      LeeseOrRentalPeriod : OPTIONAL IfcTimeMeasure;
      OccupationType      : IfcOccupantTypeEnum;
      UnlimitedPeriod     : LOGICAL;
  END_ENTITY;

  ENTITY IfcSpaceProgram
    SUBTYPE OF(IfcControl);
      SpaceProgramIdentifier : IfcIdentifier;
      MaxRequiredArea        : OPTIONAL IfcAreaMeasure;
      MinRequiredArea        : OPTIONAL IfcAreaMeasure;
      RequestedLocation      : OPTIONAL IfcSpatialStructureElement;
      MinEstimatedCost       : OPTIONAL IfcCostValue;
      MaxEstimatedCost       : OPTIONAL IfcCostValue;
      StandardRequiredArea   : IfcAreaMeasure;
    INVERSE
      HasInteractionReqsFrom : SET OF IfcRelInteractionRequirements FOR RelatedSpaceProgram;
      HasInteractionReqsTo   : SET OF IfcRelInteractionRequirements FOR RelatingSpaceProgram;
  END_ENTITY;

  ENTITY IfcRelOccupiesSpaces
    SUBTYPE OF(IfcRelAssignsToActor);
  END_ENTITY;

-- END_SCHEMA;
-- SCHEMA IFCARCHITECTUREDOMAIN;

  TYPE IfcPermeableCoveringOperationEnum = ENUMERATION OF
    (GRILL,
     LOUVER,
     SCREEN,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcJointEnum = ENUMERATION OF
    (EXPANSION_JOINT,
     EDGE_JOINT,
     CONTROL_JOINT,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcRailingTypeEnum = ENUMERATION OF
    (HANDRAIL,
     GUARDRAIL,
     BALUSTRADE,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcBuiltInTypeEnum = ENUMERATION OF
    (ACCESSORY,
     CABINET,
     COUNTER,
     SHELF,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  ENTITY IfcPermeableCoveringProperties
    SUBTYPE OF(IfcPropertySetDefinition);
      OperationType    : IfcPermeableCoveringOperationEnum;
      PanelPosition    : IfcWindowPanelPositionEnum;
      FrameDepth       : OPTIONAL IfcPositiveLengthMeasure;
      FrameThickness   : OPTIONAL IfcPositiveLengthMeasure;
      ShapeAspectStyle : IfcShapeAspect;
  END_ENTITY;

  ENTITY IfcConnectionConstraint;
      WaterproofingRequired : LOGICAL;
      VentilationRequired   : LOGICAL;
      JoinType              : IfcJointEnum;
      RangeOfMovement       : IfcPositiveLengthMeasure;
      FireRating            : IfcTimeMeasure;
      ConstraintOf          : IfcRelConnectsElements;
  END_ENTITY;

  ENTITY IfcRailing
    SUBTYPE OF(IfcBuildingElement);
      PredefinedType : IfcRailingTypeEnum;
    WHERE
      WR1 : (PredefinedType <> IfcRailingTypeEnum.USERDEFINED) OR 
            ((PredefinedType = IfcRailingTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType));
  END_ENTITY;

  ENTITY IfcCurtainWall
    SUBTYPE OF(IfcBuildingElement);
    WHERE
      WR61 : (HIINDEX(SELF\IfcObject.IsDecomposedBy) = 0) OR ((HIINDEX(SELF\IfcObject.IsDecomposedBy) = 1) AND 
             (EXISTS(SELF\IfcProduct.Representation)));
  END_ENTITY;

  ENTITY IfcAssessory
    SUBTYPE OF(IfcEquipmentElement);
      MountingType : IfcLabel;
  END_ENTITY;

  ENTITY IfcBuiltIn
    SUBTYPE OF(IfcFurnishingElement);
      PredefinedType : IfcBuiltInTypeEnum;
    WHERE
      WR1 : (PredefinedType <> IfcBuiltInTypeEnum.USERDEFINED) OR 
            ((PredefinedType = IfcBuiltInTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType));
  END_ENTITY;

-- END_SCHEMA;
-- SCHEMA IFCCONSTRUCTIONMGMTDOMAIN;

  ENTITY IfcCMDocPackage
    SUBTYPE OF(IfcGroup);
      DocPackageID   : IfcIdentifier;
      DocPackageName : IfcLabel;
      CreationDate   : IfcDateTimeSelect;
      Authors        : OPTIONAL SET [1:?] OF IfcActorSelect;
    UNIQUE
      UR41 : DocPackageID;
  END_ENTITY;

  ENTITY IfcConstructionEquipmentResource
    SUBTYPE OF(IfcResource);
  END_ENTITY;

  ENTITY IfcLaborResource
    SUBTYPE OF(IfcResource);
      Title    : IfcLabel;
      SkillSet : OPTIONAL SET [1:?] OF IfcLabel;
  END_ENTITY;

  ENTITY IfcConstructionProductResource
    SUBTYPE OF(IfcResource);
    WHERE
      WR1 : SIZEOF(SELF\IfcResource.ResourceOf) <=1;
      WR2 : NOT(EXISTS(SELF\IfcResource.ResourceOf[1])) OR
            (SELF\IfcResource.ResourceOf[1].RelatedObjectsType = IfcObjectTypeEnum.PRODUCT);
  END_ENTITY;

  ENTITY IfcSubContractResource
    SUBTYPE OF(IfcResource);
      SubContractResourceID : IfcIdentifier;
      SubContractor         : OPTIONAL IfcActorSelect;
      JobDescription        : OPTIONAL IfcText;
    UNIQUE
      UR41 : SubContractResourceID;
  END_ENTITY;

  ENTITY IfcConstructionMaterialResource
    SUBTYPE OF(IfcResource);
      Suppliers      : OPTIONAL SET [1:?] OF IfcActorSelect;
      OrderQuantity  : OPTIONAL IfcMeasureWithUnit;
      DesignMaterial : OPTIONAL SET [1:?] OF IfcMaterial;
    WHERE
      WR1 : SIZEOF(SELF\IfcResource.ResourceOf) <=1;
      WR2 : NOT(EXISTS(SELF\IfcResource.ResourceOf[1])) OR
            (SELF\IfcResource.ResourceOf[1].RelatedObjectsType = IfcObjectTypeEnum.PRODUCT);
  END_ENTITY;

  ENTITY IfcCrewResource
    SUBTYPE OF(IfcResource);
  END_ENTITY;

  ENTITY IfcRelAggregatesResources
    SUBTYPE OF(IfcRelAggregates);
      RequiredQuantity : IfcPhysicalQuantity;
      ConversionRate   : OPTIONAL IfcMeasureWithUnit;
    WHERE
      WR1 : 'IFC2X_FINAL.IFCCREWRESOURCE' IN TYPEOF(SELF\IfcRelDecomposes.RelatingObject);
      WR2 : SIZEOF(QUERY(temp <* SELF\IfcRelDecomposes.RelatedObjects |  NOT ('IFC2X_FINAL.IFCRESOURCE' IN TYPEOF(temp)))) = 0;
  END_ENTITY;

-- END_SCHEMA;
-- SCHEMA IFCELECTRICALDOMAIN;

  TYPE IfcMotorWindingEnum = ENUMERATION OF
    (SYNCHRONOUS,
     ASYNCHRONOUS,
     SERIESWOUND,
     PARALLELWOUND,
     OTHER,
     NOTDEFINED,
     NOTKNOWN,
     UNSET);
  END_TYPE;

  TYPE IfcMotorHousingEnum = ENUMERATION OF
    (SEALED,
     OPEN,
     OTHER,
     NOTKNOWN,
     UNSET);
  END_TYPE;

  TYPE IfcOutletTypeEnum = ENUMERATION OF
    (POWEROUTLET,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcElectricalApplianceTypeEnum = ENUMERATION OF
    (COMPUTER,
     COPIER,
     FACSIMILE,
     PRINTER,
     RADIANTHEATER,
     TELEPHONE,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  ENTITY IfcElectricMotor
    SUBTYPE OF(IfcElectricalElement);
      MotorWindingType   : OPTIONAL IfcMotorWindingEnum;
      Efficiency         : OPTIONAL IfcPositiveRatioMeasure;
      PowerOutput        : OPTIONAL IfcPowerMeasure;
      FrameConfiguration : OPTIONAL IfcText;
      InsulationRating   : OPTIONAL IfcText;
      MotorHousing       : OPTIONAL IfcMotorHousingEnum;
  END_ENTITY;

  ENTITY IfcLightFixture
    SUBTYPE OF(IfcElectricalElement);
      MaximumSpaceSensibleLoad  : OPTIONAL IfcPowerMeasure;
      MaximumPlenumSensibleLoad : OPTIONAL IfcPowerMeasure;
      SensibleLoadToRadiant     : OPTIONAL IfcPositiveRatioMeasure;
  END_ENTITY;

  ENTITY IfcOutlet
    SUBTYPE OF(IfcElectricalElement);
      OutletType : IfcOutletTypeEnum;
  END_ENTITY;

  ENTITY IfcElectricalAppliance
    SUBTYPE OF(IfcElectricalElement);
      ApplianceType : IfcElectricalApplianceTypeEnum;
  END_ENTITY;

-- END_SCHEMA;
-- SCHEMA IFCFACILITIESMGMTDOMAIN;

  TYPE IfcFMStandardSelect = SELECT
    (IfcFurnitureStandard,
     IfcEquipmentStandard,
     IfcSpaceProgram);
  END_TYPE;

  TYPE IfcMaintenanceTypeEnum = ENUMERATION OF
    (SCHEDULED,
     CORRECTIVE,
     PLANNEDCORRECTIVE,
     CONDITIONBASED,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcPriorityEnum = ENUMERATION OF
    (HIGH,
     MEDIUM,
     LOW);
  END_TYPE;

  ENTITY IfcFurnitureStandard
    SUBTYPE OF(IfcControl);
  END_ENTITY;

  ENTITY IfcEquipmentStandard
    SUBTYPE OF(IfcControl);
  END_ENTITY;

  ENTITY IfcMaintenanceRecord
    SUBTYPE OF(IfcControl);
      Records : LIST [1:?] OF UNIQUE IfcRelMaintenanceEvent;
  END_ENTITY;

  ENTITY IfcRelMaintenanceEvent
    SUBTYPE OF(IfcRelConnects);
      RelatedAssets     : SET [1:?] OF IfcAsset;
      RelatingWorkOrder : IfcMaintenanceWorkOrder;
  END_ENTITY;

  ENTITY IfcRelAssignsFMStandard
    SUBTYPE OF(IfcRelConnects);
      JobFunction      : IfcLabel;
      RelatingStandard : IfcFMStandardSelect;
      RelatedPersons   : SET [1:?] OF IfcActor;
  END_ENTITY;

  ENTITY IfcMaintenanceWorkOrder
    SUBTYPE OF(IfcWorkOrder);
      SparesToolsEquipmentConsumables : OPTIONAL BAG [1:?] OF IfcLabel;
      MaintenanceType                 : IfcMaintenanceTypeEnum;
      FaultPriority                   : OPTIONAL IfcPriorityEnum;
      LocationPriority                : OPTIONAL IfcPriorityEnum;
      AssetDowntime                   : OPTIONAL IfcTimeMeasure;
      ScheduledFrequency              : OPTIONAL IfcTimeMeasure;
      RequiredResponseTime            : OPTIONAL IfcTimeMeasure;
      LeadCraft                       : IfcLabel;
  END_ENTITY;

  ENTITY IfcMove
    SUBTYPE OF(IfcTask);
      MoveFrom        : IfcSpatialStructureElement;
      MoveTo          : IfcSpatialStructureElement;
      MoveConstraints : OPTIONAL SET [1:?] OF IfcActionTimeControl;
      PunchList       : OPTIONAL LIST [1:?] OF UNIQUE IfcLabel;
    WHERE
      WR1 : SIZEOF(SELF\IfcProcess.OperatesOn) >= 1;
      WR2 : SIZEOF(QUERY(temp <* OperatesOn |
              SIZEOF(QUERY(temp2 <* temp.RelatedObjects |
                ('IFC2X_FINAL.IFCACTOR' IN TYPEOF (temp2)) OR
                ('IFC2X_FINAL.IFCEQUIPMENTELEMENT' IN TYPEOF (temp2)) OR
                ('IFC2X_FINAL.IFCFURNISHINGELEMENT' IN TYPEOF (temp2)) )) >=1
              )) >= 1;
  END_ENTITY;

-- END_SCHEMA;
-- SCHEMA IFCHVACDOMAIN;

  TYPE IfcActuatorTypeEnum = ENUMERATION OF
    (ELECTRICACTUATOR,
     PNEUMATICACTUATOR,
     HYDRAULICACTUATOR,
     HANDOPERATEDACTUATOR,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcActuatorFailPositionEnum = ENUMERATION OF
    (FAILOPEN,
     FAILCLOSED,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcSensorTypeEnum = ENUMERATION OF
    (HVACSENSOR,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcValveEnum = ENUMERATION OF
    (AUTOMATED,
     ANGLE,
     AWWA,
     BALL,
     BUTTERFLY,
     CHECK,
     DIVERTER,
     GATE,
     GLOBE,
     NACE,
     NEEDLE,
     PLUG,
     PIPELINE,
     SAFETY,
     THREEWAY,
     ULFM,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcAirTerminalBoxEnum = ENUMERATION OF
    (VARIABLEAIRVOLUME,
     CONSTANTVOLUME,
     VARIABLEAIRVOLUMEREHEAT,
     CONSTANTVOLUMEREHEAT,
     VARIABLEAIRVOLUMEDUALDUCT,
     CONSTANTVOLUMEDUALDUCT,
     FANPOWERED,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcDamperTypeEnum = ENUMERATION OF
    (FIREDAMPER,
     SMOKEDAMPER,
     FIRESMOKEDAMPER,
     BACKDRAFTDAMPER,
     CONTROLDAMPER,
     LOUVER,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  TYPE IfcDamperSizingMethodEnum = ENUMERATION OF
    (NOMINAL,
     EXACT,
     USERDEFINED,
     NOTDEFINED);
  END_TYPE;

  ENTITY IfcActuator
    SUBTYPE OF(IfcControlElement);
      PredefinedType : IfcActuatorTypeEnum;
      FailPosition   : OPTIONAL IfcActuatorFailPositionEnum;
    WHERE
      WR1 : (PredefinedType <> IfcActuatorTypeEnum.USERDEFINED) OR
            ((PredefinedType = IfcActuatorTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType));
  END_ENTITY;

  ENTITY IfcController
    SUBTYPE OF(IfcControlElement);
  END_ENTITY;

  ENTITY IfcSensor
    SUBTYPE OF(IfcControlElement);
      PredefinedType : IfcSensorTypeEnum;
    WHERE
      WR1 : (PredefinedType <> IfcSensorTypeEnum.USERDEFINED) OR
            ((PredefinedType = IfcSensorTypeEnum.USERDEFINED) AND EXISTS(ObjectType));
  END_ENTITY;

  ENTITY IfcValve
    SUBTYPE OF(IfcFlowController);
      CloseOffRating       : OPTIONAL IfcPressureMeasure;
      ValveFlowCoefficient : OPTIONAL IfcMeasureWithUnit;
      ValveType            : IfcValveEnum;
  END_ENTITY;

  ENTITY IfcAirTerminalBox
    SUBTYPE OF(IfcFlowController);
      TerminalBoxType : IfcAirTerminalBoxEnum;
      SoundLevel      : OPTIONAL IfcMeasureWithUnit;
  END_ENTITY;

  ENTITY IfcDamper
    SUBTYPE OF(IfcFlowController);
      PredefinedType     : IfcDamperTypeEnum;
      FrameDepth         : OPTIONAL IfcLengthMeasure;
      SizingMethod       : OPTIONAL IfcDamperSizingMethodEnum;
      CloseOffRating     : OPTIONAL IfcPressureMeasure;
      LeakageAirFlowRate : OPTIONAL IfcVolumetricFlowRateMeasure;
      PercentOpen        : OPTIONAL IfcPositiveRatioMeasure;
    WHERE
      WR1 : (PredefinedType <> IfcDamperTypeEnum.USERDEFINED) OR
            ((PredefinedType = IfcDamperTypeEnum.USERDEFINED) AND EXISTS(SELF\IfcObject.ObjectType)) ;
  END_ENTITY;

-- END_SCHEMA;
(* end of non-platform part - IFC2x addendum 1 *)

END_SCHEMA;






